<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: continuous-wavelet | LESS IS MORE]]></title>
  <link href="http://r9y9.github.io/blog/categories/continuous-wavelet/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2015-12-23T01:12:48+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi YAMAMOTO]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[連続ウェーブレット変換に使うマザーウェーブレット色々: Morlet, Paul, DOG]]></title>
    <link href="http://r9y9.github.io/blog/2014/06/01/continuouos-wavelet-transform-types/"/>
    <updated>2014-06-01T01:42:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/06/01/continuouos-wavelet-transform-types</id>
    <content type="html"><![CDATA[<p>「ウェーブレット変換って難しいんじゃ…マザーウェーブレット？よくわかんない…」</p>

<p>大丈夫、そんな人には以下の文献がお勧めです</p>

<p> <a href="http://paos.colorado.edu/research/wavelets/bams_79_01_0061.pdf">Torrence, C. and G.P. Compo &ldquo;A Practical Guide to Wavelet Analysis&rdquo;, Bull. Am. Meteorol. Soc., 79, 61–78, 1998.</a></p>

<p>前置きはさておき、上の文献を参考にMorlet, Paul, DOG (Derivative of Gaussian) の代表的な3つのマザーウェーブレットで音声に対してウェーブレット変換をしてみたので、メモがてら結果を貼っておく</p>

<p>図の横軸はサンプルで、縦軸は周波数Hz（対数目盛り）にした</p>

<p>マザーウェーブレットのパラメータは、Morletは $\omega_{0} = 6.0$、Paulは $M = 4$、DOGは $M = 6$</p>

<p>スケールは、min=55hzで、25cent毎に8オクターブ分取った※厳密には違うのでごめんなさい</p>

<p>分析に使った音声は、<a href="http://r9y9.github.io/blog/2013/10/21/signal-reconstruction-using-invere-cwt/">逆連続ウェーブレット変換による信号の再構成 &ndash; LESS IS MORE</a> で使ったのと同じ</p>

<h2>Morlet</h2>

<p><img class="center" src="/images/morlet_6.png" title="&ldquo;Morlet Wavelet spectrogram&rdquo;" ></p>

<h2>Paul</h2>

<p><img class="center" src="/images/paul_4.png" title="&ldquo;Paul Wavelet spectrogram&rdquo;" ></p>

<h2>DOG</h2>

<p><img class="center" src="/images/dog_6.png" title="&ldquo;DOG Wavelet spectrogram&rdquo;" ></p>

<p>対数を取ると、以下のような感じ</p>

<h2>Morlet</h2>

<p><img class="center" src="/images/morlet_6_log.png" title="&ldquo;Morlet Wavelet log spectrogram&rdquo;" ></p>

<h2>Paul</h2>

<p><img class="center" src="/images/paul_4_log.png" title="&ldquo;Paul Wavelet log spectrogram&rdquo;" ></p>

<h2>DOG</h2>

<p><img class="center" src="/images/dog_6_log.png" title="&ldquo;DOG Wavelet log spectrogram&rdquo;" ></p>

<p>Paulは時間解像度は高いけど周波数解像度はいまいちなので、音声とかには向かないのかなー。DOGはMorletとPaulの中間くらいの位置づけの様子。DOGはorderを上げればMorletっぽくなるけど、Morletの方がやっぱ使いやすいなーという印象。</p>

<h2>スケールから周波数への変換</h2>

<p>実は今日まで知らなかったんだけど、マザーウェーブレットによっては時間領域でのスケールの逆数は必ずしも周波数領域での周波数に対応するとは限らないそう。というかずれる（詳細はPractical Guideの3.hを参照）。上で書いた厳密には違うというのは、これが理由。</p>

<p>ただし、スケールから周波数への変換はマザーウェーブレットから一意に決まるようなので、正しい周波数を求めることは可能。上に貼った図は、Practical Guideにしたがってスケールから周波数に変換している。</p>

<p>例えば、$f = \frac{1}{s}$となるようにスケールを与えていたとき、$\omega_0 = 6.0$のMorletを使ったウェーブレット変換の真の周波数は、</p>

<p><script type="math/tex; mode=display">
\begin{align}
f' &amp;= \frac{\omega_0 + \sqrt{2+\omega_{0}^2}}{4\pi s} \
&amp;= \frac{0.96801330919}{s} \
&amp;= 0.96801330919f
\end{align}
</script></p>

<p>となる。
$\omega_0 = 6.0$のMorletだとスケールの逆数にほぼ一致するので今まで気づかなかった…</p>

<p>めんどくさい。これを知ってからちょっとウェーブレット嫌いになった。でもめげない</p>

<p>おわり</p>

<h2>参考</h2>

<ul>
<li><a href="http://paos.colorado.edu/research/wavelets/bams_79_01_0061.pdf">Torrence, C. and G.P. Compo &ldquo;A Practical Guide to Wavelet Analysis&rdquo;, Bull. Am. Meteorol. Soc., 79, 61–78, 1998.</a></li>
<li><a href="http://www.mark-bishop.net/signals/CWTReconstructionFactors.pdf">Continuous Wavelet Transform Reconstruction Factors for Selected Wavelets</a></li>
<li><a href="http://www.hulinks.co.jp/support/flexpro/v7/dataanalysis_cwt.html">HULINKS | テクニカルサポート | FlexPro | 連続ウェーブレット変換 (CWT)</a></li>
</ul>


<h3>前書いた記事</h3>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/">FFTを使った連続ウェーブレット変換の高速化 &ndash; LESS IS MORE</a></li>
<li><a href="http://r9y9.github.io/blog/2013/10/21/signal-reconstruction-using-invere-cwt/">逆連続ウェーブレット変換による信号の再構成 &ndash; LESS IS MORE</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFTを使った連続ウェーブレット変換の高速化]]></title>
    <link href="http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/"/>
    <updated>2013-10-20T00:55:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/gabor_wavelet_nnmnkwii.png" title="&ldquo;An example of Gabor Wavelet spectrogram (the original wav file is generated using Open Jalk)&rdquo;" ></p>

<h2>そもそもウェーブレット変換って何</h2>

<p><a href="http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%BC%E3%83%96%E3%83%AC%E3%83%83%E3%83%88%E5%A4%89%E6%8F%9B">Jump to wikipedia</a></p>

<p>いわゆる時間周波数解析の手法の一つで、音声、音楽、画像の解析に使われる。直感的には、STFTでいう窓関数の幅を周波数に応じて拡大・伸縮させて、時間変化する信号の特徴を上手く捉えようとする手法のこと</p>

<h2>高速化の仕組み</h2>

<p>さて、本題。ウェーブレット変換は、(スケールパラメータを固定すれば)入力信号とマザーウェーブレットのたたみ込みで表されるので、たたみ込み定理よりフーリエ変換を使った計算方法が存在する。</p>

<p>つまり、</p>

<ul>
<li>入力信号とマザーウェーブレットをそれぞれフーリエ変換する</li>
<li>掛け算する</li>
<li>逆フーリエ変換する</li>
</ul>


<p>というプロセスでウェーブレット変換を求めることができて、かつフーリエ変換にはFFTという高速なアルゴリズムが存在するので、計算を高速化できるという仕組み。まぁ原理としてはシンプルなんだけど以外と面倒くさい（気のせい？）。</p>

<p>色々調べたので、メモ代わりにまとめておく。解説ではなくリンク集です</p>

<h2>A Practical Guide to Wavelet Analysis <a href="http://paos.colorado.edu/research/wavelets/">[web]</a> <a href="http://paos.colorado.edu/research/wavelets/bams_79_01_0061.pdf">[PDF]</a></h2>

<p>結論から言えばここが一番わかりやすかった。</p>

<ul>
<li>実装よりで理論の解説がある</li>
<li>matlab/fortran のコードがある</li>
</ul>


<p>がいいところ</p>

<p>基本的にはこれ読めばわかる。数学全然わからん俺でも読めた。特に、離散表現でのウェーブレットについても書かれているのは良い。連続ウェーブレットといっても、デジタル信号処理で扱う上では離散化しないといけないわけなので</p>

<p>さて、僕が参考にしたmatlabコードへの直リンクは以下</p>

<ul>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wave_bases.m">マザーウェーブレットの周波数応答の計算部分</a></li>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wavelet.m">連続ウェーブレット変換の本体</a></li>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wavetest.m">連続ウェーブレット変換のテストコード</a></li>
</ul>


<p>その他、fortanコードなどいくつかあるので、それらはウェブサイトからどうぞ</p>

<h2>Matlab</h2>

<p> mathworksさんのwavelet toolboxのドキュメントもよかった。ここから上記のpracticalなんちゃらのリンクもある</p>

<ul>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/gs/continuous-wavelet-transform.html">Continuous Wavelet Transform</a></li>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/ref/cwtft.html">Continuous wavelet transform using FFT algorithm</a></li>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/ref/icwtft.html">Inverse CWT</a></li>
</ul>


<p>コードは転がってないですね。まぁ有料なので</p>

<h2>日本語でわかりやすいもの</h2>

<ul>
<li><a href="http://hp.vector.co.jp/authors/VA046927/gabor_wavelet/gabor_wavelet.html">C/C++言語でガボールウェーブレット変換により時間周波数解析を行うサンプルプログラム</a>

<ul>
<li> ここは本当に素晴らしい。何年か前にも参考にさせて頂きました。</li>
</ul>
</li>
<li><a href="http://www.hulinks.co.jp/support/flexpro/v7/dataanalysis_cwt.html">連続ウェーブレット変換 (CWT) &ndash; FlexPro 7 日本語版サポート情報</a>

<ul>
<li> 日本語で丁寧に書かれてる。内容自体は、practicalなんちゃらと似ている</li>
</ul>
</li>
<li><a href="http://www.makino.ecei.tohoku.ac.jp/~aito/wavelet/">東北大学 伊藤先生の講義資料</a>

<ul>
<li> 数少ない日本語でのウェーブレットに関する資料。ただし連続ウェーブレットについてはあんまり解説はない。C言語のサンプル付き</li>
</ul>
</li>
</ul>


<h2>書籍</h2>

<p>今回は調べてない。数年前にちょいちょい調べたことがあるけど忘れた</p>

<h2>その他</h2>

<ul>
<li><a href="https://code.google.com/p/tspl/source/browse/trunk/include/cwt-impl.h?spec=svn2&amp;r=2">tspl Signal Processing Library in C++</a>

<ul>
<li> 連続ウェーブレット変換/逆変換のC++実装。細部までコードは追えてないけど、それっぽいコードがある（俺が読んだ記事とはマザーウェーブレットのnormalizationが違う気もする…</li>
</ul>
</li>
<li><a href="http://dsp.stackexchange.com/questions/10979/inverse-continuous-wavelet-transform-and-matlab">Inverse Continuous Wavelet Transform and matlab &ndash; dsp StackExchange</a>

<ul>
<li> 逆連続ウェーブレット変換教えてーっていう質問。ここでpracticalなんちゃらを知った</li>
</ul>
</li>
<li><a href="http://staff.aist.go.jp/h.fujihara/voice_conversion/">混合音中の歌声の声質変換手法</a>

<ul>
<li> ガチ技術。元産総研の藤原さんが研究開発したもの。<a href="http://staff.aist.go.jp/m.goto/PAPER/SIGMUS201007fujihara.pdf">論文(PDF)</a>の方に少し説明がある。</li>
<li> 声質変換でウェーブレット使うのは僕が知る限りではこれくらい</li>
<li> ちなみに結果めっちゃすごい</li>
</ul>
</li>
</ul>


<h2>さいごに</h2>

<p>以上。ウェーブレット変換は難しいことがわかった（こなみ）。ウェーブレットの利点欠点については書かなかったけれど、音声や音楽を解析したい場合に、時間周波数解析によく用いられる短時間フーリエ解析よりもウェーブレット解析の方が望ましい場合は非常によくあると思っているので、ぜひもっと使われてほしいですね。作ってるライブラリには必ず入れます。</p>

<h2>ちなみに</h2>

<p>計算コストがそこまでボトルネックにならないなら、畳み込みでウェーブレット計算してもいいんじゃないかと思ってる。FFTを使う方法の場合、あるスケールパラメータに対する時間方向のウェーブレット変換係数を一気に求められても、あるシフトパラメータに対する周波数方向のウェーブレット変換係数（つまりある時間でのスペクトルのようなもの）は一気に求められない気がしている。つまり、STFTみたいな形でインクリメンタルにスペクトルは求めにくいんじゃないかってこと（少なくとも自明には思えない）。畳み込み計算するなら、間違いなくできるけど。このあたり理解がまだあやふやなので、間違ってる可能性大</p>

<p>さらにちなみに、僕が作ってたリアルタイムで動く自動伴奏システムは畳み込みでウェーブレット変換してたよ。ウェーブレットよりもアルゴリズムのほうがボトルネックになっていたので全然気にならなかった。参考まで</p>
]]></content>
  </entry>
  
</feed>
