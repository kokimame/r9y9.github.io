<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Speech-Signal-Processing | Less is more]]></title>
  <link href="http://r9y9.github.io/blog/categories/speech-signal-processing/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2014-03-22T21:25:28+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi Yamamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goで音声信号処理をしたいのでSPTKのGoラッパーを書く]]></title>
    <link href="http://r9y9.github.io/blog/2014/02/10/sptk-go-wrapper/"/>
    <updated>2014-02-10T02:33:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/02/10/sptk-go-wrapper</id>
    <content type="html"><![CDATA[<p>Goが最近オススメです（n度目</p>

<p>Goで音声信号処理をしたいけど、全部一から書くのは大変だし、既存の資産は出来るだけ再利用したい。というわけで、C言語製の<a href="http://sp-tk.sourceforge.net/">SPTK</a> をGoから使えるようにする</p>

<h2>cgo</h2>

<p>GoにはC言語のライブラリを使うには、cgoというパッケージを使えばできる。使い方は、公式のページ等を見るといいと思う <a href="http://golang.org/cmd/cgo/">http://golang.org/cmd/cgo/</a></p>

<p>Cの関数や変数などには、 <code>C.</code> でアクセスできる</p>

<h2>ラッパー</h2>

<p>例えば以下のように書く。MFCCの計算を例に上げる。必要に応じで<code>SPTK.h</code>に定義されている関数をラップする</p>

<p>```go
package sptk</p>

<p>// #cgo pkg-config: SPTK
// #cgo LDFLAGS: -lSPTK -lSPTKlib -lm
// #include &lt;stdio.h>
// #include &lt;SPTK/SPTK.h>
import &ldquo;C&rdquo;</p>

<p>/****************************************************************</p>

<pre><code>$Id: _mfcc.c,v 1.11 2012/12/21 11:27:35 mataki Exp $

Mel-Frequency Cepstral Analysis

    void mfcc(in, mc, sampleFreq, alpha, eps, wlng, flng
              m, n, ceplift, dftmode, usehamming);

    double  *in        : input sequence
    double  *mc        : mel-frequency cepstral coefficients
    double  sampleFreq : sample frequency
    double  alpha      : pre-emphasis coefficient
    double  eps        : epsilon
    int     wlng       : frame length of input sequence
    int     flng       : frame length for fft
    int     m          : order of cepstrum
    int     n          : number of channel for mel-filter bank
    int     ceplift    : liftering coefficients
    Boolean dftmode    : use dft
    Boolean usehamming : use hamming window
</code></pre>

<p>******************************************************************/
// MFCC returns Mel-frequency Cepstral Coefficients.
func MFCC(audioBuffer []float64, sampleRate int, alpha, eps float64, wlng, flng, m, n, ceplift int, dftmode, usehamming bool) []float64 {</p>

<pre><code>// Convert go bool to C.Boolean (so annoying..
var dftmodeInGo, usehammingInGo C.Boolean
if dftmode {
    dftmodeInGo = 1
} else {
    dftmodeInGo = 0
}
if usehamming {
    usehammingInGo = 1
} else {
    usehammingInGo = 0
}

resultBuffer := make([]float64, m)
C.mfcc((*_Ctype_double)(&amp;audioBuffer[0]), (*_Ctype_double)(&amp;resultBuffer[0]), C.double(sampleRate), C.double(alpha), C.double(eps), C.int(wlng), C.int(flng), C.int(m), C.int(n), C.int(ceplift), dftmodeInGo, usehammingInGo)
return resultBuffer
</code></pre>

<p>}
```</p>

<ul>
<li>個人的な流儀で、結果は必ずreturnするようにしている</li>
<li>boolからC言語のBooleanっぽいenumへの変換でめんどくさいことしてます</li>
<li>コメントはSPTK 3.6のコードから引っ張って来ました</li>
</ul>


<p>このパッケージを使う前に、 <a href="https://github.com/r9y9/SPTK">https://github.com/r9y9/SPTK</a> を使ってSPTKをインストールする。本家のを使ってもいいですが、その場合は #cgo の設定が変わると思います。公式のSPTK、pkg-configに対応してくれんかな…</p>

<p>最初は、LDFLAGS つけ忘れてて、symbol not foundってなってつらまった。次回から気をつけよう</p>

<p>SPTKの、特に（メル）ケプストラム分析当たりは本当に難しいので、論文読んで実装するのも大変だし中身がわからなくてもラップする方が合理的、という結論に至りました。簡単なもの（例えば、メルケプからMLSA filterの係数への変換とか）は、依存関係を少なくするためにもGo nativeで書きなおした方がいいです</p>

<p>コードは気が向いたら上げる</p>
]]></content>
  </entry>
  
</feed>
