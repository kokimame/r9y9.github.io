<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: go | LESS IS MORE]]></title>
  <link href="http://r9y9.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2014-07-13T02:28:53+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi Yamamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GOSSP - Go言語で音声信号処理]]></title>
    <link href="http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go/"/>
    <updated>2014-06-08T00:56:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go</id>
    <content type="html"><![CDATA[<h1>C++からGoへ</h1>

<p>みなさん、C++で信号処理のアルゴリズムを書くのはつらいと思ったことはありませんか？C++で書くと速いのはいいけれど、いかんせん書くのが大変、コンパイルエラーは読みづらい、はたまたライブラリをビルドしようとしたら依存関係が上手く解決できず……そんな覚えはないでしょうか？謎のコンパイルエラーに悩みたくない、ガーベジコレクションほしい、Pythonのようにさくっと書きたい、型推論もほしい、でも動作は速い方がいい、そう思ったことはないでしょうか。</p>

<p>そこでGoです。もちろん、そういった思いに完全に答えてくれるわけではありませんが、厳しいパフォーマンスを要求される場合でなければ、Goの方が良い場合も多いと僕は思っています。
とはいえ、まだ比較的新しい言語のため、ライブラリは少なく信号処理を始めるのも大変です。というわけで、僕がC++をやめてGoに移行したことを思い出し、Goでの信号処理の基礎と、今まで整備してきたGoでの音声信号処理ライブラリを紹介します。</p>

<p>Goの良いところ/悪いところについては書きません。正直、本当は何の言語でもいいと思っていますが、僕はGoが好きなので、ちょっとでもGoで信号処理したいと思う人が増えるといいなーと思って書いてみます。</p>

<p>あとで書きますが、僕が書いたコードで使えそうなものは、以下にまとめました。</p>

<p><a href="https://github.com/r9y9/gossp">https://github.com/r9y9/gossp</a></p>

<h1>基礎</h1>

<h2>Wavファイルの読み込み/書き込み <a href="http://godoc.org/github.com/mjibson/go-dsp/wav">[wav]</a></h2>

<p><img class="center" src="/images/speech_signal.png" title="&ldquo;Speech signal example.&rdquo;" ></p>

<p>まずは音声ファイルの読み込みですね。wavファイルの読み込みさえできれば十分でしょう。</p>

<p>これは、すでに有用なライブラリが存在します。<a href="https://github.com/mjibson/go-dsp">GO-DSP</a> とういデジタル信号処理のライブラリに含まれるwavパッケージを使いましょう。</p>

<p>次のように書くことができます。</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"github.com/mjibson/go-dsp/wav"
"log"
"os"
</code></pre>

<p>)</p>

<p>func main() {</p>

<pre><code>// ファイルのオープン
file, err := os.Open("./test.wav")
if err != nil {
    log.Fatal(err)
}

// Wavファイルの読み込み 
w, werr := wav.ReadWav(file)
if werr != nil {
    log.Fatal(werr)
}

// データを表示
for i, val := range w.Data {
    fmt.Println(i, val)
}
</code></pre>

<p>}
```</p>

<p>簡単ですね。</p>

<p>Goはウェブ周りの標準パッケージが充実しているので、以前<a href="http://qiita.com/r9y9/items/35a1cf139332a3072fc8">qiitaに書いた記事</a>のように、wavファイルを受け取って何らかの処理をする、みたいなサーバも簡単に書くことができます</p>

<p>wavファイルの書き込み＋ユーティリティを追加したかったので、僕は自分でカスタムしたパッケージを使っています。</p>

<p><a href="https://github.com/r9y9/go-dsp">https://github.com/r9y9/go-dsp</a></p>

<h2>高速フーリエ変換 (Fast Fourier Transform; FFT) <a href="http://godoc.org/github.com/mjibson/go-dsp/fft">[fft]</a></h2>

<p>言わずとしれたFFTです。音のスペクトルを求めるのに必須の処理です。で、Goではどうすればいいのか？ということですが、こちらもすでに有用なライブラリが存在します。<a href="https://github.com/mjibson/go-dsp">GO-DSP</a>に含まれる、fftパッケージを使いましょう。</p>

<p>このfftパッケージは、go routinesを使って平行化されているため速いです。僕は、1次元のフーリエ変換以外めったに使いませんが、N次元のフーリエ変換をサポートしているのもこのライブラリのいいところです。</p>

<h3>参考</h3>

<ul>
<li><a href="http://mattjibson.com/blog/2013/01/04/go-dsp-fft-performance-with-go-routines/">go-dsp FFT performance with go routines · Matt Jibson</a></li>
</ul>


<p>使い方は、とても簡単です。</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"github.com/mjibson/go-dsp/fft"
</code></pre>

<p>)</p>

<p>func main() {</p>

<pre><code>fmt.Println(fft.FFTReal([]float64{1, 2, 3, 4, 5, 6, 7, 8}))
</code></pre>

<p>}
```</p>

<h2>離散コサイン変換 (Discrete Cosine Transform; DCT) <a href="http://godoc.org/github.com/r9y9/gossp/dct">[dct]</a></h2>

<p>DCTは、Mel-Frequency Cepstrum Coefficients (通称MFCC) 求めるのに必要な変換です。こちらは、残念ながら良さそうなライブラリがなかったので、自分で書きました。</p>

<p>使い方はFFTとほとんど一緒です。</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"github.com/r9y9/gossp/dct"
</code></pre>

<p>)</p>

<p>func main() {</p>

<pre><code>y := dct.DCTOrthogonal([]float64{1, 2, 3, 4, 5, 6, 7, 8})
fmt.Println(dct.IDCTOrthogonal(y)) // 直交変換では、逆変換すると元に戻る
</code></pre>

<p>}
```</p>

<p>さて、基本的なところは一旦ここまでです。次からは、少し音声寄りの信号処理手法の紹介です。</p>

<h1>時間周波数解析</h1>

<h2>短時間フーリエ変換 (Short Time Fourier Transform; STFT) <a href="http://godoc.org/github.com/r9y9/gossp/stft">[stft]</a></h2>

<p><img class="center" src="/images/stft.png" title="&ldquo;STFT spectrogram&rdquo;" ></p>

<p>STFTは、音声の時間周波数解析手法として定番の方法ですね。音声を可視化したり、何らかの認識アルゴリズムの特徴抽出に使ったり、まぁ色々です。</p>

<p>次のようなコードを書くと、スペクトログラムが作れます</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"flag"
"fmt"
"github.com/r9y9/gossp"
"github.com/r9y9/gossp/io"
"github.com/r9y9/gossp/stft"
"github.com/r9y9/gossp/window"
"log"
"math"
</code></pre>

<p>)</p>

<p>func main() {</p>

<pre><code>filename := flag.String("i", "input.wav", "Input filename")
flag.Parse()

w, werr := io.ReadWav(*filename)
if werr != nil {
    log.Fatal(werr)
}
data := w.GetMonoData()

s := &amp;stft.STFT{
    FrameShift: int(float64(w.SampleRate) / 100.0), // 0.01 sec,
    FrameLen:   2048,
    Window:     window.CreateHanning(2048),
}

spectrogram := s.STFT(data)
amplitudeSpectrogram, _ := gossp.SplitSpectrogram(spectrogram)
PrintMatrixAsGnuplotFormat(amplitudeSpectrogram)
</code></pre>

<p>}</p>

<p>func PrintMatrixAsGnuplotFormat(matrix [][]float64) {</p>

<pre><code>fmt.Println("#", len(matrix[0]), len(matrix))
for i, vec := range matrix {
    for j, val := range vec {
        fmt.Println(i, j, math.Log(val))
    }
    fmt.Println("")
}
</code></pre>

<p>}
```</p>

<p>上の画像は、gnuplotで表示したものです</p>

<p><code>
set pm3d map
sp "spectrogram.txt"
</code></p>

<h2>逆短時間フーリエ変換 (Inverse Short Time Fourier Transform; ISTFT) <a href="http://godoc.org/github.com/r9y9/gossp/stft">[stft]</a></h2>

<p>ISTFTは、STFTの逆変換でスペクトログラムから時間領域の信号に戻すために使います。スペクトログラムを加工するような音源分離、ノイズ除去手法を使う場合には、必須の処理です。これはstftと同じパッケージ下にあります。</p>

<p>```</p>

<pre><code>reconstructed := s.ISTFT(spectrogram)
</code></pre>

<p>```</p>

<p>これで、スペクトログラムから音声を再構築することができます。</p>

<p>逆変換の仕組みは、意外と難しかったりします。</p>

<ul>
<li><a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.306.7858">D. W. Griffin and J. S. Lim, &ldquo;Signal estimation from modified short-time Fourier transform,&rdquo; IEEE Trans. ASSP, vol.32, no.2, pp.236–243, Apr. 1984.</a></li>
<li><a href="http://research.cs.tamu.edu/prism/lectures/sp/l6.pdf">L6: Short-time Fourier analysis and synthesis</a></li>
<li><a href="http://yukara-13.hatenablog.com/entry/2013/11/17/210204">Pythonで短時間フーリエ変換（STFT）と逆変換 &ndash; 音楽プログラミングの超入門（仮）</a></li>
</ul>


<p>この辺を参考にしました。興味のある人は読んで見てください。</p>

<h2>連続ウェーブレット変換 (Continuous Wavelet Transform; CWT)</h2>

<p><img class="center" src="/images/morlet_6_log.png" title="&ldquo;Morlet Wavelet spectrogram&rdquo;" ></p>

<p>これは何回かブログで書きました。</p>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/">FFTを使った連続ウェーブレット変換の高速化 &ndash; LESS IS MORE</a></li>
<li><a href="http://r9y9.github.io/blog/2014/06/01/continuouos-wavelet-transform-types/">連続ウェーブレット変換に使うマザーウェーブレット色々: Morlet, Paul, DOG &ndash; LESS IS MORE</a></li>
</ul>


<p>コードは、テストがまだ通らないので開発中ということで…orz</p>

<h2>逆連続ウェーブレット変換 (Inverse Continuous Wavelet Transform; ICWT)</h2>

<p>連続ウェーブレット変換の逆変換ですね。これもけっこう難しいです。こちらもまだテストに通っていないので、開発中です。</p>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/10/21/signal-reconstruction-using-invere-cwt/">逆連続ウェーブレット変換による信号の再構成 &ndash; LESS IS MORE</a></li>
</ul>


<p>さて、この辺でまた一区切りです。次は、より音声に特化した信号処理手法を紹介します。</p>

<p>※以降紹介するもののうち、多くは<a href="http://sp-tk.sourceforge.net/">SPTK</a>のGo-portになっていて、一部はcgoを使ってラップしただけです（後々はpure goにしたいけれど、特にメルケプストラム分析あたりは難しいのでできていません）</p>

<h1>音声分析系</h1>

<h2>基本周波数推定 <a href="http://godoc.org/github.com/r9y9/gossp/f0">[f0]</a></h2>

<p><img class="center" src="/images/arayuru_f0.png" title="&ldquo;Fundamental frequency trajectory example.&rdquo;" ></p>

<p>ざっくり言えば音の高さを求める方法ですね。一応、音声に特化した方法をいくつか使えるようにしました。</p>

<ul>
<li><a href="http://audition.ens.fr/adc/pdf/2002_JASA_YIN.pdf">A. de Cheveigne and H. Kawahara. YIN, a fundamental frequency estimator for speech and music. J. Acoust. Soc. Am., 111(4):1917–1930, 2002.</a></li>
<li><a href="http://www.cise.ufl.edu/~acamacho/publications/dissertation.pdf">A. Camacho. SWIPE: A sawtooth waveform inspired pitch estimator for speech and music. PhD thesis, University of Florida, 2007.</a></li>
</ul>


<p>ただしYINはもどきです。</p>

<p>以前、<a href="https://github.com/r9y9/go-world">GO-WORLD</a>という音声分析合成系WORLDのGoラッパーを書いたので、それを使えばF0推定手法Dioが使えます。</p>

<h3>参考</h3>

<ul>
<li><a href="http://r9y9.github.io/blog/2014/03/22/go-world/">音声分析変換合成システムWORLDのGoラッパーを書いた &ndash; LESS IS MORE</a></li>
</ul>


<h2>メルケプストラム分析 <a href="http://godoc.org/github.com/r9y9/gossp/mgcep">[mgcep]</a></h2>

<p>音声合成界隈ではよく聞くメルケプストラム（※MFCCとは異なります）を求めるための分析手法です。メルケプストラムは、HMM（Hidden Markov Models; 隠れマルコフモデル）音声合成や統計的声質変換において、声道特徴（いわゆる、声質）のパラメータ表現としてよく使われています。メルケプストラムの前に、LPCとかPARCORとか色々あるのですが、現在のHMM音声合成で最もよく使われているのはメルケプストラムな気がするので、メルケプストラム分析があれば十分な気がします。</p>

<p>これは、SPTKをcgoを使ってラップしました</p>

<h3>参考</h3>

<ul>
<li><a href="http://ci.nii.ac.jp/naid/40004638236/">徳田恵一, 小林隆夫, 深田俊明, 斎藤博徳, 今井 聖, “メルケプストラムをパラメータとする音声のスペクトル推定,” 信学論(A), vol.J74-A, no.8, pp.1240–1248, Aug. 1991.</a></li>
</ul>


<h2>メル一般化ケプストラム分析 <a href="http://godoc.org/github.com/r9y9/gossp/mgcep">[mgcep]</a></h2>

<p>メル一般化ケプストラム分析は、その名の通りメルケプストラム分析を一般化したものです。メルケプストラム分析はもちろん、LPCも包含します（詳細は、参考文献をチェックしてみてください）。論文をいくつかあさっている限り、あんまり使われていない気はしますが、これもSPTKをラップしてGoから使えるようにしました。メルケプストラム分析もメル一般化ケプストラム分析に含まれるので、mgcepという一つのパッケージにしました。</p>

<h3>参考</h3>

<ul>
<li><a href="http://www.utdallas.edu/~john.hanse/nPublications/JP-55-SpeechComm-Yapanel-Hansen-PMVDR-Feb08.pdf">Tokuda, K., Masuko, T., Kobayashi, T., Imai, S., 1994. Mel-generalized Cepstral Analysis-A Uniﬁed Approach to Speech Spectral Estimation, ISCA ICSLP-94: Inter. Conf. Spoken Lang. Proc., Yokohama, Japan, pp. 1043–1046.</a></li>
</ul>


<h1>音声合成系</h1>

<h2>励起信号の生成 <a href="http://godoc.org/github.com/r9y9/gossp/excite">[excite]</a></h2>

<p><img class="center" src="/images/pulse_excite.png" title="&ldquo;Exciation eignal.&rdquo;" ></p>

<p>SPTKのexciteのGo実装です。いわゆるPulseExcitationという奴ですね。非周期成分まったく考慮しない単純な励起信号です。</p>

<p>高品質な波形合成が必要な場合は、WORLDやSTRAIGHTを使うのが良いです。</p>

<h2>MLSA (Mel Log Spectrum Approximation) デジタルフィルタ <a href="http://godoc.org/github.com/r9y9/gossp/vocoder">[vocoder]</a></h2>

<p>MLSAフィルタは、メルケプストラムと励起信号から音声波形を合成するためのデジタルフィルタです。HMM音声合成の波形合成部で使われています（今もきっと）。Pure goで書き直しました。</p>

<p>昔、C++でも書いたことあります。</p>

<h3>参考</h3>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/12/01/mlsa-filter-with-c-plus-plus/">MLSA digital filter のC++実装 &ndash; LESS IS MORE</a></li>
</ul>


<h2>MGLSA (Mel Genaralized-Log Spectrum Approximation) デジタルフィルタ <a href="http://godoc.org/github.com/r9y9/gossp/vocoder">[vocoder]</a></h2>

<p>MGLSAフィルタは、メル一般化ケプストラムから波形を合成するためのデジタルフィルタですね。これも pure goで書きました。</p>

<h2><strong>※SPTKの再実装について</strong></h2>

<p>SPTKの実装をGoで書き直したものについては、SPTKの実装と結果が一致するかどうかを確認するテストを書いてあります。よって、誤った結果になるということは（計算誤差が影響する場合を除き）基本的にないので、お気になさらず。</p>

<h2>高品質な音声分析変換合成系 WORLD <a href="http://godoc.org/github.com/r9y9/go-world">[go-world]</a></h2>

<p><a href="http://r9y9.github.io/blog/2014/03/22/go-world/">音声分析変換合成システムWORLDのGoラッパーを書いた &ndash; LESS IS MORE</a></p>

<p>以前WORLDのGoラッパーを書いたので、色々使えると思います。統計ベースの音声合成とか、声質変換とか。僕は声質変換に使おうと思ってラップしました。</p>

<h1>おわりに</h1>

<p>長々と書きましたが、Go言語での信号処理の基礎と、今まで整備してきた音声信号処理ライブラリを簡単に紹介しました。僕が書いたものは、まとめてGithubで公開しています。</p>

<p><a href="https://github.com/r9y9/gossp">https://github.com/r9y9/gossp</a></p>

<p>使ってももらって、あわよくばバグとか報告してもらって、改善していければいいなーというのと、あとGithubのissue管理便利だし使おうと思ってGithubに上げました。</p>

<p>みなさん、Goで音声信号処理始めてみませんか？</p>

<h1>余談</h1>

<h2>Pythonではダメなの？その他言語は？</h2>

<p>なんでGoなの？と思う人がいると思います。冒頭にも書いたとおり、正直好きなのにすればいいですが、適当に書いて速いのがいいならC++だし、型を意識せずさくっと書きたいならPythonだし、そこそこ速くて型があって型推論もあって、とかだったらGoがいいかなと僕は思います。</p>

<p>Goの特徴（≒良さ）ついては、<a href="http://www.slideshare.net/ymotongpoo/20130228-gobp-study-66-16830134">20130228 Goノススメ（BPStudy #66） | SlideShare</a>
 の11枚目が僕にはドンピシャです。</p>

<p>numpy, scipy, matplotlib, scikit-learnあたりが最強すぎるので、僕はpythonも良く使います。</p>

<h2>きっかけ</h2>

<p>この記事を書いたきっかけは、友人にGoをおすすめしまくっていたのに全然聞いてくれなかったからでした。Goでも信号処理はできるよ</p>
]]></content>
  </entry>
  
</feed>
