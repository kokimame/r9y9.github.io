<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go Music Signal Processing on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/go-music-signal-processing/</link>
    <description>Recent content in Go Music Signal Processing on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 28 Jan 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://r9y9.github.io/categories/go-music-signal-processing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Goでクロマベクトルを求める</title>
      <link>http://r9y9.github.io/2014/01/28/go-chroma-vector/</link>
      <pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/2014/01/28/go-chroma-vector/</guid>
      <description>

&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;http://r9y9.github.io/images/pcp_result.png &#34;Chromagram&#34;&#34; class=&#34;image&#34;&gt;&lt;/div&gt;

&lt;p&gt;Chromagram。ドレミの歌の冒頭を分析した結果です&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;github.com/mjibson/go-dsp/wav&amp;quot;
	&amp;quot;github.com/r9y9/go-msptools/pcp&amp;quot;
	&amp;quot;log&amp;quot;
	&amp;quot;os&amp;quot;
)

func main() {
	// reading data
	file, err := os.Open(&amp;quot;/path/to/file.wav&amp;quot;)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	wav, werr := wav.ReadWav(file)
	if werr != nil {
		log.Fatal(werr)
	}

	// convert to []float64 from []int
	data := make([]float64, len(wav.Data[0]))
	for i := range data {
		data[i] = float64(wav.Data[0][i])
	}

	// settings for analysis
	frameShift := int(float64(wav.SampleRate) / 100.0) // 0.01 sec
	sampleRate := int(wav.SampleRate)

	// create PCP extrator
	p := pcp.NewPCP(sampleRate, frameShift)

	// analysis roop
	result := make([][]float64, p.NumFrames(data))
	for i := 0; i &amp;lt; p.NumFrames(data); i++ {
		pcp := p.PCP(data, i*frameShift)
		//pcp := p.PCPNormalized(data, i*frameShift)
		result[i] = pcp
	}

	// print as a gnuplot 3D plotting format
	fmt.Println(&amp;quot;#&amp;quot;, len(result[0]), len(result))
	for i, spec := range result {
		for j, val := range spec {
			fmt.Println(i, j, val)
		}
		fmt.Println(&amp;quot;&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じでOK。Chromagramをgnuplot形式で標準出力に出力します&lt;/p&gt;

&lt;h2 id=&#34;pitch-class-profile-pcp-in-go-code-https-github-com-r9y9-go-msptools-tree-master-pcp:a8dc4fa311816670f461934562727044&#34;&gt;Pitch Class Profile (PCP) in Go &lt;a href=&#34;https://github.com/r9y9/go-msptools/tree/master/pcp&#34;&gt;[Code]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;どうやってクロマベクトルを計算しているかざっくり説明すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;入力信号をガボールウェーブレット変換&lt;/li&gt;
&lt;li&gt;オクターブ無視して12次元に圧縮（例えば55Hz, 110Hz, 220Hz, 440Hz はすべてAとする）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という手順で求めてます&lt;/p&gt;

&lt;p&gt;Goかどうかなんてどうでもいいんだけど、まぁC++に比べて書きやすすぎて泣けるよね&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>