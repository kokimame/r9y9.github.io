<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: speech-signal-processing, | R)Y)]]></title>
  <link href="http://r9y9.github.io/blog/categories/speech-signal-processing/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2013-12-02T00:54:04+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi Yamamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MLSA digital filter のC++実装]]></title>
    <link href="http://r9y9.github.io/blog/2013/12/01/mlsa-filter-with-c-plus-plus/"/>
    <updated>2013-12-01T23:43:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/12/01/mlsa-filter-with-c-plus-plus</id>
    <content type="html"><![CDATA[<p><a href="http://r9y9.github.io/blog/2013/09/23/mlsa-filter-wakaran/">MLSAフィルタわからん</a>という記事を書いて早2ヶ月、ようやく出来た。</p>

<p>Mel-log spectrum approximate (MLSA) filterというのは、対数振幅スペクトルを近似するようにメルケプストラムから直接音声を合成するデジタルフィルタです。<a href="http://sp-tk.sourceforge.net/">SPTK</a>のmlsa filterと比較して完全に計算結果が一致したので、間違ってはないはず。MLSAフィルタを使ってメルケプから音声合成するプログラムをC++で自分で書きたいという稀有な人であれば、役に立つと思います。基本的に、SPTKのmlsa filterの再実装です。</p>

<h1>mlsa_filter.h</h1>

<p><a href="https://gist.github.com/r9y9/7735120">https://gist.github.com/r9y9/7735120</a></p>

<p>```cpp</p>

<h1>pragma once</h1>

<h1>include <cmath></h1>

<h1>include <memory></h1>

<h1>include <vector></h1>

<h1>include <cassert></h1>

<p>namespace sp {</p>

<p>/<em>*
 * MLSA BASE digital filter (Mel-log Spectrum Approximate digital filter)
 </em>/
class mlsa_base_filter {
public:
  mlsa_base_filter(const int order, const double alpha);</p>

<p>  template <class Vector>
  double filter(const double x, const Vector&amp; b);</p>

<p> private:
  mlsa_base_filter();</p>

<p>  double alpha<em>;
  std::vector<double> delay</em>;
};</p>

<p>mlsa_base_filter::mlsa_base_filter(const int order, const double alpha)
: alpha<em>(alpha),
  delay</em>(order+1)
{
}</p>

<p>template <class Vector>
double mlsa_base_filter::filter(const double x, const Vector&amp; b)
{
  double result = 0.0;</p>

<p>  delay<em>[0] = x;
  delay</em>[1] = (1.0-alpha<em>*alpha</em>)<em>delay<em>[0] + alpha</em></em>delay_[1];</p>

<p>  for (size_t i = 2; i &lt; b.size(); ++i) {</p>

<pre><code>delay_[i] = delay_[i] + alpha_*(delay_[i+1]-delay_[i-1]);
result += delay_[i] * b[i];
</code></pre>

<p>  }</p>

<p>  // special case
  // TODO: other solution?
  if (b.size() == 2) {</p>

<pre><code>result += delay_[1] * b[1];
</code></pre>

<p>  }</p>

<p>  // t &lt;&ndash; t+1 in time
  for (size_t i = delay_.size()-1; i > 1; &mdash;i) {</p>

<pre><code>delay_[i] = delay_[i-1];
</code></pre>

<p>  }</p>

<p>  return result;
}</p>

<p>/<em>*
 * MLSA digital filter cascaded
 </em>/
class mlsa_base_cascaded_filter {
 public:
  mlsa_base_cascaded_filter(const int order,</p>

<pre><code>            const double alpha,
            const int n_pade);
</code></pre>

<p>  template <class Vector>
  double filter(const double x, const Vector&amp; b);</p>

<p> private:
  mlsa_base_cascaded_filter();</p>

<p>  std::vector&lt;std::unique_ptr&lt;mlsa_base_filter>> base_f<em>; // cascadad filters
  std::vector<double> delay</em>;
  std::vector<double> pade_coef_;
};</p>

<p>mlsa_base_cascaded_filter::mlsa_base_cascaded_filter(const int order,</p>

<pre><code>                         const double alpha,
                         const int n_pade)
</code></pre>

<p>  : delay<em>(n_pade + 1),
  pade_coef</em>(n_pade + 1)
{
  using std::unique_ptr;</p>

<p>  if (n_pade != 4 &amp;&amp; n_pade != 5) {</p>

<pre><code>std::cerr &lt;&lt; "The number of pade approximations must be 4 or 5."
      &lt;&lt; std::endl;
</code></pre>

<p>  }
  assert(n_pade == 4 || n_pade == 5);</p>

<p>  for (int i = 0; i &lt;= n_pade; ++i) {</p>

<pre><code>mlsa_base_filter* p = new mlsa_base_filter(order, alpha);
base_f_.push_back(unique_ptr&lt;mlsa_base_filter&gt;(p));
</code></pre>

<p>  }</p>

<p>  if (n_pade == 4) {</p>

<pre><code>pade_coef_[0] = 1.0;
pade_coef_[1] = 4.999273e-1;
pade_coef_[2] = 1.067005e-1;
pade_coef_[3] = 1.170221e-2;
pade_coef_[4] = 5.656279e-4;
</code></pre>

<p>  }</p>

<p>  if (n_pade == 5) {</p>

<pre><code>pade_coef_[0] = 1.0;
pade_coef_[1] = 4.999391e-1;
pade_coef_[2] = 1.107098e-1;
pade_coef_[3] = 1.369984e-2;
pade_coef_[4] = 9.564853e-4;
pade_coef_[5] = 3.041721e-5;
</code></pre>

<p>  } <br/>
}</p>

<p>template <class Vector>
double mlsa_base_cascaded_filter::filter(const double x, const Vector&amp; b)
{
  double result = 0.0;<br/>
  double feed_back = 0.0;</p>

<p>  for (size_t i = pade_coef_.size()-1; i >= 1; &mdash;i) {</p>

<pre><code>delay_[i] = base_f_[i]-&gt;filter(delay_[i-1], b);
double v = delay_[i] * pade_coef_[i];
if (i % 2 == 1) {
  feed_back += v;
} else {
  feed_back -= v;
}
result += v;
</code></pre>

<p>  }</p>

<p>  delay<em>[0] = feed_back + x;
  result += delay</em>[0];</p>

<p>  return result;
}</p>

<p>/<em>*
 * MLSA digital filter (Mel-log Spectrum Approximate digital filter)
 * The filter consists of two stage cascade filters
 </em>/
class mlsa_filter {
 public:
  mlsa_filter(const int order, const double alpha, const int n_pade);
 ~mlsa_filter();</p>

<p> template <class Vector>
 double filter(const double x, const Vector&amp; b);</p>

<p> private:
 mlsa_filter();</p>

<p>  double alpha<em>;
  std::unique_ptr&lt;mlsa_base_cascaded_filter> f1</em>; // first stage
  std::unique_ptr&lt;mlsa_base_cascaded_filter> f2_; // second stage
};</p>

<p>mlsa_filter::mlsa_filter(const int order,</p>

<pre><code>         const double alpha,
         const int n_pade)
</code></pre>

<p>  : alpha<em>(alpha),
  f1</em>(new mlsa_base_cascaded_filter(2, alpha, n_pade)),
  f2_(new mlsa_base_cascaded_filter(order, alpha, n_pade))
{
}</p>

<p>mlsa_filter::~mlsa_filter()
{
}</p>

<p>template <class Vector>
double mlsa_filter::filter(const double x, const Vector&amp; b)
{
  // 1. First stage filtering
  Vector b1 = {0, b[1]};
  double y = f1_&ndash;>filter(x, b1);</p>

<p>  // 2. Second stage filtering
  double result = f2_&ndash;>filter(y, b);</p>

<p>  return result;
}</p>

<p>} // end namespace sp
```</p>

<h1>使い方</h1>

<p>mlsa_filter.hをインクルードすればおｋ</p>

<p>```</p>

<h1>include &ldquo;mlsa_filter.h&rdquo;</h1>

<p>// セットアップ
const double alpha = 0.42;
const int order = 30;
const int n_pade = 5;
sp::mlsa_filter mlsa_f(order, alpha, n_pade);</p>

<p>&hellip;
// MLSA フィルタリング
出力一サンプル = mlsa_f.filter(入力一サンプル, フィルタ係数);
```</p>

<h1>何で再実装したのか</h1>

<ul>
<li>mlsa filterをC++的なインタフェースで使いたかった</li>
<li>コード見たらまったく意味がわからなくて、意地でも理解してやろうと思った</li>
<li>反省はしている</li>
<li>知り合いの声質変換やってる方がMLSAフィルタを波形合成に使ってるっていうし、ちょっとやってみようかなって</li>
<li>あと最近音声合成の低レベルに手をつけようとと思ってたし勉強にもなるかなって</li>
<li>思ったんだ……んだ…だ…</li>
</ul>


<p>車輪の再開発はあんま良くないと思ってるけど許して。
誰かがリファクタせないかんのだ</p>

<h1>感想</h1>

<p>SPTKのmlsa filterは、正直に言うとこれまで読んできたコードの中で一二を争うほど難解でした（いうてC言語はあまり読んできてないので、Cだとこれが普通なのかもしれないけど）。特に、元コードの d: delayという変数の使われ方が複雑過ぎて、とても読みにくくございました。MLSAフィルタは複数のbase filterのcascade接続で表されるわけだけど、それぞれの遅延が一つのdという変数で管理されていたのです。つまり、</p>

<ul>
<li>d[1] ~ d[5] までは、あるフィルタの遅延</li>
<li>d[6] ~ d[11] までは、別のフィルタの遅延</li>
<li>d[12] ~ にはまた別のフィルタの遅延</li>
</ul>


<p>という感じです。</p>

<p>改善しようと思って、base filterというクラスを作ってそのクラスの状態として各フィルタの遅延を持たせて、見通しを良くしました</p>

<h2>さいごに</h2>

<p>MLSAフィルタ、難しいですね（小並感</p>

<p>いつかリアルタイム声質変換がやってみたいので、それに使う予定（worldを使うことになるかもしれんけど）。戸田先生当たりがやってる声質変換を一回真似してみたいと思ってる</p>
]]></content>
  </entry>
  
</feed>
