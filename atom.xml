<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LESS IS MORE]]></title>
  <link href="http://r9y9.github.io/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2014-07-29T22:28:32+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi Yamamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goでニューラルネットいくつか書いたけどやっぱPythonが楽でいいですね]]></title>
    <link href="http://r9y9.github.io/blog/2014/07/29/neural-networks-in-go-and-python/"/>
    <updated>2014-07-29T22:00:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/07/29/neural-networks-in-go-and-python</id>
    <content type="html"><![CDATA[<p>いまいち成果出ないので気分転換にブログをだらだら書いてみるテストです。</p>

<h2>まえがき</h2>

<p>半年くらい前に、某深層学習に興味を持ってやってみようかなーと思っていた時期があって、その時にGoでいくつかニューラルネットを書きました（参考：<a href="http://r9y9.github.io/blog/2014/03/06/restricted-boltzmann-machines-mnist/">Restricted Boltzmann Machines with MNIST &ndash; LESS IS MORE</a>、<a href="https://github.com/r9y9/nnet">githubに上げたコード</a>）。なぜGoだったかというと、僕がGoに興味を持ち始めていたからというのが大きいです。Goを知る前は、たくさん計算するようなコードを書くときはC++だったけれど、C++は色々つらいものがあるし、GoはC++には速度面で劣るもののそこそこ速く、かつスクリプト的な書きやすさもあります。C++のデバッグやメンテに費やす膨大な時間に比べれば、計算時間が1.5~2倍に増えるくらい気にしないというスタンスで、僕はC++のかわりGoを使おうとしていました（※今でも間違っているとは思いませんが、とはいえ、厳しいパフォーマンスを求められる場合や既存の資産を有効活用したい場合など、必要な場面ではC++を書いています）。</p>

<h2>Goで機械学習</h2>

<p>僕は機械学習がけっこう好きなので、Goでコード書くかーと思っていたのですが、結果としてまったく捗りませんでした。ニューラルネットをてきとーに書いたくらいです。</p>

<p>検索するとわかりますが、現状、他の主流な言語に比べて圧倒的に数値計算のライブラリが少ないです。特に、線形代数、行列演算のデファクト的なライブラリがないのはつらいです。いくつか代表的なものをあげます。</p>

<ul>
<li><a href="https://github.com/skelterjohn/go.matrix">skelterjohn/go.matrix</a> &ndash; もうまったくメンテされていないし、たぶんするつもりはないと思います。使い勝手は、僕にとってはそんなに悪くなかった（試しに<a href="https://gist.github.com/r9y9/9030922">NMF</a>を書いてみた）ですが、実装は純粋なGoで書かれていて、GPUを使って計算するのが流行りな時代では、例えば大きなニューラルネットをパラメータを変えながら何度も学習するのにはしんどいと思いました。</li>
<li><a href="https://github.com/gonum/matrix">gonum/matrix</a> &ndash; 比較的最近出てきたライブラリで、<a href="https://code.google.com/p/biogo/">biogo</a> から行列演算に関する部分を切り出して作られたもののようです。行列演算の内部でblasを使っていて、かつ将来的にはcublasにも対応したい、みたいな投稿をGoogle Groupsで見たのもあって、半年くらい前にはgoで行列演算を行うならこのライブラリを使うべきだと判断しました（以前けっこう調べました：<a href="http://qiita.com/r9y9/items/7f93a89e3a88bb4ed263">gonum/matrix のデザインコンセプトに関するメモ &ndash; Qiita</a>）。しかし、それほど頻繁にアップデートされていませんし、機能もまだ少ないです。</li>
</ul>


<p>自分で作るかー、という考えも生まれなかったことはないですが、端的に言えばそれを行うだけのやる気がありませんでした。まぁ本当に必要だったら多少難しくてもやるのですが、ほら、僕達にはpythonがあるじゃないですか…</p>

<p>なぜGoは数値計算のライブラリが少ないのか、というのは、単に言語自体が新しいからだけでなく言語の特性に理由がある気もしますが（よく言われてそうなのは演算子のオーバーロードがないこと）、あまり深く考えているわけでもないので今回は書きません。</p>

<h2>Pythonで機械学習</h2>

<p><a href="https://www.google.co.jp/search?q=python+%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92&amp;oq=python+%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92">python 機械学習 &ndash; Google 検索</a> 約 119,000 件（2014/07/29現在）</p>

<p>もうみんなやってますよね。</p>

<p><a href="https://www.google.co.jp/search?q=Golang+%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92&amp;oq=Golang+%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92">Golang 機械学習 &ndash; Google 検索</a> 約 9,130 件（2014/07/29現在）</p>

<p>いつかpythonのように増えるんでしょうか。正直に言って、わかりません（正確には、あんま考えていませんごめんなさい）</p>

<p>さて、僕もよくpython使います。機械学習のコードを書くときは、だいたいpythonを使うようになりました（昔はC++で書いていました）。なぜかって、numpy, scipyのおかげで、とても簡潔に、かつ上手く書けばそこそこ速く書けるからです。加えて、ライブラリがとても豊富なんですよね、機械学習にかかわらず。numpy, scipyに加えて、matplotlibという優秀な描画ライブラリがあるのが、僕がpythonを使う大きな理由になっています。</p>

<p>pythonの機械学習ライブラリは、<a href="http://scikit-learn.org/stable/">scikit-learn</a> が特に有名でしょうか。僕もちょいちょい使います。使っていて最近おどろいたのは、scipy.mixtureには通常のGMMだけでなく変分GMM、無限混合GMMも入っていることですよね。自分で実装しようとしたら、たぶんとても大変です。昔変分GMMの更新式を導出したことがありますが、何度も心が折れそうになりました。いやー、いい時代になったもんですよ…（遠い目</p>

<h2>Pythonでニューラルネット（pylearn2を使おう）</h2>

<p>Deep何とかを含め流行りのニューラルネットが使える機械学習のライブラリでは、僕が <a href="https://github.com/lisa-lab/pylearn2">pylearn2</a> がよさ気だなーと思っています。理由は、高速かつ拡張性が高いからです。pylearn2は、数学的な記号表現からGPUコード（GPUがなければCPU向けのコード）を生成するmathコンパイラ <a href="https://github.com/Theano/Theano">Theano</a> で書かれているためpythonでありながら高速で、かつ機械学習に置いて重要なコンポーネントであるデータ、モデル、アルゴリズムが上手く分離されて設計されているのがいいところかなと思います（全部ごっちゃに書いていませんか？僕はそうですごめんなさい。データはともかくモデルと学習を上手く切り分けるの難しい）。A Machine Learning library based on Theanoとのことですが、Deep learningで有名な <a href="http://lisa.iro.umontreal.ca/index_en.html">lisa lab</a> 発ということもあり、ニューラルネットのライブラリという印象が少し強いですね。</p>

<p>一つ重要なこととして、このライブラリはかなり研究者向けです。ブラックボックスとして使うのではなく、中身を読んで必要に応じて自分で拡張を書きたい人に向いているかと思います。</p>

<p><a href="http://arxiv.org/pdf/1308.4214v1.pdf">Ian J. Goodfellow, David Warde-Farley, Pascal Lamblin, Vincent Dumoulin, Mehdi Mirza, Razvan Pascanu, James Bergstra, Frédéric Bastien, and Yoshua Bengio. “Pylearn2: a machine learning research library”. arXiv preprint arXiv:1308.4214</a></p>

<p>↑の論文のIntroductionの部分に、その旨は明記されています。と、論文のリンクを貼っておいてなんですが、<a href="http://www-etud.iro.umontreal.ca/~goodfeli/">Ian Goodfellow</a> のホームページにもっと簡潔に書いてありました。以下、引用します。</p>

<blockquote><p>I wrote most of Pylearn2, a python library designed to make machine learning research convenient. Its mission is to provide a toolbox of interchangeable parts that provide a lot of flexibility for setting up machine learning experiments, providing enough extensibility that pretty much any research idea is feasible within the context of the library. This is in contrast to other machine learning libraries such as scikits-learn that are designed to be black boxes that just work. Think of pylearn2 as user friendly for machine learning researchers and scikits-learn as user friendly for developers that want to apply machine learning.</p></blockquote>

<p>pylearn2では、Multi-layer Perceptron (MLP)、Deep Bolztmann Machines (DBM)、新しいものでMaxout Network等、手軽に試すことができます（まぁゆうて計算はめっちゃ時間かかるけど）。先述の通りmathコンパイラの <a href="https://github.com/Theano/Theano">Theano</a> を使って実装されているので、GPUがある場合はGPUを使って計算してくれます。環境構築に関しては、今はAWSという便利なサービスがあるので、GPUを持っていなくてもウェブ上でポチポチしてるだけで簡単にGPU環境を構築できます（参考：<a href="http://r9y9.github.io/blog/2014/07/20/pylearn2-on-ec2-g2-2xlarge/">Pylearn2, theanoをEC2 g2.x2large で動かす方法 &ndash; LESS IS MORE</a>）。本当にいい時代になったものですね（二回目</p>

<p>pylearn2、コードやドキュメント、活発なgithubでの開発、議論を見ていて、素晴らしいなーと思いました（まだ使い始めたばかりの僕の意見にあまり信憑性はないのですが…）。僕もこれくらい汎用性、拡張性のあるコードを書きたい人生でした…（自分の書いたニューラルネットのコードを見ながら）</p>

<h2>Pylearn2は遅いって？</h2>

<p>本当に速さを求めるなら <a href="https://code.google.com/p/cuda-convnet2/">cuda-convnet2</a> や <a href="http://caffe.berkeleyvision.org/">Cafee</a>、もしくは直でcudaのAPIをだな…と言いたいところですが、確かにpylearn2は他の深層学習のライブラリに比べて遅いようです。最近、Convolutional Neural Network (CNN) に関するベンチマークがGithubで公開されていました。</p>

<p><a href="https://github.com/soumith/convnet-benchmarks">soumith/convnet-benchmarks</a></p>

<p>現時点でまだ work in progressと書いてありますが、参考になると思います。優劣の問題ではなく、必要に応じて使い分ければいいと僕は思っています。</p>

<p>さてさて、本当はここから僕が書いたGoのニューラルネットのコードがいかにクソかという話を書こうかと思ったのですが、長くなったのでまた今度にします。</p>

<h2>まとめ</h2>

<ul>
<li>Goでニューラルネットとか機械学習をやるのは現状しんどいし（<a href="https://github.com/sjwhitworth/golearn">golearn</a>とかあるけど、まだまだearly stage）、おとなしくpython使うのが無難</li>
<li>pythonはやっぱり楽。ライブラリ豊富だし。ニューラルネットならpylearn2がおすすめ。ただし自分で拡張まで書きたい人向けです。</li>
</ul>


<p>散々pythonいいよゆうてますが、どちらかといえば僕はGoの方が好きです。機械学習には現状pythonを使うのがいいんじゃないかなーと思って、Goでニューラルネットを書いていた時を思い出しながらつらつらと書いてみました。</p>

<p>おわり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pylearn2, theanoをEC2 g2.x2large で動かす方法]]></title>
    <link href="http://r9y9.github.io/blog/2014/07/20/pylearn2-on-ec2-g2-2xlarge/"/>
    <updated>2014-07-20T23:22:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/07/20/pylearn2-on-ec2-g2-2xlarge</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/dbm_learned_from_mnist.png" title="&#34;Weight visualization of Restricted bolztomann machine trained on MNIST dataset.&#34;" alt="&#34;Weight visualization of Restricted bolztomann machine trained on MNIST dataset.&#34;"></p>

<h2>モチベーション</h2>

<ul>
<li>手元のへぼマシンでニューラルネットの学習を回わす</li>
<li>半日たっても終わらない</li>
<li>最近だとGPU使って計算を高速化するのが流行りだが、手元にGPUはない</li>
</ul>


<p><a href="http://www.kurtsp.com/deep-learning-in-python-with-pylearn2-and-amazon-ec2.html">Deep Learning in Python with Pylearn2 and Amazon EC2</a></p>

<p>手元にGPUがない…？大丈夫！Amazon EC2を使えば良さそう！！！</p>

<p>というわけで、めんどくさいと言わずにec2にお手軽計算環境を整えます。ec2でGPUが乗ったものだと、g2.2xlargeがよさそうですね。</p>

<p>ちなみに↑の図、pylearn2のtutorialのRestricted Bolzmann MachinesをMNISTで学習した結果なんですが、手元のマシンだとだいたい6時間くらい？（忘れた）だったのがg2.2xlargeだと30分もかかってない（ごめんなさい時間図るの忘れた）。$0.65/hourと安いんだし（他のインスタンスに比べればそりゃ高いけど）、もう手元のマシンで計算するの時間の無駄だしやめようと思います。</p>

<p>さてさて、今回環境構築に少しはまったので、もうはまらないように簡単にまとめておきます。</p>

<h2>結論</h2>

<p><a href="https://aws.amazon.com/marketplace/pp/B00FYCDDTE">Amazon Linux AMI with NVIDIA GRID GPU Driver on AWS Marketplace </a></p>

<p>すでにNVIDIAのドライバとCUDA（5.5）が入ったインスタンスをベースに使いましょう。</p>

<p><a href="http://xanxys.hatenablog.jp/entry/2014/05/17/135932">EC2(g2.2xlarge)でOpenGLを使う方法</a> で挙げられているように普通のlinuxを使う方法もありますが、ハマる可能性大です。僕はubuntuが使いたかったので最初はubuntu 14.04 server でドライバ、cuda (5.5 or 6.0) のインストールを試しましたが同じように失敗しました。</p>

<p>イケイケと噂の音声認識ライブラリKaldiの<a href="https://220-135-252-130.hinet-ip.hinet.net/speechwiki/index.php/Kaldi#installing_and_testing_CUDA-6.0_in_Ubuntu_14.04">ドキュメントらしきもの</a>を見ると、Ubuntu 14.04でもcuda 6.0インストールできるっぽいんですけどね…だめでした。頑張ればできるかもしれませんが、よほど強いメリットがない場合は、おとなしくpre-installされたインスタンスを使うのが吉だと思います。</p>

<h2>セットアップ</h2>

<p>↑で上げたインスタンスにはGPUドライバやCUDAは入っていますが、theanoもpylearn2もnumpyもscipyも入っていません。よって、それらは手動でインストールする必要があります。</p>

<p>というわけで、インストールするシェルをメモって置きます。試行錯誤したあとに適当にまとめたshellなので、なんか抜けてたらごめんなさい。</p>

<p><a href="https://gist.github.com/r9y9/50f13ba28b5b158c25ae">https://gist.github.com/r9y9/50f13ba28b5b158c25ae</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Pylearn2 setup script for Amazon Linux AMI with NVIDIA GRID GPU Driver.</span>
</span><span class='line'><span class="c"># http://goo.gl/3KeXXW</span>
</span><span class='line'>
</span><span class='line'>sudo yum update -y
</span><span class='line'>sudo yum install -y emacs tmux python-pip
</span><span class='line'>sudo yum install -y python-devel git blas-devel lapack-devel
</span><span class='line'>
</span><span class='line'><span class="c"># numpy, scipy, matplotlib, etc.</span>
</span><span class='line'>sudo pip install numpy
</span><span class='line'>sudo pip install scipy
</span><span class='line'>sudo pip install cython
</span><span class='line'>sudo pip install ipython nose
</span><span class='line'>
</span><span class='line'><span class="c"># matplotlib</span>
</span><span class='line'>sudo yum install -y libpng-devel freetype-devel
</span><span class='line'>sudo pip install matplotlib
</span><span class='line'>
</span><span class='line'><span class="c"># Scikit-learn</span>
</span><span class='line'>sudo pip install scikit-learn
</span><span class='line'>
</span><span class='line'><span class="c"># Theano</span>
</span><span class='line'>sudo pip install --upgrade git+git://github.com/Theano/Theano.git
</span><span class='line'>
</span><span class='line'><span class="c"># Enable GPU for theano</span>
</span><span class='line'><span class="nb">echo</span> <span class="s1">&#39;[global]</span>
</span><span class='line'><span class="s1">floatX = float32</span>
</span><span class='line'><span class="s1">device = gpu0</span>
</span><span class='line'>
</span><span class='line'><span class="s1">[nvcc]</span>
</span><span class='line'><span class="s1">fastmath = True&#39;</span> &gt; .theanorc
</span><span class='line'>
</span><span class='line'><span class="c"># pylearn2</span>
</span><span class='line'>git clone git://github.com/lisa-lab/pylearn2.git
</span><span class='line'><span class="nb">cd </span>pylearn2
</span><span class='line'>sudo python setup.py develop
</span><span class='line'><span class="nb">cd</span> ..
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;export PYLEARN2_DATA_PATH=/home/ec2-user/data&quot;</span> &gt;&gt; .bashrc
</span><span class='line'>
</span><span class='line'><span class="c"># MNIST dataset</span>
</span><span class='line'>mkdir -p data/mnist/
</span><span class='line'><span class="nb">cd </span>data/mnist/
</span><span class='line'>wget http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
</span><span class='line'>gunzip train-images-idx3-ubyte.gz
</span><span class='line'>wget http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
</span><span class='line'>gunzip train-labels-idx1-ubyte.gz
</span><span class='line'>wget http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
</span><span class='line'>gunzip t10k-images-idx3-ubyte.gz
</span><span class='line'>wget http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
</span><span class='line'>gunzip t10k-labels-idx1-ubyte.gz
</span><span class='line'><span class="nb">cd</span> ../..
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね</p>

<p>また、上記のような手順を踏まなくても、Community AMIs でpylearn2で検索するとすでにpylearn2が入ったAMIが出てくるので、それを使うのもありかもです（僕は試してません）。</p>

<p>僕がAMIを公開してもいいんですが、今のところする予定はありません</p>

<h1>まとめ</h1>

<p>そこそこ良い計算環境がさくっとできました、まる。ラーメン食べたい</p>

<h2>参考</h2>

<ul>
<li><a href="http://aws.amazon.com/jp/ec2/instance-types/">インスタンスタイプ &ndash; Amazon EC2 (クラウド上の仮想サーバー Amazon Elastic Compute Cloud) | アマゾン ウェブ サービス（AWS 日本語）</a></li>
<li><a href="http://www.kurtsp.com/deep-learning-in-python-with-pylearn2-and-amazon-ec2.html">Deep Learning in Python with Pylearn2 and Amazon EC2</a></li>
<li><a href="http://xanxys.hatenablog.jp/entry/2014/05/17/135932">EC2(g2.2xlarge)でOpenGLを使う方法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[統計的声質変換クッソムズすぎワロタ（実装の話）]]></title>
    <link href="http://r9y9.github.io/blog/2014/07/13/statistical-voice-conversion-wakaran/"/>
    <updated>2014-07-13T02:02:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/07/13/statistical-voice-conversion-wakaran</id>
    <content type="html"><![CDATA[<p>2014/07/28 追記：<br/>
重み行列の構築の部分を改良したのでちょいアップデート。具体的にはdense matrixとして構築してからスパース行列に変換していたのを、はじめからスパース行列として構築するようにして無駄にメモリを使わないようにしました。あとdiffが見やすいようにgistにあげました
<a href="https://gist.github.com/r9y9/88bda659c97f46f42525">https://gist.github.com/r9y9/88bda659c97f46f42525</a></p>

<h2>まえがき</h2>

<p>前回、<a href="http://r9y9.github.io/blog/2014/07/05/statistical-voice-conversion-muzui/">統計的声質変換クッソムズすぎワロタ &ndash; LESS IS MORE</a> という記事を書いたら研究者の方々等ちょいちょい反応してくださって嬉しかったです。差分スペクトル補正、その道の人が聴いても音質がいいそう。これはいい情報です。</p>

<p>Twitter引用:</p>

<blockquote class="twitter-tweet" lang="en"><p>統計的声質変換クッソムズすぎワロタ - LESS IS MORE <a href="http://t.co/8RkeXIf6Ym">http://t.co/8RkeXIf6Ym</a> <a href="https://twitter.com/r9y9">@r9y9</a>さんから ムズすぎと言いながら，最後の音はしっかり出ているあたり凄いなぁ．</p>&mdash; M. Morise (忍者系研究者) (@m_morise) <a href="https://twitter.com/m_morise/statuses/485339123171852289">July 5, 2014</a></blockquote>


<script async src="http://r9y9.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/ballforest">@ballforest</a> 従来のパラメータ変換と比較すると、音質は従来よりもよさそうな気はしますがスペクトル包絡の性差ががっつりと影響しそうな気もするんですよね。</p>&mdash; 縄文人（妖精系研究者なのです） (@dicekicker) <a href="https://twitter.com/dicekicker/statuses/485380534122463232">July 5, 2014</a></blockquote>


<script async src="http://r9y9.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>異性間に関しては、実験が必要ですね。異性間だとF0が結構変わってくると思いますが、差分スペクトル補正の場合そもそもF0をいじらないという前提なので、F0とスペクトル包絡が完全に独立でない（ですよね？）以上、同姓間に比べて音質は劣化する気はします。簡単にやったところ、少なくとも僕の主観的には劣化しました</p>

<p>ところで、結構いい感じにできたぜひゃっはーと思って、先輩に聞かせてみたら違いわかんねと言われて心が折れそうになりました。やはり現実はつらいです。</p>

<h2>実装の話</h2>

<p>さて、今回は少し実装のことを書こうと思います。学習&amp;変換部分はPythonで書いています。その他はGo（※Goの話は書きません）。</p>

<h2>トラジェクトリベースのパラメータ変換が遅いのは僕の実装が悪いからでした本当に申し訳ありませんでしたorz</h2>

<p>前回トラジェクトリベースは処理が激重だと書きました。なんと、4秒程度の音声（フレームシフト5msで777フレーム）に対して変換部分に600秒ほどかかっていたのですが（重すぎワロタ）、結果から言えばPythonでも12秒くらいまでに高速化されました（混合数64, メルケプの次元数40+デルタ=80次元、分散共分散はfull）。本当にごめんなさい。</p>

<p>何ヶ月か前、ノリでトラジェクトリベースの変換を実装しようと思ってサクッと書いたのがそのままで、つまりとても効率の悪い実装になっていました。具体的には放置していた問題が二つあって、</p>

<ul>
<li>ナイーブな逆行列の計算</li>
<li>スパース性の無視</li>
</ul>


<p>です。特に後者はかなりパフォーマンスに影響していました</p>

<h2>ナイーブな逆行列の計算</h2>

<p><a href="http://d.hatena.ne.jp/sleepy_yoshi/20120513/p1">numpy.linalg.invとnumpy.linalg.solveを用いた逆行列計算 &ndash; 睡眠不足？！ (id:sleepy_yoshi)</a></p>

<p><code>numpy.linalg.inv</code>を使っていましたよね。しかも<code>numpy.linalg.solve</code>のほうが速いことを知っていながら。一ヶ月前の自分を問い詰めたい。<code>numpy.linalg.solve</code>で置き換えたら少し速くなりました。</p>

<ul>
<li>600秒 &ndash;> 570秒 （うろ覚え）</li>
</ul>


<p>1.05倍の高速化（微妙）</p>

<h2>スパース性の無視</h2>

<ul>
<li><a href="http://isw3.naist.jp/~tomoki/Tomoki/Journals/IEEE-Nov-2007_MLVC.pdf">T. Toda, A. W. Black, and K. Tokuda, “Voice conversion based on maximum likelihood estimation of spectral parameter trajectory,” IEEE Trans. Audio, Speech, Lang. Process, vol. 15, no. 8, pp. 2222–2235, Nov. 2007</a>.</li>
</ul>


<p>論文を見ていただければわかるのですが、トラジェクトリベースの変換法における多くの計算は、行列を使って表すことができます。で、論文中の$W$という行列は、サイズがめちゃくちゃでかいのですがほとんどの要素は0です。この性質を使わない理由はないですよね？？</p>

<p>…残念なことに、僕は密行列として扱って計算していました。ほら、疎行列ってちょっと扱いづらいじゃないですか…めんどくさそう…と思って放置してました。ごめんなさい</p>

<p>pythonで疎行列を扱うなら、scipy.sparseを使えば良さそうです。結果、$W$を疎行列として扱うことで行列演算は大きく高速化されました。</p>

<ul>
<li>570秒 &ndash;> 12秒くらい</li>
</ul>


<p>単純に考えると50倍の高速化ですか。本当にアホだった。最初からscipy.sparse使っておけばよかったです。</p>

<p>scipy.sparseの使い方は以下を参考にしました。みなさんぜひ使いましょう</p>

<ul>
<li><a href="http://sucrose.hatenablog.com/entry/2013/04/07/130625">Python で疎行列(SciPy) &ndash; 唯物是真 @Scaled_Wurm</a></li>
<li><a href="http://docs.scipy.org/doc/scipy/reference/sparse.html">Sparse matrices (scipy.sparse) — SciPy v0.14.0 Reference Guide</a></li>
<li><a href="http://lucidfrontier45.wordpress.com/2011/08/02/scipysparse_matmul/">scipy.sparseで疎行列の行列積 | frontier45</a></li>
</ul>


<h2>コード</h2>

<p>メモ的な意味で主要なコードを貼っておきます。
<a href="https://gist.github.com/r9y9/88bda659c97f46f42525">https://gist.github.com/r9y9/88bda659c97f46f42525</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># coding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">numpy</span> <span class="kn">import</span> <span class="n">linalg</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.mixture</span> <span class="kn">import</span> <span class="n">GMM</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scipy.linalg</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scipy.sparse</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">scipy.sparse.linalg</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GMMMap</span><span class="p">:</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;GMM-based frame-by-frame speech parameter mapping. </span>
</span><span class='line'>
</span><span class='line'><span class="sd">    GMMMap represents a class to transform spectral features of a source</span>
</span><span class='line'><span class="sd">    speaker to that of a target speaker based on Gaussian Mixture Models</span>
</span><span class='line'><span class="sd">    of source and target joint spectral features.</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    Notation</span>
</span><span class='line'><span class="sd">    --------</span>
</span><span class='line'><span class="sd">    Source speaker&#39;s feature: X = {x_t}, 0 &lt;= t &lt; T</span>
</span><span class='line'><span class="sd">    Target speaker&#39;s feature: Y = {y_t}, 0 &lt;= t &lt; T</span>
</span><span class='line'><span class="sd">    where T is the number of time frames.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Parameters</span>
</span><span class='line'><span class="sd">    ----------</span>
</span><span class='line'><span class="sd">    gmm : scipy.mixture.GMM</span>
</span><span class='line'><span class="sd">        Gaussian Mixture Models of source and target joint features</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    swap : bool</span>
</span><span class='line'><span class="sd">        True: source -&gt; target</span>
</span><span class='line'><span class="sd">        False target -&gt; source</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    Attributes</span>
</span><span class='line'><span class="sd">    ----------</span>
</span><span class='line'><span class="sd">    num_mixtures : int</span>
</span><span class='line'><span class="sd">        the number of Gaussian mixtures</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    weights : array, shape (`num_mixtures`)</span>
</span><span class='line'><span class="sd">        weights for each gaussian</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    src_means : array, shape (`num_mixtures`, `order of spectral feature`)</span>
</span><span class='line'><span class="sd">        means of GMM for a source speaker</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    tgt_means : array, shape (`num_mixtures`, `order of spectral feature`)</span>
</span><span class='line'><span class="sd">        means of GMM for a target speaker</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    covarXX : array, shape (`num_mixtures`, `order of spectral feature`, </span>
</span><span class='line'><span class="sd">        `order of spectral feature`)</span>
</span><span class='line'><span class="sd">        variance matrix of source speaker&#39;s spectral feature</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    covarXY : array, shape (`num_mixtures`, `order of spectral feature`, </span>
</span><span class='line'><span class="sd">        `order of spectral feature`)</span>
</span><span class='line'><span class="sd">        covariance matrix of source and target speaker&#39;s spectral feature</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    covarYX : array, shape (`num_mixtures`, `order of spectral feature`, </span>
</span><span class='line'><span class="sd">        `order of spectral feature`)</span>
</span><span class='line'><span class="sd">        covariance matrix of target and source speaker&#39;s spectral feature</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    covarYY : array, shape (`num_mixtures`, `order of spectral feature`, </span>
</span><span class='line'><span class="sd">        `order of spectral feature`)</span>
</span><span class='line'><span class="sd">        variance matrix of target speaker&#39;s spectral feature</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    D : array, shape (`num_mixtures`, `order of spectral feature`, </span>
</span><span class='line'><span class="sd">        `order of spectral feature`)</span>
</span><span class='line'><span class="sd">        covariance matrices of target static spectral features</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    px : scipy.mixture.GMM</span>
</span><span class='line'><span class="sd">        Gaussian Mixture Models of source speaker&#39;s features</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Reference</span>
</span><span class='line'><span class="sd">    ---------</span>
</span><span class='line'><span class="sd">      - [Toda 2007] Voice Conversion Based on Maximum Likelihood Estimation</span>
</span><span class='line'><span class="sd">        of Spectral Parameter Trajectory.</span>
</span><span class='line'><span class="sd">        http://isw3.naist.jp/~tomoki/Tomoki/Journals/IEEE-Nov-2007_MLVC.pdf</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">gmm</span><span class="p">,</span> <span class="n">swap</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># D is the order of spectral feature for a speaker</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">num_mixtures</span><span class="p">,</span> <span class="n">D</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">means_</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">gmm</span><span class="o">.</span><span class="n">means_</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">weights</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">weights_</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Split source and target parameters from joint GMM</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">src_means</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">means_</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">:</span><span class="n">D</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">tgt_means</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">means_</span><span class="p">[:,</span> <span class="n">D</span><span class="p">:]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">covarXX</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">covars_</span><span class="p">[:,</span> <span class="p">:</span><span class="n">D</span><span class="p">,</span> <span class="p">:</span><span class="n">D</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">covarXY</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">covars_</span><span class="p">[:,</span> <span class="p">:</span><span class="n">D</span><span class="p">,</span> <span class="n">D</span><span class="p">:]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">covarYX</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">covars_</span><span class="p">[:,</span> <span class="n">D</span><span class="p">:,</span> <span class="p">:</span><span class="n">D</span><span class="p">]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">covarYY</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">covars_</span><span class="p">[:,</span> <span class="n">D</span><span class="p">:,</span> <span class="n">D</span><span class="p">:]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># swap src and target parameters</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">swap</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">tgt_means</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_means</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_means</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">tgt_means</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">covarYY</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarXX</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarXX</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarYY</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">covarYX</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarXY</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">XY</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarYX</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Compute D eq.(12) in [Toda 2007]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">num_mixtures</span><span class="o">*</span><span class="n">D</span><span class="o">*</span><span class="n">D</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">num_mixtures</span><span class="p">,</span> <span class="n">D</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">num_mixtures</span><span class="p">):</span>
</span><span class='line'>            <span class="n">xx_inv_xy</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">covarXX</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarXY</span><span class="p">[</span><span class="n">m</span><span class="p">])</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">D</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarYY</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">covarYX</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="n">xx_inv_xy</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># p(x), which is used to compute posterior prob. for a given source</span>
</span><span class='line'>        <span class="c"># spectral feature in mapping stage.</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">px</span> <span class="o">=</span> <span class="n">GMM</span><span class="p">(</span><span class="n">n_components</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">num_mixtures</span><span class="p">,</span> <span class="n">covariance_type</span><span class="o">=</span><span class="s">&quot;full&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">px</span><span class="o">.</span><span class="n">means_</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_means</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">px</span><span class="o">.</span><span class="n">covars_</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarXX</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">px</span><span class="o">.</span><span class="n">weights_</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">weights</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Mapping source spectral feature x to target spectral feature y </span>
</span><span class='line'><span class="sd">        so that minimize the mean least squared error.</span>
</span><span class='line'><span class="sd">        More specifically, it returns the value E(p(y|x)].</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Parameters</span>
</span><span class='line'><span class="sd">        ----------</span>
</span><span class='line'><span class="sd">        src : array, shape (`order of spectral feature`)</span>
</span><span class='line'><span class="sd">            source speaker&#39;s spectral feature that will be transformed</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Return</span>
</span><span class='line'><span class="sd">        ------</span>
</span><span class='line'><span class="sd">        converted spectral feature</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">D</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Eq.(11)</span>
</span><span class='line'>        <span class="n">E</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="bp">self</span><span class="o">.</span><span class="n">num_mixtures</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">num_mixtures</span><span class="p">):</span>
</span><span class='line'>            <span class="n">xx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">covarXX</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="n">src</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_means</span><span class="p">[</span><span class="n">m</span><span class="p">])</span>
</span><span class='line'>            <span class="n">E</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tgt_means</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarYX</span><span class="p">[</span><span class="n">m</span><span class="p">]</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">xx</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Eq.(9) p(m|x)</span>
</span><span class='line'>        <span class="n">posterior</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">px</span><span class="o">.</span><span class="n">predict_proba</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">atleast_2d</span><span class="p">(</span><span class="n">src</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Eq.(13) conditinal mean E[p(y|x)]</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">posterior</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">E</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TrajectoryGMMMap</span><span class="p">(</span><span class="n">GMMMap</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    Trajectory-based speech parameter mapping for voice conversion</span>
</span><span class='line'><span class="sd">    based on the maximum likelihood criterion.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Parameters</span>
</span><span class='line'><span class="sd">    ----------</span>
</span><span class='line'><span class="sd">    gmm : scipy.mixture.GMM</span>
</span><span class='line'><span class="sd">        Gaussian Mixture Models of source and target speaker joint features</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    gv : scipy.mixture.GMM (default=None)</span>
</span><span class='line'><span class="sd">        Gaussian Mixture Models of target speaker&#39;s global variance of spectral</span>
</span><span class='line'><span class="sd">        feature</span>
</span><span class='line'><span class="sd">    </span>
</span><span class='line'><span class="sd">    swap : bool (default=False)</span>
</span><span class='line'><span class="sd">        True: source -&gt; target</span>
</span><span class='line'><span class="sd">        False target -&gt; source</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Attributes</span>
</span><span class='line'><span class="sd">    ----------</span>
</span><span class='line'><span class="sd">    TODO </span>
</span><span class='line'>
</span><span class='line'><span class="sd">    Reference</span>
</span><span class='line'><span class="sd">    ---------</span>
</span><span class='line'><span class="sd">      - [Toda 2007] Voice Conversion Based on Maximum Likelihood Estimation</span>
</span><span class='line'><span class="sd">        of Spectral Parameter Trajectory.</span>
</span><span class='line'><span class="sd">        http://isw3.naist.jp/~tomoki/Tomoki/Journals/IEEE-Nov-2007_MLVC.pdf</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">gmm</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">gv</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">swap</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
</span><span class='line'>        <span class="n">GMMMap</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">gmm</span><span class="p">,</span> <span class="n">swap</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">T</span> <span class="o">=</span> <span class="n">T</span>
</span><span class='line'>        <span class="c"># shape[1] = d(src) + d(src_delta) + d(tgt) + d(tgt_delta)</span>
</span><span class='line'>        <span class="n">D</span> <span class="o">=</span> <span class="n">gmm</span><span class="o">.</span><span class="n">means_</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">## Setup for Trajectory-based mapping</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__construct_weight_matrix</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">## Setup for GV post-filtering</span>
</span><span class='line'>        <span class="c"># It is assumed that GV is modeled as a single mixture GMM</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">gv</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">gv_mean</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">means_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">gv_covar</span> <span class="o">=</span> <span class="n">gv</span><span class="o">.</span><span class="n">covars_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">Pv</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">inv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">gv_covar</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__construct_weight_matrix</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">D</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># Construct Weight matrix W</span>
</span><span class='line'>        <span class="c"># Eq.(25) ~ (28)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">T</span><span class="p">):</span>
</span><span class='line'>            <span class="n">w0</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">lil_matrix</span><span class="p">((</span><span class="n">D</span><span class="p">,</span> <span class="n">D</span><span class="o">*</span><span class="n">T</span><span class="p">))</span>
</span><span class='line'>            <span class="n">w1</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">lil_matrix</span><span class="p">((</span><span class="n">D</span><span class="p">,</span> <span class="n">D</span><span class="o">*</span><span class="n">T</span><span class="p">))</span>
</span><span class='line'>            <span class="n">w0</span><span class="p">[</span><span class="mi">0</span><span class="p">:,</span><span class="n">t</span><span class="o">*</span><span class="n">D</span><span class="p">:(</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">D</span><span class="p">]</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">diags</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">D</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">t</span><span class="o">-</span><span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="n">tmp</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>                <span class="n">w1</span><span class="p">[</span><span class="mi">0</span><span class="p">:,(</span><span class="n">t</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">D</span><span class="p">:</span><span class="n">t</span><span class="o">*</span><span class="n">D</span><span class="p">]</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">diags</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">t</span><span class="o">+</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">:</span>
</span><span class='line'>                <span class="n">tmp</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'>                <span class="n">tmp</span><span class="o">.</span><span class="n">fill</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>                <span class="n">w1</span><span class="p">[</span><span class="mi">0</span><span class="p">:,(</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">D</span><span class="p">:(</span><span class="n">t</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="n">D</span><span class="p">]</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">diags</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">W_t</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">vstack</span><span class="p">([</span><span class="n">w0</span><span class="p">,</span> <span class="n">w1</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># Slower</span>
</span><span class='line'>            <span class="c"># self.W[2*D*t:2*D*(t+1),:] = W_t</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">W</span> <span class="o">=</span> <span class="n">W_t</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">W</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">vstack</span><span class="p">([</span><span class="bp">self</span><span class="o">.</span><span class="n">W</span><span class="p">,</span> <span class="n">W_t</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">W</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">csr_matrix</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">W</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">assert</span> <span class="bp">self</span><span class="o">.</span><span class="n">W</span><span class="o">.</span><span class="n">shape</span> <span class="o">==</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">D</span><span class="o">*</span><span class="n">T</span><span class="p">,</span> <span class="n">D</span><span class="o">*</span><span class="n">T</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">convert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">src</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Mapping source spectral feature x to target spectral feature y </span>
</span><span class='line'><span class="sd">        so that maximize the likelihood of y given x.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Parameters</span>
</span><span class='line'><span class="sd">        ----------</span>
</span><span class='line'><span class="sd">        src : array, shape (`the number of frames`, `the order of spectral feature`)</span>
</span><span class='line'><span class="sd">            a sequence of source speaker&#39;s spectral feature that will be</span>
</span><span class='line'><span class="sd">            transformed</span>
</span><span class='line'>
</span><span class='line'><span class="sd">        Return</span>
</span><span class='line'><span class="sd">        ------</span>
</span><span class='line'><span class="sd">        a sequence of transformed spectral features</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">T</span><span class="p">,</span> <span class="n">D</span> <span class="o">=</span> <span class="n">src</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">src</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">T</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">T</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__construct_weight_matrix</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># A suboptimum mixture sequence  (eq.37)</span>
</span><span class='line'>        <span class="n">optimum_mix</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">px</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Compute E eq.(40)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">E</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">T</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">D</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">T</span><span class="p">):</span>
</span><span class='line'>            <span class="n">m</span> <span class="o">=</span> <span class="n">optimum_mix</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="c"># estimated mixture index at time t</span>
</span><span class='line'>            <span class="n">xx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">covarXX</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="n">src</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">src_means</span><span class="p">[</span><span class="n">m</span><span class="p">])</span>
</span><span class='line'>            <span class="c"># Eq. (22)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">E</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tgt_means</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">covarYX</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="n">xx</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">E</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">E</span><span class="o">.</span><span class="n">flatten</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Compute D eq.(41). Note that self.D represents D^-1.</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">D</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">T</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">D</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">D</span><span class="p">))</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">T</span><span class="p">):</span>
</span><span class='line'>            <span class="n">m</span> <span class="o">=</span> <span class="n">optimum_mix</span><span class="p">[</span><span class="n">t</span><span class="p">]</span>
</span><span class='line'>            <span class="n">xx_inv_xy</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">covarXX</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarXY</span><span class="p">[</span><span class="n">m</span><span class="p">])</span>
</span><span class='line'>            <span class="c"># Eq. (23)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">D</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">covarYY</span><span class="p">[</span><span class="n">m</span><span class="p">]</span> <span class="o">-</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">covarYX</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="n">xx_inv_xy</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">D</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">inv</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">D</span><span class="p">[</span><span class="n">t</span><span class="p">])</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">D</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">block_diag</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># represent D as a sparse matrix</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">D</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">csr_matrix</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">D</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Compute target static features</span>
</span><span class='line'>        <span class="c"># eq.(39)</span>
</span><span class='line'>        <span class="n">covar</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">W</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">D</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">W</span><span class="p">))</span>
</span><span class='line'>        <span class="n">y</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">sparse</span><span class="o">.</span><span class="n">linalg</span><span class="o">.</span><span class="n">spsolve</span><span class="p">(</span><span class="n">covar</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">W</span><span class="o">.</span><span class="n">T</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">D</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">E</span><span class="p">)),</span>\
</span><span class='line'>                                        <span class="n">use_umfpack</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">y</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">T</span><span class="p">,</span> <span class="n">D</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>結論</h2>

<ul>
<li>疎行列の演算を考えるときは、間違ってもめんどくさいとか思わずに疎行列を積極的に使おう</li>
<li>統計的声質変換ムズすぎ</li>
</ul>


<h2>おまけめも</h2>

<p>僕が変換精度を改善するために考えていることのめも</p>

<ul>
<li>統計的な手法を使う限りover-smoothingの問題はついてくる。ならば、逆にover-smoothingされることで都合の良い特徴量を考えることはできないか</li>
<li>メルケプとかそもそもスペクトル包絡をコンパクトにparamtricに表現するために考えられたもの（だと思ってる）ので、高品質な変換を考えるならばスペクトル包絡をそのまま使うなりした方がいいんじゃないか。とはいえスペクトル包絡をそのまま使うのはぼちぼち高次元なので、個人性に依存する部分を残した形で非線形次元削減したらどうか（例えばニューラルネットを使って統計的に個人性に依存する部分を見つけ出すとか）</li>
<li>time-dependentな関係をモデル化しないとだめじゃないか、確率モデルとして。RNNとか普通に使えそうだし、まぁHMMでもよい</li>
<li>音素境界を推定して、segment単位で変換するのも良いかも</li>
<li>識別モデルもっと使ってもいいんじゃないか</li>
<li>波形合成にSPTKのmlsadfコマンド使ってる？あれ実はフレーム間のメルケプが線形補間されてるんですよね。本当に線形補間でいいんでしょうか？他の補間法も試したらどうですかね</li>
</ul>


<p>こんなかんじですか。おやすみなさい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[統計的声質変換クッソムズすぎワロタ]]></title>
    <link href="http://r9y9.github.io/blog/2014/07/05/statistical-voice-conversion-muzui/"/>
    <updated>2014-07-05T16:48:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/07/05/statistical-voice-conversion-muzui</id>
    <content type="html"><![CDATA[<p>こんにちは。</p>

<p>最近、統計的声質変換の勉強をしていました。で、メジャーなGMM（混合ガウスモデル）ベースの変換を色々やってみたので、ちょろっと書きます。実は（というほどでもない?）シンプルなGMMベースの方法だと音質クッソ悪くなってしまうんですが、色々試してやっとまともに聞ける音質になったので、試行錯誤の形跡を残しておくとともに、音声サンプルを貼っておきます。ガチ勢の方はゆるりと見守ってください</p>

<p>基本的に、以下の論文を参考にしています</p>

<ul>
<li><a href="http://isw3.naist.jp/~tomoki/Tomoki/Journals/IEEE-Nov-2007_MLVC.pdf">T. Toda, A. W. Black, and K. Tokuda, “Voice conversion based on maximum likelihood estimation of spectral parameter trajectory,” IEEE Trans. Audio, Speech, Lang. Process, vol. 15, no. 8, pp. 2222–2235, Nov. 2007</a>.</li>
</ul>


<h2>GMMベースの声質変換の基本</h2>

<p>シンプルなGMMベースの声質変換は大きく二つのフェーズに分けられます。</p>

<ul>
<li>参照話者と目標話者のスペクトル特徴量の結合GMM $P(x,y)$を学習する</li>
<li>入力$x$が与えらたとき、$P(y|x)$が最大となるようにスペクトル特徴量を変換する</li>
</ul>


<p>あらかじめ話者間の関係をデータから学習しておくことで、未知の入力が来た時にも変換が可能になるわけです。</p>

<p>具体的な変換プロセスとしては、音声を</p>

<ul>
<li>基本周波数</li>
<li>非周期性成分</li>
<li>スペクトル包絡</li>
</ul>


<p>の3つに分解し、スペクトル包絡の部分（≒声質を表す特徴量）に対して変換を行い、最後に波形を再合成するといった方法がよく用いられます。基本周波数や非周期性成分も変換することがありますが、ここではとりあえず扱いません</p>

<p>シンプルな方法では、フレームごとに独立に変換を行います。</p>

<p>GMMベースのポイントは、東大の齋藤先生の以下のツイートを引用しておきます。</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/shurabaP">@shurabaP</a> GMMベースの声質変換の肝は、入力xが与えられた時の出力yの条件付き確率P(y|x) が最大になるようにyを選ぶという確率的な考えです。私のショボい自作スクリプトですが、HTKを使ったGMMの学習レシピは研究室内部用に作ってあるので、もし必要なら公開しますよ。</p>&mdash; Daisuke Saito (@dsk_saito) <a href="https://twitter.com/dsk_saito/statuses/48442052534472706">March 17, 2011</a></blockquote>


<script async src="http://r9y9.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>ちなみに僕はscipy.mixture.GMMを使いました。HTKヤダー</p>

<h2>やってみる</h2>

<p>さて、実際にやってみます。データベースには、<a href="ht%0Atp://www.festvox.org/cmu_arctic/">CMU_ARCTIC speech synthesis databases</a>を使います。今回は、女性話者の二人を使いました。</p>

<p>音声の分析合成には、<a href="http://ml.cs.yamanashi.ac.jp/world/">WORLD</a>を使います。WORLDで求めたスペクトル包絡からメルケプストラム（今回は32次元）に変換したものを特徴量として使いました。</p>

<p>学習では、学習サンプル10641フレーム（23フレーズ）、GMMの混合数64、full-covarianceで学習しました。</p>

<h3>変換元となる話者（参照話者）</h3>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/157362625&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>


<h3>変換対象となる話者（目標話者）</h3>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/157362613&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>


<h3>GMMベースのframe-by-frameな声質変換の結果</h3>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/157371966&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>


<p>はぁー、正直聞けたもんじゃないですね。声質は目標話者に近づいている感がありますが、何分音質が悪い。学習条件を色々変えて試行錯誤しましたけどダメでした</p>

<h2>GMMベースの声質変換の弱点</h2>

<p>さて、なぜダメかを考えます。もう考えつくされてる感あるけど、大事なところだけ整理します</p>

<h3>フレーム毎に独立な変換処理</h3>

<p>まず、音声が時間的に独立なわけないですよね。フレームごとに独立に変換すると、時間的に不連続な点が出てきてしまいます。その結果、ちょっとノイジーな音声になってしまったのではないかと考えられます。</p>

<p>これに対する解決法としては、戸田先生の論文にあるように、動的特徴量も併せてGMMを学習して、系列全体の確率が最大となるように変換を考えるトラジェクトリベースのパラメータ生成方法があります。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>さて、やってみます。参照音声、目標音声は↑で使ったサンプルと同じです。</p>

<h3>トラジェクトリベースの声質変換の結果</h3>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/157371969&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>


<p>あんま変わらないですね。計算量めっちゃ食うのに、本当につらい。実装が間違ってる可能性もあるけど…</p>

<p>他の方法を考えるとするならば、まぁいっぱいあると思うんですが、スペクトル包絡なんて時間的に不連続にコロコロ変わるようなもんでもない気がするので、確率モデルとしてそういう依存関係を考慮した声質変換があってもいいもんですけどね。あんま見てない気がします。</p>

<p>ちょっと調べたら見つかったもの↓</p>

<ul>
<li><a href="http://koasas.kaist.ac.kr/bitstream/10203/17632/1/25.pdf">Kim, E.K., Lee, S., Oh, Y.-H. (1997). &ldquo;Hidden Markov Model Based Voice Conversion Using Dynamic Characteristics of Speaker&rdquo;, Proc. of Eurospeech’97, Rhodes, Greece, pp. 2519-2522.</a></li>
</ul>


<h3>過剰な平滑化</h3>

<p>これはGMMに限った話ではないですが、GMMベースのFrame-by-Frameな声質変換の場合でいえば、変換後の特徴量は条件付き期待値を取ることになるので、まぁ常識的に考えて平滑化されますよね。</p>

<p>これに対する解法としては、GV（Global Variance）を考慮する方法があります。これは戸田先生が提案されたものですね。</p>

<p>さて、やってみます。wktk</p>

<h3>GVを考慮したトラジェクトリベースの声質変換の結果</h3>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/157371971&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>


<p>多少ましになった気もしなくもないけど、やっぱり音質はいまいちですね。そして計算量は激マシします。本当につらい。学会で聞いたGVありの音声はもっと改善してた気がするんだけどなー音声合成の話だけど。僕の実装が間違ってるんですかね…</p>

<h2>ムズすぎわろた</h2>

<p>以上、いくつか試しましたが、統計的声質変換は激ムズだということがわかりました。え、ここで終わるの？という感じですが、最後に一つ別の手法を紹介します。</p>

<h2>差分スペクトル補正に基づく統計的声質変換</h2>

<p>これまでは、音声を基本周波数、非周期性成分、スペクトル包絡に分解して、スペクトル包絡を表す特徴量を変換し、変換後の特徴量を元に波形を再合成していました。ただ、よくよく考えると、そもそも基本周波数、非周期性成分をいじる必要がない場合であれば、わざわざ分解して再合成する必要なくね？声質の部分のみ変換するようなフィルタかけてやればよくね？という考えが生まれます。実は、そういったアイデアに基づく素晴らしい手法があります。それが、差分スペクトル補正に基づく声質変換です。</p>

<p>詳細は、以下の予稿をどうぞ</p>

<p><a href="http://www.phontron.com/paper/kobayashi14asj.pdf">小林 和弘, 戸田 智基, Graham Neubig, Sakriani Sakti, 中村 哲. &ldquo;差分スペクトル補正に基づく統計的歌声声質変換&rdquo;, 日本音響学会2014年春季研究発表会(ASJ). 東京. 2014年3月.</a></p>

<p>では、やってみます。歌声ではなく話し声ですが。他の声質変換の結果とも聴き比べてみてください。</p>

<h3>差分スペクトル補正に基づく声質変換の結果</h3>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/157362603&amp;color=ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false"></iframe>


<p>かなり音声の自然性は上がりましたね。これはヘタすると騙されるレベル。本当に素晴らしいです。しかも簡単にできるので、お勧めです。↑のは、GMMに基づくframe-by-frameな変換です。計算量も軽いので、リアルタイムでもいけますね。</p>

<h2>おわりに</h2>

<p>声質変換であれこれ試行錯誤して、ようやくスタートラインにたてた感があります。今後は新しい方法を考えようかなーと思ってます。</p>

<p>おわり</p>

<h2>おわび</h2>

<blockquote class="twitter-tweet" lang="en"><p>お盆の間に学習ベースの声質変換のプログラム書く（宿題） <a href="https://twitter.com/hashtag/%E5%AE%A3%E8%A8%80?src=hash">#宣言</a></p>&mdash; 山本りゅういち (@r9y9) <a href="https://twitter.com/r9y9/statuses/366928228465655808">August 12, 2013</a></blockquote>


<script async src="http://r9y9.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>約1年かかりました……。本当に申し訳ありませんでした(´･_･`)</p>

<h2>追記</h2>

<p>Twitterで教えてもらいました。トラジェクトリベースで学習も変換も行う研究もありました</p>

<blockquote class="twitter-tweet" lang="en"><p><a href="https://twitter.com/r9y9">@r9y9</a> つ トラジェクトリＧＭＭな特徴量変換 <a href="http://t.co/kUn7bp9EUt">http://t.co/kUn7bp9EUt</a></p>&mdash; 縄文人（妖精系研究者なのです） (@dicekicker) <a href="https://twitter.com/dicekicker/statuses/485376823308455936">July 5, 2014</a></blockquote>


<script async src="http://r9y9.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>ただ、これはトラジェクトリベースのパラメータ生成法の提案であって、トラジェクトリモデル自体を学習してるわけではないんだよなー。普通に考えると学習もトラジェクトリで考える方法があっていい気がするが、 <del>まだ見てないですね。</del> ありました。追記参照<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GOSSP - Go言語で音声信号処理]]></title>
    <link href="http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go/"/>
    <updated>2014-06-08T00:56:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go</id>
    <content type="html"><![CDATA[<h1>C++からGoへ</h1>

<p>みなさん、C++で信号処理のアルゴリズムを書くのはつらいと思ったことはありませんか？C++で書くと速いのはいいけれど、いかんせん書くのが大変、コンパイルエラーは読みづらい、はたまたライブラリをビルドしようとしたら依存関係が上手く解決できず……そんな覚えはないでしょうか？謎のコンパイルエラーに悩みたくない、ガーベジコレクションほしい、Pythonのようにさくっと書きたい、型推論もほしい、でも動作は速い方がいい、そう思ったことはないでしょうか。</p>

<p>そこでGoです。もちろん、そういった思いに完全に答えてくれるわけではありませんが、厳しいパフォーマンスを要求される場合でなければ、Goの方が良い場合も多いと僕は思っています。
とはいえ、まだ比較的新しい言語のため、ライブラリは少なく信号処理を始めるのも大変です。というわけで、僕がC++をやめてGoに移行したことを思い出し、Goでの信号処理の基礎と、今まで整備してきたGoでの音声信号処理ライブラリを紹介します。</p>

<p>Goの良いところ/悪いところについては書きません。正直、本当は何の言語でもいいと思っていますが、僕はGoが好きなので、ちょっとでもGoで信号処理したいと思う人が増えるといいなーと思って書いてみます。</p>

<p>あとで書きますが、僕が書いたコードで使えそうなものは、以下にまとめました。</p>

<p><a href="https://github.com/r9y9/gossp">https://github.com/r9y9/gossp</a></p>

<h1>基礎</h1>

<h2>Wavファイルの読み込み/書き込み <a href="http://godoc.org/github.com/mjibson/go-dsp/wav">[wav]</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/speech_signal.png" title="&#34;Speech signal example.&#34;" alt="&#34;Speech signal example.&#34;"></p>

<p>まずは音声ファイルの読み込みですね。wavファイルの読み込みさえできれば十分でしょう。</p>

<p>これは、すでに有用なライブラリが存在します。<a href="https://github.com/mjibson/go-dsp">GO-DSP</a> とういデジタル信号処理のライブラリに含まれるwavパッケージを使いましょう。</p>

<p>次のように書くことができます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/mjibson/go-dsp/wav&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ファイルのオープン</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;./test.wav&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Wavファイルの読み込み </span>
</span><span class='line'>  <span class="nx">w</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">wav</span><span class="p">.</span><span class="nx">ReadWav</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">werr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// データを表示</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Data</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね。</p>

<p>Goはウェブ周りの標準パッケージが充実しているので、以前<a href="http://qiita.com/r9y9/items/35a1cf139332a3072fc8">qiitaに書いた記事</a>のように、wavファイルを受け取って何らかの処理をする、みたいなサーバも簡単に書くことができます</p>

<p>wavファイルの書き込み＋ユーティリティを追加したかったので、僕は自分でカスタムしたパッケージを使っています。</p>

<p><a href="https://github.com/r9y9/go-dsp">https://github.com/r9y9/go-dsp</a></p>

<h2>高速フーリエ変換 (Fast Fourier Transform; FFT) <a href="http://godoc.org/github.com/mjibson/go-dsp/fft">[fft]</a></h2>

<p>言わずとしれたFFTです。音のスペクトルを求めるのに必須の処理です。で、Goではどうすればいいのか？ということですが、こちらもすでに有用なライブラリが存在します。<a href="https://github.com/mjibson/go-dsp">GO-DSP</a>に含まれる、fftパッケージを使いましょう。</p>

<p>このfftパッケージは、go routinesを使って平行化されているため速いです。僕は、1次元のフーリエ変換以外めったに使いませんが、N次元のフーリエ変換をサポートしているのもこのライブラリのいいところです。</p>

<h3>参考</h3>

<ul>
<li><a href="http://mattjibson.com/blog/2013/01/04/go-dsp-fft-performance-with-go-routines/">go-dsp FFT performance with go routines · Matt Jibson</a></li>
</ul>


<p>使い方は、とても簡単です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/mjibson/go-dsp/fft&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">fft</span><span class="p">.</span><span class="nx">FFTReal</span><span class="p">([]</span><span class="kt">float64</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">}))</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>離散コサイン変換 (Discrete Cosine Transform; DCT) <a href="http://godoc.org/github.com/r9y9/gossp/dct">[dct]</a></h2>

<p>DCTは、Mel-Frequency Cepstrum Coefficients (通称MFCC) 求めるのに必要な変換です。こちらは、残念ながら良さそうなライブラリがなかったので、自分で書きました。</p>

<p>使い方はFFTとほとんど一緒です。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/gossp/dct&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">:=</span> <span class="nx">dct</span><span class="p">.</span><span class="nx">DCTOrthogonal</span><span class="p">([]</span><span class="kt">float64</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">})</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">dct</span><span class="p">.</span><span class="nx">IDCTOrthogonal</span><span class="p">(</span><span class="nx">y</span><span class="p">))</span> <span class="c1">// 直交変換では、逆変換すると元に戻る</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>さて、基本的なところは一旦ここまでです。次からは、少し音声寄りの信号処理手法の紹介です。</p>

<h1>時間周波数解析</h1>

<h2>短時間フーリエ変換 (Short Time Fourier Transform; STFT) <a href="http://godoc.org/github.com/r9y9/gossp/stft">[stft]</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/stft.png" title="&#34;STFT spectrogram&#34;" alt="&#34;STFT spectrogram&#34;"></p>

<p>STFTは、音声の時間周波数解析手法として定番の方法ですね。音声を可視化したり、何らかの認識アルゴリズムの特徴抽出に使ったり、まぁ色々です。</p>

<p>次のようなコードを書くと、スペクトログラムが作れます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;flag&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/gossp&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/gossp/io&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/gossp/stft&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/gossp/window&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">filename</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">String</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="s">&quot;input.wav&quot;</span><span class="p">,</span> <span class="s">&quot;Input filename&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">w</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">ReadWav</span><span class="p">(</span><span class="o">*</span><span class="nx">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">werr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">GetMonoData</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">s</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">stft</span><span class="p">.</span><span class="nx">STFT</span><span class="p">{</span>
</span><span class='line'>      <span class="nx">FrameShift</span><span class="p">:</span> <span class="nb">int</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">SampleRate</span><span class="p">)</span> <span class="o">/</span> <span class="mf">100.0</span><span class="p">),</span> <span class="c1">// 0.01 sec,</span>
</span><span class='line'>      <span class="nx">FrameLen</span><span class="p">:</span>   <span class="mi">2048</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Window</span><span class="p">:</span>     <span class="nx">window</span><span class="p">.</span><span class="nx">CreateHanning</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">STFT</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">amplitudeSpectrogram</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">gossp</span><span class="p">.</span><span class="nx">SplitSpectrogram</span><span class="p">(</span><span class="nx">spectrogram</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">PrintMatrixAsGnuplotFormat</span><span class="p">(</span><span class="nx">amplitudeSpectrogram</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">PrintMatrixAsGnuplotFormat</span><span class="p">(</span><span class="nx">matrix</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;#&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">len</span><span class="p">(</span><span class="nx">matrix</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">vec</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">matrix</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">vec</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">val</span><span class="p">))</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上の画像は、gnuplotで表示したものです</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">set</span> <span class="nx">pm3d</span> <span class="kd">map</span>
</span><span class='line'><span class="nx">sp</span> <span class="s">&quot;spectrogram.txt&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>逆短時間フーリエ変換 (Inverse Short Time Fourier Transform; ISTFT) <a href="http://godoc.org/github.com/r9y9/gossp/stft">[stft]</a></h2>

<p>ISTFTは、STFTの逆変換でスペクトログラムから時間領域の信号に戻すために使います。スペクトログラムを加工するような音源分離、ノイズ除去手法を使う場合には、必須の処理です。これはstftと同じパッケージ下にあります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">reconstructed</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">ISTFT</span><span class="p">(</span><span class="nx">spectrogram</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、スペクトログラムから音声を再構築することができます。</p>

<p>逆変換の仕組みは、意外と難しかったりします。</p>

<ul>
<li><a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.306.7858">D. W. Griffin and J. S. Lim, &ldquo;Signal estimation from modified short-time Fourier transform,&rdquo; IEEE Trans. ASSP, vol.32, no.2, pp.236–243, Apr. 1984.</a></li>
<li><a href="http://research.cs.tamu.edu/prism/lectures/sp/l6.pdf">L6: Short-time Fourier analysis and synthesis</a></li>
<li><a href="http://yukara-13.hatenablog.com/entry/2013/11/17/210204">Pythonで短時間フーリエ変換（STFT）と逆変換 &ndash; 音楽プログラミングの超入門（仮）</a></li>
</ul>


<p>この辺を参考にしました。興味のある人は読んで見てください。</p>

<h2>連続ウェーブレット変換 (Continuous Wavelet Transform; CWT)</h2>

<p><img class="center" src="http://r9y9.github.io/images/morlet_6_log.png" title="&#34;Morlet Wavelet spectrogram&#34;" alt="&#34;Morlet Wavelet spectrogram&#34;"></p>

<p>これは何回かブログで書きました。</p>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/">FFTを使った連続ウェーブレット変換の高速化 &ndash; LESS IS MORE</a></li>
<li><a href="http://r9y9.github.io/blog/2014/06/01/continuouos-wavelet-transform-types/">連続ウェーブレット変換に使うマザーウェーブレット色々: Morlet, Paul, DOG &ndash; LESS IS MORE</a></li>
</ul>


<p>コードは、テストがまだ通らないので開発中ということで…orz</p>

<h2>逆連続ウェーブレット変換 (Inverse Continuous Wavelet Transform; ICWT)</h2>

<p>連続ウェーブレット変換の逆変換ですね。これもけっこう難しいです。こちらもまだテストに通っていないので、開発中です。</p>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/10/21/signal-reconstruction-using-invere-cwt/">逆連続ウェーブレット変換による信号の再構成 &ndash; LESS IS MORE</a></li>
</ul>


<p>さて、この辺でまた一区切りです。次は、より音声に特化した信号処理手法を紹介します。</p>

<p>※以降紹介するもののうち、多くは<a href="http://sp-tk.sourceforge.net/">SPTK</a>のGo-portになっていて、一部はcgoを使ってラップしただけです（後々はpure goにしたいけれど、特にメルケプストラム分析あたりは難しいのでできていません）</p>

<h1>音声分析系</h1>

<h2>基本周波数推定 <a href="http://godoc.org/github.com/r9y9/gossp/f0">[f0]</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/arayuru_f0.png" title="&#34;Fundamental frequency trajectory example.&#34;" alt="&#34;Fundamental frequency trajectory example.&#34;"></p>

<p>ざっくり言えば音の高さを求める方法ですね。一応、音声に特化した方法をいくつか使えるようにしました。</p>

<ul>
<li><a href="http://audition.ens.fr/adc/pdf/2002_JASA_YIN.pdf">A. de Cheveigne and H. Kawahara. YIN, a fundamental frequency estimator for speech and music. J. Acoust. Soc. Am., 111(4):1917–1930, 2002.</a></li>
<li><a href="http://www.cise.ufl.edu/~acamacho/publications/dissertation.pdf">A. Camacho. SWIPE: A sawtooth waveform inspired pitch estimator for speech and music. PhD thesis, University of Florida, 2007.</a></li>
</ul>


<p>ただしYINはもどきです。</p>

<p>以前、<a href="https://github.com/r9y9/go-world">GO-WORLD</a>という音声分析合成系WORLDのGoラッパーを書いたので、それを使えばF0推定手法Dioが使えます。</p>

<h3>参考</h3>

<ul>
<li><a href="http://r9y9.github.io/blog/2014/03/22/go-world/">音声分析変換合成システムWORLDのGoラッパーを書いた &ndash; LESS IS MORE</a></li>
</ul>


<h2>メルケプストラム分析 <a href="http://godoc.org/github.com/r9y9/gossp/mgcep">[mgcep]</a></h2>

<p>音声合成界隈ではよく聞くメルケプストラム（※MFCCとは異なります）を求めるための分析手法です。メルケプストラムは、HMM（Hidden Markov Models; 隠れマルコフモデル）音声合成や統計的声質変換において、声道特徴（いわゆる、声質）のパラメータ表現としてよく使われています。メルケプストラムの前に、LPCとかPARCORとか色々あるのですが、現在のHMM音声合成で最もよく使われているのはメルケプストラムな気がするので、メルケプストラム分析があれば十分な気がします。</p>

<p>これは、SPTKをcgoを使ってラップしました</p>

<h3>参考</h3>

<ul>
<li><a href="http://ci.nii.ac.jp/naid/40004638236/">徳田恵一, 小林隆夫, 深田俊明, 斎藤博徳, 今井 聖, “メルケプストラムをパラメータとする音声のスペクトル推定,” 信学論(A), vol.J74-A, no.8, pp.1240–1248, Aug. 1991.</a></li>
</ul>


<h2>メル一般化ケプストラム分析 <a href="http://godoc.org/github.com/r9y9/gossp/mgcep">[mgcep]</a></h2>

<p>メル一般化ケプストラム分析は、その名の通りメルケプストラム分析を一般化したものです。メルケプストラム分析はもちろん、LPCも包含します（詳細は、参考文献をチェックしてみてください）。論文をいくつかあさっている限り、あんまり使われていない気はしますが、これもSPTKをラップしてGoから使えるようにしました。メルケプストラム分析もメル一般化ケプストラム分析に含まれるので、mgcepという一つのパッケージにしました。</p>

<h3>参考</h3>

<ul>
<li><a href="http://www.utdallas.edu/~john.hanse/nPublications/JP-55-SpeechComm-Yapanel-Hansen-PMVDR-Feb08.pdf">Tokuda, K., Masuko, T., Kobayashi, T., Imai, S., 1994. Mel-generalized Cepstral Analysis-A Uniﬁed Approach to Speech Spectral Estimation, ISCA ICSLP-94: Inter. Conf. Spoken Lang. Proc., Yokohama, Japan, pp. 1043–1046.</a></li>
</ul>


<h1>音声合成系</h1>

<h2>励起信号の生成 <a href="http://godoc.org/github.com/r9y9/gossp/excite">[excite]</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/pulse_excite.png" title="&#34;Exciation eignal.&#34;" alt="&#34;Exciation eignal.&#34;"></p>

<p>SPTKのexciteのGo実装です。いわゆるPulseExcitationという奴ですね。非周期成分まったく考慮しない単純な励起信号です。</p>

<p>高品質な波形合成が必要な場合は、WORLDやSTRAIGHTを使うのが良いです。</p>

<h2>MLSA (Mel Log Spectrum Approximation) デジタルフィルタ <a href="http://godoc.org/github.com/r9y9/gossp/vocoder">[vocoder]</a></h2>

<p>MLSAフィルタは、メルケプストラムと励起信号から音声波形を合成するためのデジタルフィルタです。HMM音声合成の波形合成部で使われています（今もきっと）。Pure goで書き直しました。</p>

<p>昔、C++でも書いたことあります。</p>

<h3>参考</h3>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/12/01/mlsa-filter-with-c-plus-plus/">MLSA digital filter のC++実装 &ndash; LESS IS MORE</a></li>
</ul>


<h2>MGLSA (Mel Genaralized-Log Spectrum Approximation) デジタルフィルタ <a href="http://godoc.org/github.com/r9y9/gossp/vocoder">[vocoder]</a></h2>

<p>MGLSAフィルタは、メル一般化ケプストラムから波形を合成するためのデジタルフィルタですね。これも pure goで書きました。</p>

<h2><strong>※SPTKの再実装について</strong></h2>

<p>SPTKの実装をGoで書き直したものについては、SPTKの実装と結果が一致するかどうかを確認するテストを書いてあります。よって、誤った結果になるということは（計算誤差が影響する場合を除き）基本的にないので、お気になさらず。</p>

<h2>高品質な音声分析変換合成系 WORLD <a href="http://godoc.org/github.com/r9y9/go-world">[go-world]</a></h2>

<p><a href="http://r9y9.github.io/blog/2014/03/22/go-world/">音声分析変換合成システムWORLDのGoラッパーを書いた &ndash; LESS IS MORE</a></p>

<p>以前WORLDのGoラッパーを書いたので、色々使えると思います。統計ベースの音声合成とか、声質変換とか。僕は声質変換に使おうと思ってラップしました。</p>

<h1>おわりに</h1>

<p>長々と書きましたが、Go言語での信号処理の基礎と、今まで整備してきた音声信号処理ライブラリを簡単に紹介しました。僕が書いたものは、まとめてGithubで公開しています。</p>

<p><a href="https://github.com/r9y9/gossp">https://github.com/r9y9/gossp</a></p>

<p>使ってももらって、あわよくばバグとか報告してもらって、改善していければいいなーというのと、あとGithubのissue管理便利だし使おうと思ってGithubに上げました。</p>

<p>みなさん、Goで音声信号処理始めてみませんか？</p>

<h1>余談</h1>

<h2>Pythonではダメなの？その他言語は？</h2>

<p>なんでGoなの？と思う人がいると思います。冒頭にも書いたとおり、正直好きなのにすればいいですが、適当に書いて速いのがいいならC++だし、型を意識せずさくっと書きたいならPythonだし、そこそこ速くて型があって型推論もあって、とかだったらGoがいいかなと僕は思います。</p>

<p>Goの特徴（≒良さ）ついては、<a href="http://www.slideshare.net/ymotongpoo/20130228-gobp-study-66-16830134">20130228 Goノススメ（BPStudy #66） | SlideShare</a>
 の11枚目が僕にはドンピシャです。</p>

<p>numpy, scipy, matplotlib, scikit-learnあたりが最強すぎるので、僕はpythonも良く使います。</p>

<h2>きっかけ</h2>

<p>この記事を書いたきっかけは、友人にGoをおすすめしまくっていたのに全然聞いてくれなかったからでした。Goでも信号処理はできるよ</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[連続ウェーブレット変換に使うマザーウェーブレット色々: Morlet, Paul, DOG]]></title>
    <link href="http://r9y9.github.io/blog/2014/06/01/continuouos-wavelet-transform-types/"/>
    <updated>2014-06-01T01:42:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/06/01/continuouos-wavelet-transform-types</id>
    <content type="html"><![CDATA[<p>「ウェーブレット変換って難しいんじゃ…マザーウェーブレット？よくわかんない…」</p>

<p>大丈夫、そんな人には以下の文献がお勧めです</p>

<p> <a href="http://paos.colorado.edu/research/wavelets/bams_79_01_0061.pdf">Torrence, C. and G.P. Compo &ldquo;A Practical Guide to Wavelet Analysis&rdquo;, Bull. Am. Meteorol. Soc., 79, 61–78, 1998.</a></p>

<p>前置きはさておき、上の文献を参考にMorlet, Paul, DOG (Derivative of Gaussian) の代表的な3つのマザーウェーブレットで音声に対してウェーブレット変換をしてみたので、メモがてら結果を貼っておく</p>

<p>図の横軸はサンプルで、縦軸は周波数Hz（対数目盛り）にした</p>

<p>マザーウェーブレットのパラメータは、Morletは $\omega_{0} = 6.0$、Paulは $M = 4$、DOGは $M = 6$</p>

<p>スケールは、min=55hzで、25cent毎に8オクターブ分取った※厳密には違うのでごめんなさい</p>

<p>分析に使った音声は、<a href="http://r9y9.github.io/blog/2013/10/21/signal-reconstruction-using-invere-cwt/">逆連続ウェーブレット変換による信号の再構成 &ndash; LESS IS MORE</a> で使ったのと同じ</p>

<h2>Morlet</h2>

<p><img class="center" src="http://r9y9.github.io/images/morlet_6.png" title="&#34;Morlet Wavelet spectrogram&#34;" alt="&#34;Morlet Wavelet spectrogram&#34;"></p>

<h2>Paul</h2>

<p><img class="center" src="http://r9y9.github.io/images/paul_4.png" title="&#34;Paul Wavelet spectrogram&#34;" alt="&#34;Paul Wavelet spectrogram&#34;"></p>

<h2>DOG</h2>

<p><img class="center" src="http://r9y9.github.io/images/dog_6.png" title="&#34;DOG Wavelet spectrogram&#34;" alt="&#34;DOG Wavelet spectrogram&#34;"></p>

<p>対数を取ると、以下のような感じ</p>

<h2>Morlet</h2>

<p><img class="center" src="http://r9y9.github.io/images/morlet_6_log.png" title="&#34;Morlet Wavelet log spectrogram&#34;" alt="&#34;Morlet Wavelet log spectrogram&#34;"></p>

<h2>Paul</h2>

<p><img class="center" src="http://r9y9.github.io/images/paul_4_log.png" title="&#34;Paul Wavelet log spectrogram&#34;" alt="&#34;Paul Wavelet log spectrogram&#34;"></p>

<h2>DOG</h2>

<p><img class="center" src="http://r9y9.github.io/images/dog_6_log.png" title="&#34;DOG Wavelet log spectrogram&#34;" alt="&#34;DOG Wavelet log spectrogram&#34;"></p>

<p>Paulは時間解像度は高いけど周波数解像度はいまいちなので、音声とかには向かないのかなー。DOGはMorletとPaulの中間くらいの位置づけの様子。DOGはorderを上げればMorletっぽくなるけど、Morletの方がやっぱ使いやすいなーという印象。</p>

<h2>スケールから周波数への変換</h2>

<p>実は今日まで知らなかったんだけど、マザーウェーブレットによっては時間領域でのスケールの逆数は必ずしも周波数領域での周波数に対応するとは限らないそう。というかずれる（詳細はPractical Guideの3.hを参照）。上で書いた厳密には違うというのは、これが理由。</p>

<p>ただし、スケールから周波数への変換はマザーウェーブレットから一意に決まるようなので、正しい周波数を求めることは可能。上に貼った図は、Practical Guideにしたがってスケールから周波数に変換している。</p>

<p>例えば、$f = \frac{1}{s}$となるようにスケールを与えていたとき、$\omega_0 = 6.0$のMorletを使ったウェーブレット変換の真の周波数は、</p>

<script type="math/tex; mode=display">
\begin{align}
f' &= \frac{\omega_0 + \sqrt{2+\omega_{0}^2}}{4\pi s} \\
&= \frac{0.96801330919}{s} \\
&= 0.96801330919f
\end{align}
</script>


<p></p>

<p>となる。
$\omega_0 = 6.0$のMorletだとスケールの逆数にほぼ一致するので今まで気づかなかった…</p>

<p>めんどくさい。これを知ってからちょっとウェーブレット嫌いになった。でもめげない</p>

<p>おわり</p>

<h2>参考</h2>

<ul>
<li><a href="http://paos.colorado.edu/research/wavelets/bams_79_01_0061.pdf">Torrence, C. and G.P. Compo &ldquo;A Practical Guide to Wavelet Analysis&rdquo;, Bull. Am. Meteorol. Soc., 79, 61–78, 1998.</a></li>
<li><a href="http://www.mark-bishop.net/signals/CWTReconstructionFactors.pdf">Continuous Wavelet Transform Reconstruction Factors for Selected Wavelets</a></li>
<li><a href="http://www.hulinks.co.jp/support/flexpro/v7/dataanalysis_cwt.html">HULINKS | テクニカルサポート | FlexPro | 連続ウェーブレット変換 (CWT)</a></li>
</ul>


<h3>前書いた記事</h3>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/">FFTを使った連続ウェーブレット変換の高速化 &ndash; LESS IS MORE</a></li>
<li><a href="http://r9y9.github.io/blog/2013/10/21/signal-reconstruction-using-invere-cwt/">逆連続ウェーブレット変換による信号の再構成 &ndash; LESS IS MORE</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PythonによるニューラルネットのToyコード]]></title>
    <link href="http://r9y9.github.io/blog/2014/05/11/python-feed-forward-neural-network-toy-code/"/>
    <updated>2014-05-11T01:20:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/05/11/python-feed-forward-neural-network-toy-code</id>
    <content type="html"><![CDATA[<p>1000番煎じだけど、知り合いにニューラルネットを教えていて、その過程で書いたコード。わかりやすさ重視。</p>

<p>このために、誤差伝播法をn回導出しました（意訳：何回もメモなくしました）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># coding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ニューラルネットワーク(Feed-Forward Neural Networks)の学習、認識の</span>
</span><span class='line'><span class="c"># デモコードです。</span>
</span><span class='line'><span class="c"># 誤差伝搬法によってニューラルネットを学習します。</span>
</span><span class='line'><span class="c"># XORの学習、テストの簡単なデモコードもついています</span>
</span><span class='line'><span class="c"># 2014/05/10 Ryuichi Yamamoto</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">sigmoid</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">dsigmoid</span><span class="p">(</span><span class="n">y</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">y</span> <span class="o">*</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="n">y</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NeuralNet</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">num_input</span><span class="p">,</span> <span class="n">num_hidden</span><span class="p">,</span> <span class="n">num_output</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        パラメータの初期化</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="c"># 入力層から隠れ層への重み行列</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">W1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="p">(</span><span class="n">num_input</span><span class="p">,</span> <span class="n">num_hidden</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">hidden_bias</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">num_hidden</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
</span><span class='line'>        <span class="c"># 隠れ層から出力層への重み行列</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">W2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="p">(</span><span class="n">num_hidden</span><span class="p">,</span> <span class="n">num_output</span><span class="p">))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">output_bias</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">(</span><span class="n">num_output</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        前向き伝搬の計算</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">h</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">W1</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">hidden_bias</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">W2</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">output_bias</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cost</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        最小化したい誤差関数</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="n">N</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>        <span class="n">E</span> <span class="o">=</span> <span class="mf">0.0</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>
</span><span class='line'>            <span class="n">y</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span> <span class="n">target</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span><span class='line'>            <span class="n">E</span> <span class="o">+=</span> <span class="n">np</span><span class="o">.</span><span class="n">sum</span><span class="p">((</span><span class="n">y</span> <span class="o">-</span> <span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">t</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">E</span> <span class="o">/</span> <span class="nb">float</span><span class="p">(</span><span class="n">N</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">train</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">epoches</span><span class="o">=</span><span class="mi">30000</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>\
</span><span class='line'>              <span class="n">monitor_period</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        Stochastic Gradient Decent (SGD) による学習</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">epoches</span><span class="p">):</span>
</span><span class='line'>            <span class="c"># 学習データから1サンプルをランダムに選ぶ</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">data</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>            <span class="n">x</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">target</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># 入力から出力まで前向きに信号を伝搬</span>
</span><span class='line'>            <span class="n">h</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">W1</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">hidden_bias</span><span class="p">)</span>
</span><span class='line'>            <span class="n">y</span> <span class="o">=</span> <span class="n">sigmoid</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">W2</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">output_bias</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># 隠れ層-&gt;出力層の重みの修正量を計算</span>
</span><span class='line'>            <span class="n">output_delta</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="n">t</span><span class="p">)</span> <span class="o">*</span> <span class="n">dsigmoid</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span><span class='line'>            <span class="n">grad_W2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">atleast_2d</span><span class="p">(</span><span class="n">h</span><span class="p">)</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">atleast_2d</span><span class="p">(</span><span class="n">output_delta</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># 隠れ層-&gt;出力層の重みを更新</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">W2</span> <span class="o">-=</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">grad_W2</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">output_bias</span> <span class="o">-=</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">output_delta</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># 入力層-&gt;隠れ層の重みの修正量を計算</span>
</span><span class='line'>            <span class="n">hidden_delta</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">W2</span><span class="p">,</span> <span class="n">output_delta</span><span class="p">)</span> <span class="o">*</span> <span class="n">dsigmoid</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
</span><span class='line'>            <span class="n">grad_W1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">dot</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">atleast_2d</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">T</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">atleast_2d</span><span class="p">(</span><span class="n">hidden_delta</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># 入力層-&gt;隠れ層の重みを更新</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">W1</span> <span class="o">-=</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">grad_W1</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">hidden_bias</span> <span class="o">-=</span> <span class="n">learning_rate</span> <span class="o">*</span> <span class="n">hidden_delta</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># 現在の目的関数の値を出力</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">monitor_period</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">epoch</span> <span class="o">%</span> <span class="n">monitor_period</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span> <span class="s">&quot;Epoch </span><span class="si">%d</span><span class="s">, Cost </span><span class="si">%f</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">epoch</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">cost</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">target</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Training finished.&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
</span><span class='line'>        <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">        出力層の最も反応するニューロンの番号を返します</span>
</span><span class='line'><span class="sd">        &quot;&quot;&quot;</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">argparse</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">&quot;Specify options&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;--epoches&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;epoches&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;--learning_rate&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;learning_rate&quot;</span><span class="p">,</span>\
</span><span class='line'>                        <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;--hidden&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;hidden&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nn</span> <span class="o">=</span> <span class="n">NeuralNet</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">hidden</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span> <span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]])</span>
</span><span class='line'>    <span class="n">target</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nn</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">target</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">epoches</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">learning_rate</span><span class="p">,</span>\
</span><span class='line'>             <span class="n">monitor_period</span><span class="o">=</span><span class="mi">1000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> : predicted </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">nn</span><span class="o">.</span><span class="n">forward</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'><span class="c"># coding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c"># MNISTを用いたニューラルネットによる手書き数字認識のデモコードです</span>
</span><span class='line'><span class="c"># 学習方法やパラメータによりますが、だいたい 90 ~ 97% くらいの精度出ます。</span>
</span><span class='line'><span class="c"># 使い方は、コードを読むか、</span>
</span><span class='line'><span class="c"># python mnist_net.py -h</span>
</span><span class='line'><span class="c"># としてください</span>
</span><span class='line'><span class="c"># 参考までに、</span>
</span><span class='line'><span class="c"># python mnist_net.py --epoches 50000 --learning_rate 0.1 --hidden 100</span>
</span><span class='line'><span class="c"># とすると、テストセットに対して、93.2%の正解率です</span>
</span><span class='line'><span class="c"># 僕の環境では、学習、認識合わせて（だいたい）5分くらいかかりました。</span>
</span><span class='line'><span class="c"># 2014/05/10 Ryuichi Yamamoto</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">sklearn.externals</span> <span class="kn">import</span> <span class="n">joblib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cPickle</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">gzip</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">os</span>
</span><span class='line'>
</span><span class='line'><span class="c"># 作成したニューラルネットのパッケージ</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">net</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">load_mnist_dataset</span><span class="p">(</span><span class="n">dataset</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    MNISTのデータセットをダウンロードします</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="c"># Download the MNIST dataset if it is not present</span>
</span><span class='line'>    <span class="n">data_dir</span><span class="p">,</span> <span class="n">data_file</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">dataset</span><span class="p">))</span> <span class="ow">and</span> <span class="n">data_file</span> <span class="o">==</span> <span class="s">&#39;mnist.pkl.gz&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="kn">import</span> <span class="nn">urllib</span>
</span><span class='line'>        <span class="n">origin</span> <span class="o">=</span> <span class="s">&#39;http://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz&#39;</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Downloading data from </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">origin</span>
</span><span class='line'>        <span class="n">urllib</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="n">dataset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">f</span> <span class="o">=</span> <span class="n">gzip</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dataset</span><span class="p">,</span> <span class="s">&#39;rb&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">train_set</span><span class="p">,</span> <span class="n">valid_set</span><span class="p">,</span> <span class="n">test_set</span> <span class="o">=</span> <span class="n">cPickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">train_set</span><span class="p">,</span> <span class="n">valid_set</span><span class="p">,</span> <span class="n">test_set</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">augument_labels</span><span class="p">(</span><span class="n">labels</span><span class="p">,</span> <span class="n">order</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">    1次元のラベルデータを、ラベルの種類数(order)次元に拡張します</span>
</span><span class='line'><span class="sd">    &quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">new_labels</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">labels</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
</span><span class='line'>        <span class="n">v</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">order</span><span class="p">)</span>
</span><span class='line'>        <span class="n">v</span><span class="p">[</span><span class="n">labels</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">new_labels</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">new_labels</span><span class="p">)</span><span class="o">.</span><span class="n">reshape</span><span class="p">((</span><span class="n">labels</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">order</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="kn">import</span> <span class="nn">argparse</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="o">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">&quot;MNIST手書き数字認識のデモ&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;--epoches&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;epoches&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;--learning_rate&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;learning_rate&quot;</span><span class="p">,</span>\
</span><span class='line'>                        <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mf">0.1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">parser</span><span class="o">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">&quot;--hidden&quot;</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="s">&quot;hidden&quot;</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="o">.</span><span class="n">parse_args</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">train_set</span><span class="p">,</span> <span class="n">valid_set</span><span class="p">,</span> <span class="n">test_set</span> <span class="o">=</span> <span class="n">load_mnist_dataset</span><span class="p">(</span><span class="s">&quot;mnist.pkl.gz&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">n_labels</span> <span class="o">=</span> <span class="mi">10</span> <span class="c"># 0,1,2,3,4,5,6,7,9</span>
</span><span class='line'>    <span class="n">n_features</span> <span class="o">=</span> <span class="mi">28</span><span class="o">*</span><span class="mi">28</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># モデルを新しく作る</span>
</span><span class='line'>    <span class="n">nn</span> <span class="o">=</span> <span class="n">net</span><span class="o">.</span><span class="n">NeuralNet</span><span class="p">(</span><span class="n">n_features</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">hidden</span><span class="p">,</span> <span class="n">n_labels</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># モデルを読み込む</span>
</span><span class='line'>    <span class="c"># nn = joblib.load(&quot;./nn_mnist.pkl&quot;)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">nn</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">train_set</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">augument_labels</span><span class="p">(</span><span class="n">train_set</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n_labels</span><span class="p">),</span>\
</span><span class='line'>             <span class="n">args</span><span class="o">.</span><span class="n">epoches</span><span class="p">,</span> <span class="n">args</span><span class="o">.</span><span class="n">learning_rate</span><span class="p">,</span> <span class="n">monitor_period</span><span class="o">=</span><span class="mi">2000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">## テスト</span>
</span><span class='line'>    <span class="n">test_data</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="n">test_set</span>
</span><span class='line'>    <span class="n">results</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test_data</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">int</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">test_data</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">results</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">nn</span><span class="o">.</span><span class="n">predict</span><span class="p">(</span><span class="n">test_data</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
</span><span class='line'>        <span class="c"># print &quot;%d : predicted %s, expected %s&quot; % (n, results[n], labels[n])</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;recognition rate: &quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">results</span> <span class="o">==</span> <span class="n">labels</span><span class="p">)</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># モデルを保存</span>
</span><span class='line'>    <span class="n">model_filename</span> <span class="o">=</span> <span class="s">&quot;nn_mnist.pkl&quot;</span>
</span><span class='line'>    <span class="n">joblib</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">nn</span><span class="p">,</span> <span class="n">model_filename</span><span class="p">,</span> <span class="n">compress</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;The model parameters are dumped to &quot;</span> <span class="o">+</span> <span class="n">model_filename</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/r9y9/python-neural-net-toy-codes">https://github.com/r9y9/python-neural-net-toy-codes</a></p>

<p>以下のようなコマンドを叩いて、正解率が97%くらいになるまで学習してから入力層から隠れ層への重みを可視化してみた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># python mnist_net.py --epoches 50000 --learning_rate 0.1 --hidden 100 # epochesは適当に</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://r9y9.github.io/images/nn_mnist_W1_100.png" title="&#34;Input to Hidden weight filters after traingned on MNIST.&#34;" alt="&#34;Input to Hidden weight filters after traingned on MNIST.&#34;"></p>

<p>興味深いことに、RBMと違って重み行列の解釈はしにくい。生成モデルの尤度を最大化することと、誤差を最小化することはこんなにも違うんだなぁというこなみな感想</p>

<p>RBMについては、以下へ</p>

<p><a href="http://r9y9.github.io/blog/2014/03/06/restricted-boltzmann-machines-mnist/">Restricted Boltzmann Machines with MNIST &ndash; LESS IS MORE</a></p>

<p>おわり</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cgo の基本的な使い方とポインタ周りのTips (Go v1.2)]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/22/cgo-tips/"/>
    <updated>2014-03-22T23:17:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/22/cgo-tips</id>
    <content type="html"><![CDATA[<p>C/C++ライブラリのGoラッパーを書くためには、cgoというパッケージを使うのだけど、特にCのポインタ周りにハマりどころが多かったので、少しまとめとく</p>

<p>cgoの基礎については、以下の二つを読むことを推奨</p>

<ul>
<li><a href="http://golang.org/cmd/cgo/">http://golang.org/cmd/cgo/</a></li>
<li><a href="https://code.google.com/p/go-wiki/wiki/cgo">https://code.google.com/p/go-wiki/wiki/cgo</a></li>
</ul>


<p>この記事では、cgo基本的な使い方と、いくつかポインタ絡みのTipsをまとめる。Tipsのみ必要な場合は、最初の方は飛ばして下さい</p>

<h2>cgo</h2>

<blockquote><p>Cgo enables the creation of Go packages that call C code.</p></blockquote>

<p><a href="http://golang.org/cmd/cgo/">http://golang.org/cmd/cgo/</a></p>

<p>cgoとは、GoからCの関数/型にアクセスするために用いるパッケージのこと。cgoを使えば、GoからCのコードが呼べる。つまり、<strong>Cで書かれたライブラリが、Goでも再利用できる</strong>。</p>

<p>なお、go v1.2 から、C++もサポートされている様子
<a href="http://golang.org/doc/go1.2#cgo_and_cpp">http://golang.org/doc/go1.2#cgo_and_cpp</a></p>

<p>ただし、C++ライブラリの使用方法については現時点でドキュメントはほぼ無し。僕の経験では、extern &ldquo;C&rdquo; を付けておくとC++用のコンパイラでコンパイルされたライブラリでも呼べる</p>

<h2>基本的な使い方</h2>

<p>まず、Cの型/関数にアクセスするために、cgoパッケージのimportを行う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>import文のすぐ上のコメントにinclude &lt;ヘッダ.h> と書けば、コンパイルする際に自動で読み込まれるので、必要なヘッダを書く</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// #include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="c1">// #include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、C.int, C.float, C.double, *C.char、C.malloc, C.free などのようにして、Cの型や関数にアクセスできる</p>

<h2>外部ライブラリを呼ぶ</h2>

<p>通常は、ヘッダファイルをincludeするだけでなく、何かしらのライブラリとリンクして用いることが多いので、そのような場合には、ライブラリの依存関係をgoのコードに記述する</p>

<p>cgoでは、includeの設定と同様に、CFLAGS、CPPFLAGS、CXXFLAGS、LDFLAGS、pkg-configを記述することができる</p>

<p>pkg-configを使うと 、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// #cgo pkg-config: png cairo</span>
</span><span class='line'><span class="c1">// #include &lt;png.h&gt;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ（<a href="http://golang.org/cmd/cgo/">Goの公式ページ</a>から参照）</p>

<h2>Tips</h2>

<p>さて、ここからTips。主に、<a href="ml.cs.yamanashi.ac.jp/world/">WORLD</a>のGoラッパーを書いていたときに得た知見です。ラッパーは、<a href="https://github.com/r9y9/go-world">Github</a>にあげた</p>

<h2>1. GoのスライスをCのポインタとして関数の引数に渡す</h2>

<p>例えば、[]float64 &ndash;> double* のイメージ</p>

<p>これは比較的簡単にできる。以前qiitaにも書いた
<a href="http://qiita.com/r9y9/items/e6d879c9b7d4f2697593">http://qiita.com/r9y9/items/e6d879c9b7d4f2697593</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">slice</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにキャストしてやればOK</p>

<h2>2. GoのスライスのスライスをCのポインタのポインタとして関数の引数に渡す</h2>

<p>[][]float64 &ndash;> double** のようなイメージ</p>

<p>例として、worldから引っ張ってきた以下のようなCの関数を考える</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">Star</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x_length</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fs</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">time_axis</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">f0</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">f0_length</span><span class="p">,</span> <span class="kt">double</span> <span class="o">**</span><span class="n">spectrogram</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>**spectrogramには処理結果が格納される。もちろん処理結果はGoの型で扱いたいんだが、では<strong>**spectrogramにどうやってGoの型を渡すか？</strong>ということが問題になる</p>

<p>doubleの二次元配列なので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">s</span> <span class="o">:=</span> <span class="p">[][]</span><span class="kt">float64</span>
</span></code></pre></td></tr></table></div></figure>


<p>というスライスのスライスを考えて、キャストして渡したいところだけど、結論から言うとこれはできない</p>

<p>ではどうするかというと、苦肉の策として、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">wspace</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>というスライスを考えて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">(</span><span class="o">**</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">wspace</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすれば、double**として関数の引数に渡すことができる。他にも方法がある気がするが、これでも期待通りの動作をする（あまりハックっぽいことしたくない…</p>

<p>まとめると、</p>

<ul>
<li>[][]float64 &ndash;> double**はできないが、</li>
<li>[]*C.double &ndash;> double**はできる。よって、一応Goの型をdouble**に渡すことはできる</li>
</ul>


<p>です。</p>

<h2>3. ポインタのポインタからスライスのスライスへの変換</h2>

<p>double** &ndash;> [][]float64 のようなイメージ</p>

<p>Tipsその2の例より、Cの関数の処理が終われば**spectrogramにデータが格納される。もちろん処理結果はGoの型で扱いたいので、[][]float64 にしたい。ただし、先程の例では、Cの関数に渡した型は実際には []*C.doubleで、Cの型を含んでいる。</p>

<p>そこで、次に問題になるのは、<strong>[]*C.doubleにから[][]float64 に変換するにはどうするか？</strong>ということ。そして、これも面倒です…（※節の頭でdouble** &ndash;> [][]float64と書いたけど、正確には []*C.double &ndash;> [][]float64）</p>

<p>結論から言えば、直接の変換は難しいけど中間変数をかませばできる</p>

<ul>
<li>[]bytes型でtmp変数を作り、<code>C.GoBytes</code> を使って*C.double &ndash;> []bytes にコピー</li>
<li>encoding/binaryパッケージを使って、[]bytes &ndash;> []float64 に書き込み</li>
<li>この処理をsliceOfSlices[0], sliceOfSlices[1], &hellip; に対して繰り返す</li>
</ul>


<p>以上。とても面倒ですね…</p>

<p>さて、結局上のStarのラッパーは以下のようになった</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Star</span><span class="p">(</span><span class="nx">x</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">fs</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">FFTSize</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">size_t</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">GetFFTSizeForStar</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">fs</span><span class="p">)))</span>
</span><span class='line'>  <span class="nx">numFreqBins</span> <span class="o">:=</span> <span class="nx">FFTSize</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create workspace</span>
</span><span class='line'>  <span class="nx">wspace</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wspace</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">wspace</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="nx">C</span><span class="p">.</span><span class="nx">malloc</span><span class="p">(</span><span class="nx">byteSizeOfFloat64</span> <span class="o">*</span> <span class="nx">numFreqBins</span><span class="p">))</span>
</span><span class='line'>      <span class="k">defer</span> <span class="nx">C</span><span class="p">.</span><span class="nx">free</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="nx">wspace</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Perform star</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">Star</span><span class="p">((</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">x</span><span class="p">)),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">fs</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">timeAxis</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">f0</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">)),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">**</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">wspace</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Copy to go slice</span>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">spectrogram</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">spectrogram</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">CArrayToGoSlice</span><span class="p">(</span><span class="nx">wspace</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">numFreqBins</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">spectrogram</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上で使っているutility function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">CArrayToGoSlice</span><span class="p">(</span><span class="nx">array</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">,</span> <span class="nx">length</span> <span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">slice</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">length</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">GoBytes</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="nx">array</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">byteSizeOfFloat64</span><span class="o">*</span><span class="nx">length</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">binary</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="nx">binary</span><span class="p">.</span><span class="nx">LittleEndian</span><span class="p">,</span> <span class="nx">slice</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">slice</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[]*C.double のスライスを作り、作業領域のメモリを確保する（Tips2の内容+メモリ確保）</li>
<li>[]*C.double のスライスをdouble** にキャストして、Cの関数を実行（Tips2の内容）</li>
<li>[]*C.double から[][]float64に変換する（Tips3の内容）</li>
</ul>


<p>という手順になってます</p>

<p><strong>※2013/03/27 追記</strong>
:もっとシンプルかつ効率的（deep copyの必要がないように）に書けた。[][]float64で返り値用のスライスを作り、それを[]<em>double型に変換してCに渡せば、[][]float64に変更が反映されるので、そもそも[]</em>doubleから[][]float64に変換する必要はなかった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Star</span><span class="p">(</span><span class="nx">x</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">fs</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">FFTSize</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">size_t</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">GetFFTSizeForStar</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">fs</span><span class="p">)))</span>
</span><span class='line'>  <span class="nx">numFreqBins</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">size_t</span><span class="p">(</span><span class="nx">FFTSize</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">spectrogram</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">spectrogram</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">numFreqBins</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">spectrogramUsedInC</span> <span class="o">:=</span> <span class="nx">Make2DCArrayAlternative</span><span class="p">(</span><span class="nx">spectrogram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Perform star</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">Star</span><span class="p">((</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">x</span><span class="p">)),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">fs</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">timeAxis</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">f0</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">)),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">**</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">spectrogramUsedInC</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">spectrogram</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Make2DCArrayAlternative</span><span class="p">(</span><span class="nx">matrix</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">[]</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alternative</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">matrix</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">alternative</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// DO NOT free because the source slice is managed by Go</span>
</span><span class='line'>      <span class="nx">alternative</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">alternative</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわりに</h2>

<ul>
<li>ポインタのポインタを引数に取る関数のラップはめんどくさい</li>
<li>Goは使いやすいのにcgoは使いにくい</li>
<li>cgoつらい</li>
<li>よりいい方法があれば教えて下さい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音声分析変換合成システムWORLDのGoラッパーを書いた]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/22/go-world/"/>
    <updated>2014-03-22T18:28:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/22/go-world</id>
    <content type="html"><![CDATA[<h2>音声分析変換合成システムWORLD</h2>

<p>WORLDとは、山梨大学の森勢先生が作られている高品質な音声分析変換合成システムです。非常に高品質かつ高速に動作するのが良い所です。詳細は以下のURLへ</p>

<p><a href="http://ml.cs.yamanashi.ac.jp/world/">http://ml.cs.yamanashi.ac.jp/world/</a></p>

<p>オリジナルはC+＋で書かれていますが、Goからも使えるようにラッパーを書きました。非常にいいソフトウェアなので、もしよろしければどうぞ</p>

<h2>GO-WORLD</h2>

<p><a href="https://github.com/r9y9/go-world">https://github.com/r9y9/go-world</a></p>

<p>使い方について、ほんの少し解説を書きます</p>

<p>※ubuntu12.04でのみ動作確認してます。</p>

<h2>準備</h2>

<h3>1. WORLDのインストール</h3>

<p>まずWORLDをインストールする必要があります。公式のパッケージではinstallerに相当するものがなかったので、作りました</p>

<p><a href="https://github.com/r9y9/world">https://github.com/r9y9/world</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> ./waf configure <span class="o">&amp;&amp;</span> ./waf
</span><span class='line'> sudo ./waf install
</span></code></pre></td></tr></table></div></figure>


<p>でインストールできます。</p>

<p>なお、WORLDは最新版ではなく0.1.2としています。最新版にすると自分の環境でビルドコケてしまったので…</p>

<h3>2. GO-WORLDのインストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go get github.com/r9y9/go-world
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね！</p>

<h2>使い方</h2>

<h3>1. インポートする</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="s">&quot;github.com/r9y9/go-world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. worldのインスタンスを作る</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">w</span> <span class="o">:=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">,</span> <span class="nx">framePeriod</span><span class="p">)</span> <span class="c1">// e.g. (44100, 5)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 好きなworldのメソッドを呼ぶ</h3>

<h4>基本周波数の推定: Dio</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Dio</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">NewDioOption</span><span class="p">())</span> <span class="c1">// default option is used</span>
</span></code></pre></td></tr></table></div></figure>


<h4>スペクトル包絡の推定: Star</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Star</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>励起信号の推定: Platinum</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">residual</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Platinum</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>パラメータから音声の再合成: Synthesis</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">synthesized</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Synthesis</span><span class="p">(</span><span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">,</span> <span class="nx">residual</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使い方例.</h2>

<p>音声（wavファイル）を分析して、パラメータから音声を再合成する例を紹介します。80行弱と少し長いですがはっつけておきます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;flag&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/mjibson/go-dsp/wav&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/go-world&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">defaultDioOption</span> <span class="p">=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">DioOption</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">F0Floor</span><span class="p">:</span>          <span class="mf">80.0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">F0Ceil</span><span class="p">:</span>           <span class="mf">640.0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">FramePeriod</span><span class="p">:</span>      <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">ChannelsInOctave</span><span class="p">:</span> <span class="mf">4.0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Speed</span><span class="p">:</span>            <span class="mi">6</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 音声を基本周波数、スペクトル包絡、励起信号の三つに分解したあと、再合成します</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">worldExample</span><span class="p">(</span><span class="nx">input</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">sampleRate</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span> <span class="o">:=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">,</span> <span class="nx">defaultDioOption</span><span class="p">.</span><span class="nx">FramePeriod</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1. Fundamental frequency</span>
</span><span class='line'>  <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Dio</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">defaultDioOption</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. Spectral envelope</span>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Star</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3. Excitation spectrum</span>
</span><span class='line'>  <span class="nx">residual</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Platinum</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4. Synthesis</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Synthesis</span><span class="p">(</span><span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">,</span> <span class="nx">residual</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 音声を基本周波数、スペクトル包絡、非周期成分の三つに分解したあと、再合成します</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">worldExampleAp</span><span class="p">(</span><span class="nx">input</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">sampleRate</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span> <span class="o">:=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">,</span> <span class="nx">defaultDioOption</span><span class="p">.</span><span class="nx">FramePeriod</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1. Fundamental frequency</span>
</span><span class='line'>  <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Dio</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">defaultDioOption</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. Spectral envelope</span>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Star</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3. Apiriodiciy</span>
</span><span class='line'>  <span class="nx">apiriodicity</span><span class="p">,</span> <span class="nx">targetF0</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">AperiodicityRatio</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">f0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4. Synthesis</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nx">SynthesisFromAperiodicity</span><span class="p">(</span><span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">,</span> <span class="nx">apiriodicity</span><span class="p">,</span> <span class="nx">targetF0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GetMonoDataFromWavData</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">val</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ifilename</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">String</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="s">&quot;default.wav&quot;</span><span class="p">,</span> <span class="s">&quot;Input filename&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Read wav data</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="o">*</span><span class="nx">ifilename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">w</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">wav</span><span class="p">.</span><span class="nx">ReadWav</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">werr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">input</span> <span class="o">:=</span> <span class="nx">GetMonoDataFromWavData</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">Data</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">sampleRate</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">SampleRate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">synthesized</span> <span class="o">:=</span> <span class="nx">worldExample</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">sampleRate</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// synthesized := worldExampleAp(input, sampleRate)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">synthesized</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Goだとメモリ管理きにしなくていいしそこそこ速いし読みやすいし書きやすいし楽でいいですね（信者</p>

<h2>おわりに</h2>

<ul>
<li>GoはC++ほど速くはないですが、C++の何倍も書きやすいし読みやすい（メンテしやすい）ので、個人的にオススメです（パフォーマンスが厳しく要求される場合には、C++の方がいいかもしれません）</li>
<li>WORLD良いソフトウェアなので使いましょう</li>
</ul>


<h2>ちなみに</h2>

<p>元はと言えば、オレオレ基本周波数推定（YINもどき）が微妙に精度悪くて代替を探していたとき、</p>

<ul>
<li>SPTKのRAPTかSWIPE使おうかな…</li>
<li>RAPTもSWIPEもSPTK.hにインタフェースがない…</li>
<li>うわRAPTのコード意味わからん</li>
<li>SWIPEのコードまじ謎</li>
<li>後藤さんのPreFest実装しよう</li>
<li>あれ上手くいかない…orz</li>
<li>どうしようかな…</li>
</ul>


<p>となっていたときに、森勢先生が書いたと思われる以下の文献を見つけて、</p>

<p><a href="http://crestmuse.jp/handbookMI/pdf/2_2_PitchExtraction_Morise.pdf">2-2 基本周波数推定（歌声研究に関する視点から）</a></p>

<blockquote><p>本方法は，低域に雑音が存在する音声に対する推定は困難であるが，低域の雑音が存在しない音声の場合，SWIPE′ や NDF と実質的に同等の性能を達成しつつ，計算時間を SWIPE′の 1/42, NDF の 1/80 にまで低減可能である．</p></blockquote>

<p>あぁworld使おう（白目</p>

<p>となり、ラッパーを書くにいたりましたとさ、おしまい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restricted Boltzmann Machines with MNIST]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/06/restricted-boltzmann-machines-mnist/"/>
    <updated>2014-03-06T23:29:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/06/restricted-boltzmann-machines-mnist</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/RBM_mnist_Hidden_500_layers.png" title="&#34;RBM training result on MNIST handwritten digit dataset. Each image represents a filter learned by RBM.&#34;" alt="&#34;RBM training result on MNIST handwritten digit dataset. Each image represents a filter learned by RBM.&#34;"></p>

<p>ディープ某を使った研究を再現してみたくて、最近某ニューラルネットに手を出し始めた。で、手始めにRestricted Boltzmann Machinesを実装してみたので、</p>

<ul>
<li>MNISTを使って学習した結果の重み（22*22=484個）を貼っとく（↑）</li>
<li>得た知見をまとめとく</li>
<li>Goのコード貼っとく</li>
</ul>


<p>ってな感じで書いておく</p>

<p>(本当はRBMについて自分なりの解釈を書こうと思ったのだけど、それはまた今度)</p>

<h2>実験条件</h2>

<p>データベースはmnist。手書き数字認識で有名なアレ。学習の条件は、</p>

<ul>
<li>隠れ層のユニット数: 500</li>
<li>mini-batch size: 20</li>
<li>iterationの回数: 15</li>
</ul>


<h2>対数尤度の変化</h2>

<p><img class="center" src="http://r9y9.github.io/images/RBM_mnist_Hidden_500_log_likelihood.png" title="&#34;Pseudo log-likelihood on mnist databae.&#34;" alt="&#34;Pseudo log-likelihood on mnist databae.&#34;"></p>

<p>以下グラフに表示している生データ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 -196.59046099622128
</span><span class='line'>1 -70.31708616742365
</span><span class='line'>2 -65.29499371647965
</span><span class='line'>3 -62.37983267378022
</span><span class='line'>4 -61.5359019358253
</span><span class='line'>5 -60.917772257650164
</span><span class='line'>6 -59.64207778426757
</span><span class='line'>7 -59.42201674307857
</span><span class='line'>8 -59.18497336138633
</span><span class='line'>9 -58.277168243126305
</span><span class='line'>10 -58.36279288392401
</span><span class='line'>11 -58.57805165724595
</span><span class='line'>12 -57.71043215987184
</span><span class='line'>13 -58.17783142034138
</span><span class='line'>14 -57.53629129936344</span></code></pre></td></tr></table></div></figure>


<p>尤度上がると安心する。厳密に対数尤度を計算することは難しいので、<a href="http://deeplearning.net/tutorial/rbm.html">Restricted Boltzmann Machines (RBM) | DeepLearning Tutorial</a> にある擬似尤度を参考にした</p>

<h2>学習時間</h2>

<p>うちのcore2duoのPCで4時間弱だった気がする（うろ覚え</p>

<p>隠れ層のユニット数100だと、40分ほどだった</p>

<h2>知見</h2>

<p>今の所、試行錯誤して自分が得た知見は、</p>

<ul>
<li>sample by sampleのSGDよりmini-batch SGDの方が安定して尤度上がる</li>
<li>mini-batch sizeを大きくしすぎると学習が進まない。20くらいがちょうど良かった</li>
<li>k-CD のkを大きくしてもさほど学習結果変わらない（計算コストはけっこう増すけど）</li>
<li>persistent CDを使ってもあまりよくならない（計算コストはけっこう増すけど）</li>
<li>やっぱ1-CDで十分だった</li>
<li>データの正規化方法によって結構結果も変わる。ノイズを足すかどうか、とか</li>
<li>学習率超重要すぎわろた。今回の場合は0.1くらいかちょうど良かった</li>
<li>隠れ層のユニット数が大きいほど学習が上手く行けばと尤度は上がる(?)</li>
</ul>


<p>まぁだいたい <a href="http://www.cs.toronto.edu/~hinton/absps/guideTR.pdf">A Practical Guide to Training Restricted Boltzmann Machines (PDF)</a> に書いてあるけど、実際に肌で感じて理解した。persistent CDはもうちょっと成果出て欲しい。データ変えると成果出るんかな？</p>

<h2>コード</h2>

<p>コアの部分だけ、一応</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">rbm</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;errors&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/nn&quot;</span> <span class="c1">// sigmoid, matrix</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'>  <span class="s">&quot;math/rand&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// References:</span>
</span><span class='line'><span class="c1">// [1] G. Hinton, &quot;A Practical Guide to Training Restricted Boltzmann Machines&quot;,</span>
</span><span class='line'><span class="c1">// UTML TR 2010-003.</span>
</span><span class='line'><span class="c1">// url: http://www.cs.toronto.edu/~hinton/absps/guideTR.pdf</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// [2] A. Fischer and C. Igel. &quot;An introduction to restricted Boltzmann machines&quot;,</span>
</span><span class='line'><span class="c1">// Proc. of the 17th Iberoamerican Congress on Pattern Recognition (CIARP),</span>
</span><span class='line'><span class="c1">// Volume 7441 of LNCS, pages 14–36. Springer, 2012</span>
</span><span class='line'><span class="c1">// url: http://image.diku.dk/igel/paper/AItRBM-proof.pdf</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// [3] Restricted Boltzmann Machines (RBM),  DeepLearning tutorial</span>
</span><span class='line'><span class="c1">// url: http://deeplearning.net/tutorial/rbm.html</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notes about implementation:</span>
</span><span class='line'><span class="c1">// Notation used in this code basically follows [2].</span>
</span><span class='line'><span class="c1">// e.g. W for weight, B for bias of visible layer, C for bias of hidden layer.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Graphical representation of Restricted Boltzmann Machines (RBM).</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//     ○ ○ .... ○  h(hidden layer), c(bias)</span>
</span><span class='line'><span class="c1">//     /\ /\ /    /\</span>
</span><span class='line'><span class="c1">//    ○ ○ ○ ... ○ v(visible layer), b(bias)</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">RBM</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">W</span>               <span class="p">[][]</span><span class="kt">float64</span> <span class="c1">// Weight</span>
</span><span class='line'>  <span class="nx">B</span>               <span class="p">[]</span><span class="kt">float64</span>   <span class="c1">// Bias of visible layer</span>
</span><span class='line'>  <span class="nx">C</span>               <span class="p">[]</span><span class="kt">float64</span>   <span class="c1">// Bias of hidden layer</span>
</span><span class='line'>  <span class="nx">NumHiddenUnits</span>  <span class="kt">int</span>
</span><span class='line'>  <span class="nx">NumVisibleUnits</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">Option</span>          <span class="nx">TrainingOption</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">TrainingOption</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">LearningRate</span>        <span class="kt">float64</span>
</span><span class='line'>  <span class="nx">OrderOfGibbsSamping</span> <span class="kt">int</span> <span class="c1">// It is known that 1 is enough for many cases.</span>
</span><span class='line'>  <span class="nx">Epoches</span>             <span class="kt">int</span>
</span><span class='line'>  <span class="nx">MiniBatchSize</span>       <span class="kt">int</span>
</span><span class='line'>  <span class="nx">L2Regularization</span>    <span class="kt">bool</span>
</span><span class='line'>  <span class="nx">RegularizationRate</span>  <span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NewRBM creates new RBM instance. It requires input data and number of</span>
</span><span class='line'><span class="c1">// hidden units to initialize RBM.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewRBM</span><span class="p">(</span><span class="nx">numVisibleUnits</span><span class="p">,</span> <span class="nx">numHiddenUnits</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">RBM</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rbm</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">RBM</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rand</span><span class="p">.</span><span class="nx">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span> <span class="p">=</span> <span class="nx">nn</span><span class="p">.</span><span class="nx">MakeMatrix</span><span class="p">(</span><span class="nx">numHiddenUnits</span><span class="p">,</span> <span class="nx">numVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">numVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">numHiddenUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span> <span class="p">=</span> <span class="nx">numVisibleUnits</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span> <span class="p">=</span> <span class="nx">numHiddenUnits</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">InitRBM</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rbm</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NewRBMWithParameters returns RBM instance given RBM parameters.</span>
</span><span class='line'><span class="c1">// This func will be used in Deep Belief Networks.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewRBMWithParameters</span><span class="p">(</span><span class="nx">W</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">B</span><span class="p">,</span> <span class="nx">C</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">RBM</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rbm</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">RBM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">B</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">C</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">W</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span> <span class="o">||</span> <span class="nb">len</span><span class="p">(</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">!=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Shape of weight matrix is wrong.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rand</span><span class="p">.</span><span class="nx">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span> <span class="p">=</span> <span class="nx">W</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span> <span class="p">=</span> <span class="nx">B</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span> <span class="p">=</span> <span class="nx">C</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rbm</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// LoadRBM loads RBM from a dump file and return its instatnce.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">LoadRBM</span><span class="p">(</span><span class="nx">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">RBM</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">RBM</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">rbm</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rbm</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Dump writes RBM parameters to file in json format.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">Dump</span><span class="p">(</span><span class="nx">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">encoder</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">encoder</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">rbm</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Heuristic initialization of visible bias.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">InitVisibleBiasUsingTrainingData</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Init B (bias of visible layer)</span>
</span><span class='line'>  <span class="nx">activeRateInVisibleLayer</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">getActiveRateInVisibleLayer</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">activeRateInVisibleLayer</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="nx">activeRateInVisibleLayer</span><span class="p">[</span><span class="nx">j</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">getActiveRateInVisibleLayer</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rate</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">sample</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">rate</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">sample</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">rate</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rate</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">/=</span> <span class="nb">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rate</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// InitRBM performes a heuristic parameter initialization.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">InitRBM</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Init W</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.01</span> <span class="o">*</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">NormFloat64</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Init C (bias of hidden layer)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// P_H_Given_V returns the conditinal probability of a hidden unit given a set of visible units.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">P_H_Given_V</span><span class="p">(</span><span class="nx">hiddenIndex</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">v</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sum</span> <span class="o">:=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">hiddenIndex</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">*</span> <span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">nn</span><span class="p">.</span><span class="nx">Sigmoid</span><span class="p">(</span><span class="nx">sum</span> <span class="o">+</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span><span class="p">[</span><span class="nx">hiddenIndex</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// P_V_Given_H returns the conditinal probability of a visible unit given a set of hidden units.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">P_V_Given_H</span><span class="p">(</span><span class="nx">visibleIndex</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">h</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sum</span> <span class="o">:=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">visibleIndex</span><span class="p">]</span> <span class="o">*</span> <span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">nn</span><span class="p">.</span><span class="nx">Sigmoid</span><span class="p">(</span><span class="nx">sum</span> <span class="o">+</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">visibleIndex</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GibbsSampling performs k-Gibbs sampling algorithm,</span>
</span><span class='line'><span class="c1">// where k is the number of iterations in gibbs sampling.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">GibbsSampling</span><span class="p">(</span><span class="nx">v</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">k</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Initial value is set to input</span>
</span><span class='line'>  <span class="nx">vUsedInSamping</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
</span><span class='line'>  <span class="nb">copy</span><span class="p">(</span><span class="nx">vUsedInSamping</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">t</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">t</span> <span class="p">&lt;</span> <span class="nx">k</span><span class="p">;</span> <span class="nx">t</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sampledH</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">P_H_Given_V</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">vUsedInSamping</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">p</span> <span class="p">&gt;</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Float64</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">sampledH</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="mf">1.0</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">sampledH</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.0</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">P_V_Given_H</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="nx">sampledH</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">p</span> <span class="p">&gt;</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Float64</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">vUsedInSamping</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mf">1.0</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">vUsedInSamping</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.0</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">vUsedInSamping</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">flip</span><span class="p">(</span><span class="nx">x</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">bit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">x</span><span class="p">))</span>
</span><span class='line'>  <span class="nb">copy</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">y</span><span class="p">[</span><span class="nx">bit</span><span class="p">]</span> <span class="p">=</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="nx">x</span><span class="p">[</span><span class="nx">bit</span><span class="p">]</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// FreeEnergy returns F(v), the free energy of RBM given a visible vector v.</span>
</span><span class='line'><span class="c1">// refs: eq. (25) in [1].</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">FreeEnergy</span><span class="p">(</span><span class="nx">v</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">energy</span> <span class="o">:=</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">energy</span> <span class="o">-=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">*</span> <span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">*</span> <span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">energy</span> <span class="o">-=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Exp</span><span class="p">(</span><span class="nx">sum</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">energy</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// PseudoLogLikelihood returns pseudo log-likelihood for a given input data.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">PseudoLogLikelihood</span><span class="p">(</span><span class="nx">v</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bitIndex</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Int</span><span class="p">()</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fe</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">FreeEnergy</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">feFlip</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">FreeEnergy</span><span class="p">(</span><span class="nx">flip</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">bitIndex</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">cost</span> <span class="o">:=</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">)</span> <span class="o">*</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">nn</span><span class="p">.</span><span class="nx">Sigmoid</span><span class="p">(</span><span class="nx">feFlip</span><span class="o">-</span><span class="nx">fe</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cost</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// PseudoLogLikelihood returns pseudo log-likelihood for a given dataset (or mini-batch).</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">PseudoLogLikelihoodForAllData</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sum</span> <span class="o">:=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">PseudoLogLikelihood</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">cost</span> <span class="o">:=</span> <span class="nx">sum</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cost</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ComputeGradient returns gradients of RBM parameters for a given (mini-batch) dataset.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">ComputeGradient</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">([][]</span><span class="kt">float64</span><span class="p">,</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gradW</span> <span class="o">:=</span> <span class="nx">nn</span><span class="p">.</span><span class="nx">MakeMatrix</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">gradB</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">gradC</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Gibbs Sampling</span>
</span><span class='line'>      <span class="nx">gibbsStart</span> <span class="o">:=</span> <span class="nx">v</span>
</span><span class='line'>      <span class="nx">vAfterSamping</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">GibbsSampling</span><span class="p">(</span><span class="nx">gibbsStart</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">OrderOfGibbsSamping</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// pre-computation that is used in gradient computation</span>
</span><span class='line'>      <span class="nx">p_h_given_v1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">p_h_given_v2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p_h_given_v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">P_H_Given_V</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">p_h_given_v2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">P_H_Given_V</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">vAfterSamping</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Gompute gradient of W</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">gradW</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">p_h_given_v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">-</span> <span class="nx">p_h_given_v2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="nx">vAfterSamping</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Gompute gradient of B</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">gradB</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">-</span> <span class="nx">vAfterSamping</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Gompute gradient of C</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">gradC</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">p_h_given_v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">p_h_given_v2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gradW</span><span class="p">,</span> <span class="nx">gradB</span><span class="p">,</span> <span class="nx">gradC</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">ParseTrainingOption</span><span class="p">(</span><span class="nx">option</span> <span class="nx">TrainingOption</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span> <span class="p">=</span> <span class="nx">option</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Number of mini-batchs must be larger than zero.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">Epoches</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Epoches must be larger than zero.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">OrderOfGibbsSamping</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Order of Gibbs sampling must be larger than zero.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">LearningRate</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Learning rate must be specified to train RBMs.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Train performs Contrastive divergense learning algorithm to train RBM.</span>
</span><span class='line'><span class="c1">// The alrogithm is basedd on (mini-batch) Stochastic Gradient Ascent.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">Train</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">option</span> <span class="nx">TrainingOption</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">ParseTrainingOption</span><span class="p">(</span><span class="nx">option</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">numMiniBatches</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">/</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">epoch</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">epoch</span> <span class="p">&lt;</span> <span class="nx">option</span><span class="p">.</span><span class="nx">Epoches</span><span class="p">;</span> <span class="nx">epoch</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Monitoring</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">epoch</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">PseudoLogLikelihoodForAllData</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="nx">m</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">m</span> <span class="p">&lt;</span> <span class="nx">numMiniBatches</span><span class="p">;</span> <span class="nx">m</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Compute Gradient</span>
</span><span class='line'>          <span class="nx">batch</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">m</span><span class="o">*</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span> <span class="p">:</span> <span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span><span class="p">]</span>
</span><span class='line'>          <span class="nx">gradW</span><span class="p">,</span> <span class="nx">gradB</span><span class="p">,</span> <span class="nx">gradC</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">ComputeGradient</span><span class="p">(</span><span class="nx">batch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Update W</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">LearningRate</span> <span class="o">*</span> <span class="nx">gradW</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">L2Regularization</span> <span class="p">{</span>
</span><span class='line'>                      <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">*=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">RegularizationRate</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Update B</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">LearningRate</span> <span class="o">*</span> <span class="nx">gradB</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Update C</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">LearningRate</span> <span class="o">*</span> <span class="nx">gradC</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方とかは察して（どうせ誰も使わないはず</p>

<p>今は、通常のRBMのvisible layerを連続値に拡張した Gaussian Bernoulli RBMを学習しようとしてるんだけど、これがムズイ。実装ミスもあるかもだけど、局所解に落ちまくってる気がする。</p>

<p>Gaussian Bernoulli RBM、Deep Belief Networks, Deep Neural Networksについてはまた今度</p>

<p>2014/05/11
要望があったので、もろもろコードあげました
<a href="https://github.com/r9y9/nnet">https://github.com/r9y9/nnet</a></p>

<h2>参考資料</h2>

<ul>
<li><a href="http://image.diku.dk/igel/paper/AItRBM-proof.pdf">An Introduction to Restricted Boltzmann Machines (PDF)</a></li>
<li><a href="http://www.cs.toronto.edu/~hinton/absps/guideTR.pdf">A Practical Guide to Training Restricted Boltzmann Machines (PDF)</a></li>
<li><a href="http://mglab.blogspot.jp/2012/08/restricted-boltzmann-machine.html">Restricted Boltzmann Machineの学習手法についての簡単なまとめ | 映像奮闘記</a></li>
<li><a href="http://d.hatena.ne.jp/saket/20121212">ゆるふわ Restricted Boltzmann Machine | Risky Dune</a></li>
<li><a href="http://deeplearning.net/tutorial/rbm.html">Restricted Boltzmann Machines (RBM) | DeepLearning Tutorial</a></li>
<li><a href="http://imonad.com/rbm/restricted-boltzmann-machine/">Restricted Boltzmann Machine &ndash; Short Tutorial | iMonad</a></li>
<li><a href="http://scikit-learn.org/stable/auto_examples/plot_rbm_logistic_classification.html">Restricted Boltzmann Machine features for digit classification | scikit-learn</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マルコフ確率場 (MRF) と条件付き確率場 (CRF) の違い]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/01/difference-between-mrf-and-crf/"/>
    <updated>2014-03-01T22:06:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/01/difference-between-mrf-and-crf</id>
    <content type="html"><![CDATA[<p>一番の違いは、生成モデルか識別モデルか、ということ。それぞれ、</p>

<ul>
<li>Markov Random Fields (MRF) は生成モデル</li>
<li>Conditional Random Fields (CRF) は識別モデル</li>
</ul>


<p>です。</p>

<ul>
<li><a href="http://metaoptimize.com/qa/questions/4021/what-is-exactly-the-difference-between-mrf-and-crf">What is exactly the difference between MRF and CRF</a></li>
</ul>


<p>ここを見ると割とすっきりする。</p>

<p>ただ、少しスムーズに納得できないことがありまして…それは、MRFもCRFもグラフィカルモデルで書くと無向グラフとなること。識別モデルは無向グラフで生成モデルは有向グラフなんじゃ…？と思ってしまう人もいるんじゃないかと思う（いなかったらごめんなさい）。</p>

<h2>グラフィカルモデルとしての表現</h2>

<p>一般に、生成モデルは有向グラフの形で記述され、識別モデルは無向グラフとして記述される。例えば、隠れマルコフモデル (HMM) は有向グラフで、条件付き確率場 (CRF) は無向グラフで表される。図を貼っておく</p>

<p><img class="center" src="http://r9y9.github.io/images/HMM_and_CRF.png"></p>

<p>その道の人には、馴染みのある図だと思う（ｼｭｳﾛﾝから引っ張ってきた）。グレーの○が観測変数、白い○が隠れ変数です</p>

<p>ここで重要なのは、例外もあるということ。具体的には、タイトルにあるMRFは生成モデルだけど無向グラフで書かれる。MRFというと、例えばRestricted Boltzmann Machine とかね！</p>

<p>単純なことだけど、これを知らないとMRFについて学習するときにつっかかってしまうので注意</p>

<p><a href="http://homepages.inf.ed.ac.uk/csutton/publications/crftut-fnt.pdf">An Introduction to Conditional Random Fields</a> の2.2 Generative versus Discriminative Models から引用すると、</p>

<blockquote><p>Because a generative model takes the form p(y,x) = p(y)p(x|y), it is often natural to represent a generative model by a directed graph in which in outputs y topologically precede the inputs. Similarly, we will see that it is often natural to represent a discriminative model by a undirected graph. However, this need not always be the case, and both undirected generative models, such as the Markov random ﬁeld (2.32), and directed discriminative models, such as the MEMM (6.2), are sometimes used. It can also be useful to depict discriminative models by directed graphs in which the x precede the y.</p></blockquote>

<p>らしいです</p>

<h2>結論</h2>

<ul>
<li>生成モデル＝有向グラフ、識別モデル＝無向グラフで<strong>表されるとは限らない</strong></li>
<li>ことMRFに関して言えば生成モデルだけど無向グラフで表されるよ</li>
</ul>


<p>ということです</p>

<p>さらに言えば、MRFとCRFはグラフィカルモデルでは同じように書けてしまうけれど、両者には明確な違いがあることに気をつけましょう、ということです（ちょっと自信ない）</p>

<p>間違っていたら教えて下さい</p>

<h2>参考</h2>

<ul>
<li><a href="http://metaoptimize.com/qa/questions/4021/what-is-exactly-the-difference-between-mrf-and-crf">What is exactly the difference between MRF and CRF</a></li>
<li><a href="http://homepages.inf.ed.ac.uk/csutton/publications/crftut-fnt.pdf">An Introduction to Conditional Random Fields (PDF)</a></li>
<li><a href="http://www.cs.helsinki.fi/group/cosco/Teaching/Probability/2010/lecture5_MRF2.pdf">More about Undirected Graphical Models</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goで音声信号処理をしたいのでSPTKのGoラッパーを書く]]></title>
    <link href="http://r9y9.github.io/blog/2014/02/10/sptk-go-wrapper/"/>
    <updated>2014-02-10T02:33:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/02/10/sptk-go-wrapper</id>
    <content type="html"><![CDATA[<p>2014/07/22 追記：<br/>
パッケージの一部として書きました（<a href="http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go/">GOSSP &ndash; Go言語で音声信号処理 &ndash; LESS IS MORE</a>を参照）。
SPTKのラップも含め、いくつかGoで信号処理アルゴリズムを実装したので、お求めの方はどうぞ</p>

<p>&mdash;</p>

<p>Goが最近オススメです（n度目</p>

<p>Goで音声信号処理をしたいけど、全部一から書くのは大変だし、既存の資産は出来るだけ再利用したい。というわけで、C言語製の<a href="http://sp-tk.sourceforge.net/">SPTK</a> をGoから使えるようにする</p>

<h2>cgo</h2>

<p>GoにはC言語のライブラリを使うには、cgoというパッケージを使えばできる。使い方は、公式のページ等を見るといいと思う <a href="http://golang.org/cmd/cgo/">http://golang.org/cmd/cgo/</a></p>

<p>Cの関数や変数などには、 <code>C.</code> でアクセスできる</p>

<h2>ラッパー</h2>

<p>例えば以下のように書く。MFCCの計算を例に上げる。必要に応じで<code>SPTK.h</code>に定義されている関数をラップする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">sptk</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// #cgo pkg-config: SPTK</span>
</span><span class='line'><span class="c1">// #include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="c1">// #include &lt;SPTK/SPTK.h&gt;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">MFCC</span><span class="p">(</span><span class="nx">audioBuffer</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">sampleRate</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">alpha</span><span class="p">,</span> <span class="nx">eps</span> <span class="kt">float64</span><span class="p">,</span> <span class="nx">wlng</span><span class="p">,</span> <span class="nx">flng</span><span class="p">,</span> <span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">ceplift</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">dftmode</span><span class="p">,</span> <span class="nx">usehamming</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Convert go bool to C.Boolean (so annoying..</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dftmodeInGo</span><span class="p">,</span> <span class="nx">usehammingInGo</span> <span class="nx">C</span><span class="p">.</span><span class="nx">Boolean</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">dftmode</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dftmodeInGo</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dftmodeInGo</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">usehamming</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">usehammingInGo</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">usehammingInGo</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">resultBuffer</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">mfcc</span><span class="p">((</span><span class="o">*</span><span class="nx">_Ctype_double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">audioBuffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="p">(</span><span class="o">*</span><span class="nx">_Ctype_double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">resultBuffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">(</span><span class="nx">alpha</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">(</span><span class="nx">eps</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">wlng</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">flng</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">ceplift</span><span class="p">),</span> <span class="nx">dftmodeInGo</span><span class="p">,</span> <span class="nx">usehammingInGo</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">resultBuffer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このパッケージを使う前に、 <a href="https://github.com/r9y9/SPTK">https://github.com/r9y9/SPTK</a> を使ってSPTKをインストールする。本家のを使ってもいいですが、その場合は #cgo の設定が変わると思います。公式のSPTK、pkg-configに対応してくれんかな…</p>

<p>最初は、LDFLAGS つけ忘れてて、symbol not foundってなってつらまった。次回から気をつけよう</p>

<p>SPTKの、特に（メル）ケプストラム分析当たりは本当に難しいので、論文読んで実装するのも大変だし中身がわからなくてもラップする方が合理的、という結論に至りました。簡単なもの（例えば、メルケプからMLSA filterの係数への変換とか）は、依存関係を少なくするためにもGo nativeで書きなおした方がいいです</p>

<p>コードは気が向いたら上げる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発に使える単体テスト・結合テストのツール]]></title>
    <link href="http://r9y9.github.io/blog/2014/02/04/ios-testing-tools/"/>
    <updated>2014-02-04T00:29:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/02/04/ios-testing-tools</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<p>結局どれがいいのか？時と場合によるが、自分の場合、以下の二つを使うのがベストではないかと考えた</p>

<ul>
<li><a href="https://github.com/allending/Kiwi">Kiwi</a> (単体テスト用)</li>
<li><a href="https://github.com/kif-framework/KIF">KIF</a> (UI周りの結合テスト用)</li>
</ul>


<p>追記
unit testに関しては以下の記事がよくまとまっているので、そちらを参照した方が良いです
<a href="http://magneticbear.com/lab/ios-unit-testing/">http://magneticbear.com/lab/ios-unit-testing/</a></p>

<h1>Why so?</h1>

<h2>単体テスト</h2>

<p>代表的なツールににApple製のSenTestingやXCTestがある。が、SenTestingはXcode 5に上がってからXcodeのデフォルトがXCTestになったので、新しいアプリではあえてSenTestingを使う必要はない（ちなみにSentTestingからXCTestへの変更は容易）。</p>

<p>KiwiかXCTestか、といった問題は、正直人によると思うが、RSpecに慣れてる人はKiwiのが使いやすいと思う。XCTestはデフォでサポートされているし使いやすいというメリットはあるが、Kiwiは<a href="https://github.com/allending/Kiwi/wiki/Asynchronous-Testing">Asynchronous Testing</a> をデフォでサポートしてるというメリットもあるので、個人的にはKiwiを選択した。XCTestとかSenTestingでもAsynchronus testingは可能だけど若干めんどいし、非同期処理のテストのしやすさはやはり重要</p>

<h2>結合テスト</h2>

<p><a href="http://qiita.com/hirayaCM/items/513786631575db8e1fb1">iOSアプリのUIテストツール候補 | Qiita</a> によくまとまってる。色々調べた結果、一番メジャーなのは <a href="https://github.com/kif-framework/KIF">KIF</a> っぽい、かつKIFの方がgithubで人気だからいいんじゃねという短絡的発想です。その他ツールとの比較は、しばらくして気が向いたら書きます。。。</p>

<p>ちなみにGoogleさんも使ってるらしい → <a href="http://googletesting.blogspot.jp/2013/08/how-google-team-tests-mobile-apps.html">http://googletesting.blogspot.jp/2013/08/how-google-team-tests-mobile-apps.html</a></p>

<p>では、セットアップ方法についてまとめる。</p>

<h1>Kiwi <a href="https://github.com/allending/Kiwi">[code]</a></h1>

<p>基本的に、<a href="https://github.com/allending/Kiwi/wiki/Getting-Started-with-Kiwi-2.0">Getting Started with Kiwi 2.0</a> を読めばわかる</p>

<h2>Kiwiのセットアップ</h2>

<p>CocoaPodsを使う場合についてのみ記述する</p>

<h3>Xcode 5</h3>

<p>あらかじめXcodeでテスト用のターゲットを作成して、Podfileに以下を追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target :単体テストのターゲットの名前, :exclusive =&gt; true do
</span><span class='line'>   pod 'Kiwi/XCTest'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>Xcode 5未満</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target :単体テストのターゲットの名前, :exclusive =&gt; true do
</span><span class='line'>   pod 'Kiwi'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>XCTestを使うかどうか、の違いです</p>

<h2>インストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure>


<p>でOK、簡単。公式のtutorialは結構長いけど、基本的に確認するだけの作業</p>

<h1>KIF <a href="https://github.com/kif-framework/KIF">[code]</a></h1>

<h2>Podfile</h2>

<p>Xcodeで結合テスト用のターゲットを作成して、Podfileに以下を追加する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target '結合テストのターゲットの名前', :exclusive =&gt; true do
</span><span class='line'>  pod 'KIF', '~&gt; 2.0'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>インストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure>


<p>でOK、簡単。インストール方法の詳細はGithubのREADMEを参照</p>

<p>Githubで検索するとサンプルプロジェクト等出てくるので、そちらで動作確認をするのがおすすめです。</p>

<p>例えばこれ <a href="https://github.com/ishkawa/KIFNextExample">https://github.com/ishkawa/KIFNextExample</a></p>

<h2>注意点</h2>

<p>KIFはXCTestではなくSenTestingをベースに作られてる（XCTestに対応しようとしてる<a href="https://github.com/kif-framework/KIF/pull/313">pull request</a>もあるようだけど、まだ本家にmergeされてない）。よって、リンクするライブラリにはSenTestingを指定しないといけない。KiwiはXCTestを使ってるので、注意が必要</p>

<h1>継続的インテグレーション?</h1>

<p>Jenkins or Bots 使えばいいと思います。どっちもメリットデメリットがあって難しいよなーと思うけど、Jenkinsの方が柔軟性は圧倒的に高いので、Jenkinsを使おうと思ってます。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.fastcolabs.com/3012626/open-company/finally-three-ways-to-automate-ios-app-testing">Finally, Three Ways To Automate iOS App Testing  By Brad Heintz, James Paolantonio and Aaron Schildkrout</a></li>
<li><a href="http://blog.ishkawa.org/blog/2013/08/31/unit-test/">iOS開発でのユニットテストを身につけるには | blog.ishkawa.org</a></li>
<li><a href="http://qiita.com/hirayaCM/items/513786631575db8e1fb1">iOSアプリのUIテストツール候補 | Qiita</a></li>
<li><a href="https://github.com/mixi-inc/iOSTraining/wiki/11.3-Kiwi%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E6%8C%AF%E3%82%8B%E8%88%9E%E3%81%84%E3%83%86%E3%82%B9%E3%83%88">Kiwiを用いた振る舞いテスト | mixi-inc iOSTraining</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goに関する良記事]]></title>
    <link href="http://r9y9.github.io/blog/2014/02/02/ready-to-use-go/"/>
    <updated>2014-02-02T16:57:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/02/02/ready-to-use-go</id>
    <content type="html"><![CDATA[<p>いくつか見つけたのでメモる</p>

<h2><a href="http://www.jellolabs.com/blog/why-golang-is-ready-for-early-stage-startups.html">Why We Think GoLang Is Ready For Early Stage Startups</a></h2>

<p>とあるスタートアップがウェブでGoを使うという意思決定をした理由、その決断に至るまでのプロセスが書かれている。また、その過程でGoを使うことによる利点・欠点が簡潔にまとめられてる。参考になった</p>

<h2><a href="https://kidoman.com/programming/go-getter.html">Go Getter &ndash; Performance comparison to C++ business card ray tracer</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/go-improvements.png"></p>

<p>GoとC++のパフォーマンスの比較。Ray tracingというCGの手法を用いて比較をしていて、Goでも最適化するとC++並のスピード出ますよ（そしてC++と違ってGCあるしマルチコアにも簡単にできるしGoいいよ）って話。（自分へのメモのため画像を拝借していますが、意味がわからないと思うので元記事を参照してください）</p>

<p>ただoptimized Go vs un-optimized C++なので注意。Goの最適化が主旨の記事です</p>

<h2><a href="https://kidoman.com/programming/go-getter-part-2.html">Go Getter Part 2 &ndash; Now with C++ optimizations</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/go-vs-cpp-after-both-optimized.png"></p>

<p>さっきの続きで、こちらでは最適化したC++と比較されてる。OpenMP使って並列化してるようだけど、あれ、まだC++の方が遅い・・（正直意外</p>

<h2><a href="https://kidoman.com/programming/go-getter-part-3.html">Go Getter Part 3 &ndash; Further optimizations and a multi-threaded C++ version</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/2048x2048-3.png"></p>

<p>これで最後。C++（とGo）をめちゃくちゃ最適化した、って奴ですね。C++の方が二倍程度速くなったよう。
ただ、やっぱC++の方が良かった、というよりGoがC++並になるのも時間の問題って感じですね。</p>

<h2>さて</h2>

<p>このまとめで何が言いたかったというと</p>

<p><strong>「Goを使わない選択肢がない」</strong></p>

<p>まぁ半分冗談（ケースバイケースだし）ですが、僕のようにC++をメインで使っているけど不満ありまくりな人は、一度Go使ってみてもいいんじゃないでしょうか、と思います。C++の百倍書きやすいです</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでクロマベクトルを求める]]></title>
    <link href="http://r9y9.github.io/blog/2014/01/28/go-chroma-vector/"/>
    <updated>2014-01-28T23:08:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/01/28/go-chroma-vector</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/pcp_result.png" title="&#34;Chromagram&#34;" alt="&#34;Chromagram&#34;"></p>

<p>Chromagram。ドレミの歌の冒頭を分析した結果です</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/mjibson/go-dsp/wav&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/go-msptools/pcp&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// reading data</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;/path/to/file.wav&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">wav</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">wav</span><span class="p">.</span><span class="nx">ReadWav</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">werr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// convert to []float64 from []int</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">wav</span><span class="p">.</span><span class="nx">Data</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">wav</span><span class="p">.</span><span class="nx">Data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// settings for analysis</span>
</span><span class='line'>  <span class="nx">frameShift</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">wav</span><span class="p">.</span><span class="nx">SampleRate</span><span class="p">)</span> <span class="o">/</span> <span class="mf">100.0</span><span class="p">)</span> <span class="c1">// 0.01 sec</span>
</span><span class='line'>  <span class="nx">sampleRate</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">wav</span><span class="p">.</span><span class="nx">SampleRate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create PCP extrator</span>
</span><span class='line'>  <span class="nx">p</span> <span class="o">:=</span> <span class="nx">pcp</span><span class="p">.</span><span class="nx">NewPCP</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">,</span> <span class="nx">frameShift</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// analysis roop</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">NumFrames</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">NumFrames</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">pcp</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">PCP</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">i</span><span class="o">*</span><span class="nx">frameShift</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">//pcp := p.PCPNormalized(data, i*frameShift)</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">pcp</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// print as a gnuplot 3D plotting format</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;#&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">spec</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">spec</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでOK。Chromagramをgnuplot形式で標準出力に出力します</p>

<h2>Pitch Class Profile (PCP) in Go <a href="https://github.com/r9y9/go-msptools/tree/master/pcp">[Code]</a></h2>

<p>どうやってクロマベクトルを計算しているかざっくり説明すると、</p>

<ul>
<li>入力信号をガボールウェーブレット変換</li>
<li>オクターブ無視して12次元に圧縮（例えば55Hz, 110Hz, 220Hz, 440Hz はすべてAとする）</li>
</ul>


<p>という手順で求めてます</p>

<p>Goかどうかなんてどうでもいいんだけど、まぁC++に比べて書きやすすぎて泣けるよね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goで信号処理]]></title>
    <link href="http://r9y9.github.io/blog/2014/01/27/start-coding-go-msptools/"/>
    <updated>2014-01-27T02:17:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/01/27/start-coding-go-msptools</id>
    <content type="html"><![CDATA[<p>最近Go言語を触っていて、これがなかなかいい感じ。そこそこ速いので、信号処理や機械学習も行けると思う</p>

<h2>Goの良い所</h2>

<ul>
<li>デフォでたくさん便利なパッケージがある。http, json, os, &hellip;</li>
<li>パッケージのインストールはとても簡単。go getするだけ</li>
<li>デフォでテストの枠組みがある</li>
<li>gofmtでコードのformattingしてくれるので書き方で迷わなくて良い</li>
<li>使わないパッケージをimportするとコンパイルエラーになるし自然と疎結合なコードを書くようになる</li>
<li>並列処理を言語レベルでサポート</li>
<li>GCあるのでメモリ管理なんてしなくていい</li>
<li>全般的にC++より書きやすい（ここ重要）</li>
<li>そこそこ速い（C++よりは遅いけど）</li>
</ul>


<p>ホントはPythonでさくっと書きたいけどパフォーマンスもほしいからC++で書くかー（嫌だけど）。と思ってた自分にはちょうどいい</p>

<h2>Goの悪い所（主にC++と比べて）</h2>

<ul>
<li>ちょっと遅い。さっと試したウェーブレット変換は、1.5倍くらい遅かった気がする（うろ覚え）</li>
<li>C++やpythonに比べるとライブラリは少ない</li>
<li>言語仕様とかそのへんが優れてるかどうかは判断つきませんごめんなさい</li>
</ul>


<h1>Go-msptools</h1>

<p>2014/07/22 追記：<br/>
Go-msptoolsはGOSSPに吸収されました。（<a href="http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go/">GOSSP &ndash; Go言語で音声信号処理 &ndash; LESS IS MORE</a>を参照）</p>

<h2>おまけ：音の信号処理に役立ちそうなライブラリ</h2>

<ul>
<li><a href="https://github.com/mjibson/go-dsp/">go-dsp</a></li>
<li><a href="https://code.google.com/p/portaudio-go/">portaudio-go</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs themes - Sublime Text風のcolor themeが気に入った]]></title>
    <link href="http://r9y9.github.io/blog/2013/12/23/emacs-sublime-text-like-theme/"/>
    <updated>2013-12-23T23:32:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/12/23/emacs-sublime-text-like-theme</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/emacs-sublime-text-like-theme.png" title="&#34;Spolsky, Sublime Text風のcolor theme on Ubuntu 12.04&#34;" alt="&#34;Spolsky, Sublime Text風のcolor theme on Ubuntu 12.04&#34;"></p>

<p>Sublime Textのデフォルトの色が結構好きなので、emacsも同じようにしたいと思ってた。今まではずっと<a href="http://ethanschoonover.com/solarized">solarized</a>を使ってたけど、個人的にはsublime textっぽい方が好き。</p>

<p>と思って探してたらよさげなのを見つけた。</p>

<p><a href="https://github.com/owainlewis/emacs-color-themes">https://github.com/owainlewis/emacs-color-themes</a></p>

<p>若干目がチカチカせんこともないけど、しばらく使ってみる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MLSA digital filter のC++実装]]></title>
    <link href="http://r9y9.github.io/blog/2013/12/01/mlsa-filter-with-c-plus-plus/"/>
    <updated>2013-12-01T23:43:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/12/01/mlsa-filter-with-c-plus-plus</id>
    <content type="html"><![CDATA[<p><a href="http://r9y9.github.io/blog/2013/09/23/mlsa-filter-wakaran/">MLSAフィルタわからん</a>という記事を書いて早2ヶ月、ようやく出来た。</p>

<p>Mel-log spectrum approximate (MLSA) filterというのは、対数振幅スペクトルを近似するようにメルケプストラムから直接音声を合成するデジタルフィルタです。<a href="http://sp-tk.sourceforge.net/">SPTK</a>のmlsa filterと比較して完全に計算結果が一致したので、間違ってはないはず。MLSAフィルタを使ってメルケプから音声合成するプログラムをC++で自分で書きたいという稀有な人であれば、役に立つと思います。基本的に、SPTKのmlsa filterの再実装です。</p>

<h1>mlsa_filter.h</h1>

<p><a href="https://gist.github.com/r9y9/7735120">https://gist.github.com/r9y9/7735120</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#pragma once</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">sp</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MLSA BASE digital filter (Mel-log Spectrum Approximate digital filter)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">mlsa_base_filter</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_base_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_base_filter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">alpha_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">delay_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">mlsa_base_filter</span><span class="o">::</span><span class="n">mlsa_base_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">)</span>
</span><span class='line'><span class="o">:</span> <span class="n">alpha_</span><span class="p">(</span><span class="n">alpha</span><span class="p">),</span>
</span><span class='line'>  <span class="n">delay_</span><span class="p">(</span><span class="n">order</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">mlsa_base_filter</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delay_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">delay_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">alpha_</span><span class="o">*</span><span class="n">alpha_</span><span class="p">)</span><span class="o">*</span><span class="n">delay_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">alpha_</span><span class="o">*</span><span class="n">delay_</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">alpha_</span><span class="o">*</span><span class="p">(</span><span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">+=</span> <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// special case</span>
</span><span class='line'>  <span class="c1">// TODO: other solution?</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">+=</span> <span class="n">delay_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// t &lt;- t+1 in time</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">delay_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MLSA digital filter cascaded</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">mlsa_base_cascaded_filter</span> <span class="p">{</span>
</span><span class='line'> <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_base_cascaded_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span>
</span><span class='line'>              <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">,</span>
</span><span class='line'>              <span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_base_cascaded_filter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">mlsa_base_filter</span><span class="o">&gt;&gt;</span> <span class="n">base_f_</span><span class="p">;</span> <span class="c1">// cascadad filters</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">delay_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">pade_coef_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">mlsa_base_cascaded_filter</span><span class="o">::</span><span class="n">mlsa_base_cascaded_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span>
</span><span class='line'>                           <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">,</span>
</span><span class='line'>                           <span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span><span class="p">)</span>
</span><span class='line'>  <span class="o">:</span> <span class="n">delay_</span><span class="p">(</span><span class="n">n_pade</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="n">pade_coef_</span><span class="p">(</span><span class="n">n_pade</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n_pade</span> <span class="o">!=</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">n_pade</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The number of pade approximations must be 4 or 5.&quot;</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">n_pade</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">||</span> <span class="n">n_pade</span> <span class="o">==</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n_pade</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mlsa_base_filter</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">mlsa_base_filter</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">alpha</span><span class="p">);</span>
</span><span class='line'>    <span class="n">base_f_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">mlsa_base_filter</span><span class="o">&gt;</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n_pade</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">4.999273e-1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.067005e-1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.170221e-2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mf">5.656279e-4</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n_pade</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">4.999391e-1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.107098e-1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.369984e-2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mf">9.564853e-4</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mf">3.041721e-5</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">mlsa_base_cascaded_filter</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">feed_back</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">pade_coef_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">base_f_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">filter</span><span class="p">(</span><span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">v</span> <span class="o">=</span> <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">pade_coef_</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">feed_back</span> <span class="o">+=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">feed_back</span> <span class="o">-=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">+=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delay_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">feed_back</span> <span class="o">+</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">+=</span> <span class="n">delay_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MLSA digital filter (Mel-log Spectrum Approximate digital filter)</span>
</span><span class='line'><span class="cm"> * The filter consists of two stage cascade filters</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">mlsa_filter</span> <span class="p">{</span>
</span><span class='line'> <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span><span class="p">);</span>
</span><span class='line'> <span class="o">~</span><span class="n">mlsa_filter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'> <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'> <span class="kt">double</span> <span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">private</span><span class="o">:</span>
</span><span class='line'> <span class="n">mlsa_filter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">alpha_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">mlsa_base_cascaded_filter</span><span class="o">&gt;</span> <span class="n">f1_</span><span class="p">;</span> <span class="c1">// first stage</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">mlsa_base_cascaded_filter</span><span class="o">&gt;</span> <span class="n">f2_</span><span class="p">;</span> <span class="c1">// second stage</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">mlsa_filter</span><span class="o">::</span><span class="n">mlsa_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span>
</span><span class='line'>           <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">,</span>
</span><span class='line'>           <span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span><span class="p">)</span>
</span><span class='line'>  <span class="o">:</span> <span class="n">alpha_</span><span class="p">(</span><span class="n">alpha</span><span class="p">),</span>
</span><span class='line'>  <span class="n">f1_</span><span class="p">(</span><span class="k">new</span> <span class="n">mlsa_base_cascaded_filter</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">n_pade</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">f2_</span><span class="p">(</span><span class="k">new</span> <span class="n">mlsa_base_cascaded_filter</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">n_pade</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">mlsa_filter</span><span class="o">::~</span><span class="n">mlsa_filter</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">mlsa_filter</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 1. First stage filtering</span>
</span><span class='line'>  <span class="n">Vector</span> <span class="n">b1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]};</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">y</span> <span class="o">=</span> <span class="n">f1_</span><span class="o">-&gt;</span><span class="n">filter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">b1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. Second stage filtering</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">f2_</span><span class="o">-&gt;</span><span class="n">filter</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">// end namespace sp</span>
</span></code></pre></td></tr></table></div></figure>


<h1>使い方</h1>

<p>mlsa_filter.hをインクルードすればおｋ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;mlsa_filter.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// セットアップ</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.42</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="n">sp</span><span class="o">::</span><span class="n">mlsa_filter</span> <span class="n">mlsa_f</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">n_pade</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// MLSA フィルタリング </span>
</span><span class='line'><span class="err">出力一サンプル</span> <span class="o">=</span> <span class="n">mlsa_f</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="err">入力一サンプル</span><span class="p">,</span> <span class="err">フィルタ係数</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>何で再実装したのか</h1>

<ul>
<li>mlsa filterをC++的なインタフェースで使いたかった</li>
<li>コード見たらまったく意味がわからなくて、意地でも理解してやろうと思った</li>
<li>反省はしている</li>
<li>知り合いの声質変換やってる方がMLSAフィルタを波形合成に使ってるっていうし、ちょっとやってみようかなって</li>
<li>あと最近音声合成の低レベルに手をつけようとと思ってたし勉強にもなるかなって</li>
<li>思ったんだ……んだ…だ…</li>
</ul>


<p>車輪の再開発はあんま良くないと思ってるけど許して。
誰かがリファクタせないかんのだ</p>

<h1>感想</h1>

<p>SPTKのmlsa filterは、正直に言うとこれまで読んできたコードの中で一二を争うほど難解でした（いうてC言語はあまり読んできてないので、Cだとこれが普通なのかもしれないけど）。特に、元コードの d: delayという変数の使われ方が複雑過ぎて、とても読みにくくございました。MLSAフィルタは複数のbase filterのcascade接続で表されるわけだけど、それぞれの遅延が一つのdという変数で管理されていたのです。つまり、</p>

<ul>
<li>d[1] ~ d[5] までは、あるフィルタの遅延</li>
<li>d[6] ~ d[11] までは、別のフィルタの遅延</li>
<li>d[12] ~ にはまた別のフィルタの遅延</li>
</ul>


<p>という感じです。</p>

<p>改善しようと思って、base filterというクラスを作ってそのクラスの状態として各フィルタの遅延を持たせて、見通しを良くしました</p>

<h2>さいごに</h2>

<p>MLSAフィルタ、難しいですね（小並感</p>

<p>いつかリアルタイム声質変換がやってみたいので、それに使う予定（worldを使うことになるかもしれんけど）。戸田先生当たりがやってる声質変換を一回真似してみたいと思ってる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPTKをC++から使えるようにする]]></title>
    <link href="http://r9y9.github.io/blog/2013/12/01/sptk-with-waf/"/>
    <updated>2013-12-01T18:46:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/12/01/sptk-with-waf</id>
    <content type="html"><![CDATA[<p><a href="http://sp-tk.sourceforge.net/">音声信号処理ツールキットSPTK</a>をC++から使おうと思ったら意外とハマってしまったので、</p>

<ul>
<li>C++から使えるようにC++コンパイラでコンパイルできるようにした</li>
<li>使いやすいようにwafを組み込みんだ</li>
</ul>


<p>リポジトリ: <a href="https://github.com/r9y9/SPTK">https://github.com/r9y9/SPTK</a></p>

<p>というわけで、使い方について簡単に書いておく</p>

<h1>SPTK について</h1>

<ul>
<li>SPTKを使うと何ができるか: <a href="http://aidiary.hatenablog.com/entry/20120701/1341126474">SPTKの使い方 (1) インストール・波形描画・音声再生 | 人工知能に関する断創録</a></li>
<li>SPTKとは: <a href="[http://sp-tk.sourceforge.net/]">Speech Signal Processing Toolkit (SPTK)</a></li>
</ul>


<h1>SPTK with waf</h1>

<p><a href="https://github.com/r9y9/SPTK">SPTK with waf</a>は、SPTKをwafでビルド管理できるようにしたものです。</p>

<ul>
<li>SPTKを共有ライブラリとしてインストールできます。</li>
<li>C、C++の好きな方でコンパイルできます。</li>
<li>wafが使えます（速い、出力がキレイ）</li>
<li>自分のC、C++コードからSPTKのメソッドを呼べます。</li>
<li>コマンドラインツールはインストールされません。</li>
</ul>


<p>コマンドラインツールを使いたい人は、元のconfigure scriptを使えば十分です。</p>

<h1>環境</h1>

<ul>
<li>Unix系</li>
</ul>


<p>Ubuntu 12.04 LTS 64 bitとMac OS X 10.9では確認済み</p>

<h1>SPTKのインストール</h1>

<p>リポジトリをクローンしたあと、</p>

<h2>Build</h2>

<pre><code> ./waf configure &amp;&amp; ./waf
</code></pre>

<h2>Build with clang++</h2>

<pre><code> CXX=clang++ ./waf configure &amp;&amp; ./waf
</code></pre>

<h2>Build with gcc</h2>

<pre><code> git checkout c
 ./waf configure &amp;&amp; ./waf
</code></pre>

<h2>Build with clang</h2>

<pre><code> git checkout c
 CC=clang ./waf configure &amp;&amp; ./waf
</code></pre>

<h2>Install</h2>

<pre><code> sudo ./waf install
</code></pre>

<ul>
<li>Include files: <code>/usr/local/include/SPTK</code></li>
<li>Library: <code>/usr/local/lib/SPTK</code></li>
<li>Pkg-config: <code>/usr/local/lib/pkgconfig</code></li>
</ul>


<p>オリジナルのSPTKとはインストール場所が異なります（オリジナルは、<code>/usr/local/SPTK</code>）</p>

<h1>SPTKを使ってコードを書く</h1>

<p><code>&lt;SPTK/SPTK.h&gt;</code> をインクルードして、好きな関数を呼ぶ</p>

<p>コンパイルは、例えば以下のようにする</p>

<pre><code> g++ test.cpp `pkg-config SPTK --cflags --libs`
</code></pre>

<p>面倒なので、example/ 内のコードを修正して使う（wafを使おう）のがおすすめです。</p>

<br/>


<h1>きっかけ</h1>

<ul>
<li>SPTKはコマンドラインツールだと思ってたけど、どうやらSPTK.hをインクルードすれば一通りのツールを使えるらしい</li>
<li>SPTK.hをインクルードして使う方法のマニュアルが見つからない…</li>
<li>SPTKはC言語で書かれてるし、C++から使うの地味にめんどくさい</li>
</ul>


<h1>C++から簡単に使いたかった</h1>

<ul>
<li>gccやclangだけじゃなくg++やclang++でコンパイルできるようにしよう</li>
<li>自分のコードのビルド管理にはwafを使ってるし、wafで管理できるようにしてしまおう</li>
<li>waf素晴らしいしな （参考: <a href="http://d.hatena.ne.jp/tanakh/20100212">waf チュートリアル | 純粋関数型雑記帳 </a>）</li>
</ul>


<h1>最後に</h1>

<p>SPTKもwafも素晴らしいので積極的に使おう＾＾</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MFCCの計算方法についてメモ]]></title>
    <link href="http://r9y9.github.io/blog/2013/11/24/mfcc-calculation-memo/"/>
    <updated>2013-11-24T22:29:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/11/24/mfcc-calculation-memo</id>
    <content type="html"><![CDATA[<h2>MFCC とは</h2>

<p>Mel-Frequency Cepstral Coefficients (MFCCs) のこと。音声認識でよく使われる、音声の特徴表現の代表的なもの。</p>

<h3>算出手順</h3>

<ul>
<li>音声信号を適当な長さのフレームで切り出し</li>
<li>窓がけ</li>
<li>フーリエ変換して対数振幅スペクトルを求める</li>
<li>メルフィルタバンクを掛けて、メル周波数スペクトルを求める</li>
<li>離散コサイン変換により、MFCCを求める</li>
</ul>


<p>以上。SPTKのmfccコマンドのソースもだいたいそうなってた。</p>

<h3>さて</h3>

<h4>ここに音声波形があるじゃろ？？</h4>

<p><img class="center" src="http://r9y9.github.io/images/speech-signal.png" title="&#34;音声信号を適当な長さのフレームで切り出し&#34;" alt="&#34;音声信号を適当な長さのフレームで切り出し&#34;"></p>

<h4>音声波形を窓がけして…</h4>

<p><img class="center" src="http://r9y9.github.io/images/windowed-signal.png" title="&#34;窓がけ&#34;" alt="&#34;窓がけ&#34;"></p>

<h4>さらにフーリエ変換して対数取って…</h4>

<p><img class="center" src="http://r9y9.github.io/images/log-amplitude.png" title="&#34;フーリエ変換して振幅スペクトルを求める&#34;" alt="&#34;フーリエ変換して振幅スペクトルを求める&#34;"></p>

<h4>ここでメルフィルタバンクの出番じゃ</h4>

<p><img class="center" src="http://r9y9.github.io/images/after-mel-filterbank.png" title="&#34;メルフィルタバンクを掛けて、メル周波数スペクトルを求める&#34;" alt="&#34;メルフィルタバンクを掛けて、メル周波数スペクトルを求める&#34;"></p>

<h4>最後に離散コサイン変換で完成じゃ</h4>

<p><img class="center" src="http://r9y9.github.io/images/MFCC.png" title="&#34;離散コサイン変換により、MFCCを求める&#34;" alt="&#34;離散コサイン変換により、MFCCを求める&#34;"></p>

<h2>まとめ</h2>

<ul>
<li>MFCC求めたかったら、普通はHTKかSPTK使えばいいんじゃないですかね。自分で書くと面倒くさいです</li>
<li>正規化はどうするのがいいのか、まだよくわかってない。単純にDCT（IIを使った）を最後に掛けると、かなり大きい値になって使いにくい。ので、 <a href="http://research.cs.tamu.edu/prism/lectures/sp/l9.pdf">http://research.cs.tamu.edu/prism/lectures/sp/l9.pdf</a> にもあるとおり、mel-filterbankの数（今回の場合は64）で割った。</li>
<li>間違ってるかもしれないけどご愛嬌</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://research.cs.tamu.edu/prism/lectures/sp/l9.pdf">L9: Cepstral analysis [PDF]</a></li>
<li><a href="http://shower.human.waseda.ac.jp/~m-kouki/pukiwiki_public/66.html">メル周波数ケプストラム（MFCC） | Miyazawa’s Pukiwiki 公開版</a></li>
<li><a href="http://aidiary.hatenablog.com/entry/20120225/1330179868">メル周波数ケプストラム係数（MFCC） | 人工知能に関する断創録</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
