<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Speech-signal-processing | LESS IS MORE]]></title>
  <link href="http://r9y9.github.io/blog/categories/speech-signal-processing/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2014-07-22T21:35:40+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi Yamamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[音声分析変換合成システムWORLDのGoラッパーを書いた]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/22/go-world/"/>
    <updated>2014-03-22T18:28:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/22/go-world</id>
    <content type="html"><![CDATA[<h2>音声分析変換合成システムWORLD</h2>

<p>WORLDとは、山梨大学の森勢先生が作られている高品質な音声分析変換合成システムです。非常に高品質かつ高速に動作するのが良い所です。詳細は以下のURLへ</p>

<p><a href="http://ml.cs.yamanashi.ac.jp/world/">http://ml.cs.yamanashi.ac.jp/world/</a></p>

<p>オリジナルはC+＋で書かれていますが、Goからも使えるようにラッパーを書きました。非常にいいソフトウェアなので、もしよろしければどうぞ</p>

<h2>GO-WORLD</h2>

<p><a href="https://github.com/r9y9/go-world">https://github.com/r9y9/go-world</a></p>

<p>使い方について、ほんの少し解説を書きます</p>

<p>※ubuntu12.04でのみ動作確認してます。</p>

<h2>準備</h2>

<h3>1. WORLDのインストール</h3>

<p>まずWORLDをインストールする必要があります。公式のパッケージではinstallerに相当するものがなかったので、作りました</p>

<p><a href="https://github.com/r9y9/world">https://github.com/r9y9/world</a></p>

<p><code>bash
 ./waf configure &amp;&amp; ./waf
 sudo ./waf install
</code></p>

<p>でインストールできます。</p>

<p>なお、WORLDは最新版ではなく0.1.2としています。最新版にすると自分の環境でビルドコケてしまったので…</p>

<h3>2. GO-WORLDのインストール</h3>

<p><code>bash
go get github.com/r9y9/go-world
</code></p>

<p>簡単ですね！</p>

<h2>使い方</h2>

<h3>1. インポートする</h3>

<p><code>go
import "github.com/r9y9/go-world"
</code></p>

<h3>2. worldのインスタンスを作る</h3>

<p><code>go
w := world.New(sampleRate, framePeriod) // e.g. (44100, 5)
</code></p>

<h3>3. 好きなworldのメソッドを呼ぶ</h3>

<h4>基本周波数の推定: Dio</h4>

<p><code>go
timeAxis, f0 := w.Dio(input, w.NewDioOption()) // default option is used
</code></p>

<h4>スペクトル包絡の推定: Star</h4>

<p><code>go
spectrogram := w.Star(input, timeAxis, f0)
</code></p>

<h4>励起信号の推定: Platinum</h4>

<p><code>go
residual := w.Platinum(input, timeAxis, f0, spectrogram)
</code></p>

<h4>パラメータから音声の再合成: Synthesis</h4>

<p><code>go
synthesized := w.Synthesis(f0, spectrogram, residual, len(input))
</code></p>

<h2>使い方例.</h2>

<p>音声（wavファイル）を分析して、パラメータから音声を再合成する例を紹介します。80行弱と少し長いですがはっつけておきます</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"flag"
"fmt"
"github.com/mjibson/go-dsp/wav"
"github.com/r9y9/go-world"
"log"
"os"
</code></pre>

<p>)</p>

<p>var defaultDioOption = world.DioOption{</p>

<pre><code>F0Floor:          80.0,
F0Ceil:           640.0,
FramePeriod:      5,
ChannelsInOctave: 4.0,
Speed:            6,
</code></pre>

<p>}</p>

<p>// 音声を基本周波数、スペクトル包絡、励起信号の三つに分解したあと、再合成します
func worldExample(input []float64, sampleRate int) []float64 {</p>

<pre><code>w := world.New(sampleRate, defaultDioOption.FramePeriod)

// 1. Fundamental frequency
timeAxis, f0 := w.Dio(input, defaultDioOption)

// 2. Spectral envelope
spectrogram := w.Star(input, timeAxis, f0)

// 3. Excitation spectrum
residual := w.Platinum(input, timeAxis, f0, spectrogram)

// 4. Synthesis
return w.Synthesis(f0, spectrogram, residual, len(input))
</code></pre>

<p>}</p>

<p>// 音声を基本周波数、スペクトル包絡、非周期成分の三つに分解したあと、再合成します
func worldExampleAp(input []float64, sampleRate int) []float64 {</p>

<pre><code>w := world.New(sampleRate, defaultDioOption.FramePeriod)

// 1. Fundamental frequency
timeAxis, f0 := w.Dio(input, defaultDioOption)

// 2. Spectral envelope
spectrogram := w.Star(input, timeAxis, f0)

// 3. Apiriodiciy
apiriodicity, targetF0 := w.AperiodicityRatio(input, f0)

// 4. Synthesis
return w.SynthesisFromAperiodicity(f0, spectrogram, apiriodicity, targetF0, len(input))
</code></pre>

<p>}</p>

<p>func GetMonoDataFromWavData(data [][]int) []float64 {</p>

<pre><code>y := make([]float64, len(data))
for i, val := range data {
    y[i] = float64(val[0])
}
return y
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>ifilename := flag.String("i", "default.wav", "Input filename")
flag.Parse()

// Read wav data
file, err := os.Open(*ifilename)
if err != nil {
    log.Fatal(err)
}
defer file.Close()

w, werr := wav.ReadWav(file)
if werr != nil {
    log.Fatal(werr)
}
input := GetMonoDataFromWavData(w.Data)
sampleRate := int(w.SampleRate)

synthesized := worldExample(input, sampleRate)
// synthesized := worldExampleAp(input, sampleRate)

for i, val := range synthesized {
    fmt.Println(i, val)
}
</code></pre>

<p>}
```</p>

<p>Goだとメモリ管理きにしなくていいしそこそこ速いし読みやすいし書きやすいし楽でいいですね（信者</p>

<h2>おわりに</h2>

<ul>
<li>GoはC++ほど速くはないですが、C++の何倍も書きやすいし読みやすい（メンテしやすい）ので、個人的にオススメです（パフォーマンスが厳しく要求される場合には、C++の方がいいかもしれません）</li>
<li>WORLD良いソフトウェアなので使いましょう</li>
</ul>


<h2>ちなみに</h2>

<p>元はと言えば、オレオレ基本周波数推定（YINもどき）が微妙に精度悪くて代替を探していたとき、</p>

<ul>
<li>SPTKのRAPTかSWIPE使おうかな…</li>
<li>RAPTもSWIPEもSPTK.hにインタフェースがない…</li>
<li>うわRAPTのコード意味わからん</li>
<li>SWIPEのコードまじ謎</li>
<li>後藤さんのPreFest実装しよう</li>
<li>あれ上手くいかない…orz</li>
<li>どうしようかな…</li>
</ul>


<p>となっていたときに、森勢先生が書いたと思われる以下の文献を見つけて、</p>

<p><a href="http://crestmuse.jp/handbookMI/pdf/2_2_PitchExtraction_Morise.pdf">2-2 基本周波数推定（歌声研究に関する視点から）</a></p>

<blockquote><p>本方法は，低域に雑音が存在する音声に対する推定は困難であるが，低域の雑音が存在しない音声の場合，SWIPE′ や NDF と実質的に同等の性能を達成しつつ，計算時間を SWIPE′の 1/42, NDF の 1/80 にまで低減可能である．</p></blockquote>

<p>あぁworld使おう（白目</p>

<p>となり、ラッパーを書くにいたりましたとさ、おしまい</p>
]]></content>
  </entry>
  
</feed>
