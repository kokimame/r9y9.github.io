<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machine Learning Matrix Factorization on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/machine-learning-matrix-factorization/</link>
    <description>Recent content in Machine Learning Matrix Factorization on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 19 Oct 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://r9y9.github.io/categories/machine-learning-matrix-factorization/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NMFで音源分離を試してみる</title>
      <link>http://r9y9.github.io/blog/2014/10/19/nmf-music-source-separation/</link>
      <pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/10/19/nmf-music-source-separation/</guid>
      <description>

&lt;p&gt;ずーーっと前に、 &lt;a href=&#34;http://r9y9.github.io/blog/2013/07/27/nmf-euclid/&#34;&gt;NMFアルゴリズムの導出（ユークリッド距離版） - LESS IS MORE&lt;/a&gt; で実際に実装してみてやってみると書いていたのに、まったくやっていなかったことに気づいたのでやりました。&lt;/p&gt;

&lt;p&gt;音楽に対してやってみたのですが、簡単な曲だったら、まぁぼちぼち期待通りに動いたかなぁという印象です。コードとノートを挙げたので、興味のある方はどうぞ。&lt;/p&gt;

&lt;h2 id=&#34;github:ef918407e04816395b73d0bae03fa1a5&#34;&gt;Github&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/r9y9/julia-nmf-ss-toy&#34;&gt;https://github.com/r9y9/julia-nmf-ss-toy&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ノート:ef918407e04816395b73d0bae03fa1a5&#34;&gt;ノート&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://nbviewer.ipython.org/github/r9y9/julia-nmf-ss-toy/blob/master/NMF-based%20Music%20Source%20Separation%20Demo.ipynb&#34;&gt;NMF-based Music Source Separation Demo.ipynb | nbviewer&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;nmfのコード-julia:ef918407e04816395b73d0bae03fa1a5&#34;&gt;NMFのコード (Julia)&lt;/h2&gt;

&lt;p&gt;NMFの実装の部分だけ抜き出しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-julia&#34;&gt;function nmf_euc(Y::AbstractMatrix, K::Int=4;
                        maxiter::Int=100)
    H = rand(size(Y, 1), K)
    U = rand(K, size(Y, 2))
    const ϵ = 1.0e-21
    for i=1:maxiter
        H = H .* (Y*U&#39;) ./ (H*U*U&#39; + ϵ)
        U = U .* (H&#39;*Y) ./ (H&#39;*H*U + ϵ)
        U = U ./ maximum(U)
    end
    return H, U
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いやー簡単ですねー。&lt;a href=&#34;http://r9y9.github.io/blog/2013/07/27/nmf-euclid/&#34;&gt;NMFアルゴリズムの導出（ユークリッド距離版） - LESS IS MORE&lt;/a&gt; で導出した更新式ほぼそのままになってます（異なる点としては、ゼロ除算回避をしているのと、Uをイテレーション毎に正規化していることくらい）。&lt;/p&gt;

&lt;p&gt;B3, B4くらいの人にとっては参考になるかもしれないと思ってあげてみた。&lt;/p&gt;

&lt;p&gt;おわり&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NMFアルゴリズムの導出（ユークリッド距離版）</title>
      <link>http://r9y9.github.io/blog/2013/07/27/nmf-euclid/</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2013/07/27/nmf-euclid/</guid>
      <description>

&lt;h2 id=&#34;はじめに:c8e0452ca4c557f980fa2fd4512b7ed4&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;シングルトラックにミックスダウンされた音楽から、その構成する要素（例えば、楽器とか）を分離したいと思うことがある。
音源分離と言えば、最近はNon-negative Matrix Factorization (非負値行列因子分解; NMF) が有名。
実装は非常に簡単だけど、実際にやってみるとどの程度の音源分離性能が出るのか気になったので、やってみる。&lt;/p&gt;

&lt;p&gt;と思ったけど、まずNMFについて整理してたら長くなったので、実装は今度にして、まずアルゴリズムを導出してみる。&lt;/p&gt;

&lt;h2 id=&#34;2014-10-19-追記:c8e0452ca4c557f980fa2fd4512b7ed4&#34;&gt;2014/10/19 追記&lt;/h2&gt;

&lt;p&gt;実装しました&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/r9y9/julia-nmf-ss-toy&#34;&gt;https://github.com/r9y9/julia-nmf-ss-toy&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;nmfの問題設定:c8e0452ca4c557f980fa2fd4512b7ed4&#34;&gt;NMFの問題設定&lt;/h2&gt;

&lt;p&gt;NMFとは、与えられた行列を非負という制約の元で因子分解する方法のこと。
音楽の場合、対象はスペクトログラムで、式で書くとわかりやすい。
スペクトログラムを $\mathbf{Y}: [\Omega \times T] $
    とすると、&lt;/p&gt;

&lt;div&gt;
\begin{align}
\mathbf{Y} \simeq \mathbf{H} \mathbf{U}
\end{align}
&lt;/div&gt;

&lt;p&gt;となる、$\mathbf{H}: [\Omega \times K]、\mathbf{U}: [K \times T]$ を求めるのがNMFの問題。
ここで、Hが基底、Uがアクティビティ行列に相当する。
NMFは、元の行列Yと分解後の行列の距離の最小化問題として定式化できる。&lt;/p&gt;

&lt;div&gt;
\begin{align}
\mathbf{H}, \mathbf{U} = \mathop{\rm arg~min}\limits_{\mathbf{H}, \mathbf{U}} D (\mathbf{Y}|\mathbf{H}\mathbf{U}), \hspace{3mm} {\rm subect\ to} \hspace{3mm} H_{\omega,k}, U_{k, t} &gt; 0
\end{align}
&lt;/div&gt;

&lt;p&gt;すごくシンプル。Dは距離関数で色んなものがある。ユークリッド距離、KLダイバージェンス、板倉斎藤距離、βダイバージェンスとか。&lt;/p&gt;

&lt;h2 id=&#34;ユークリッド距離の最小化:c8e0452ca4c557f980fa2fd4512b7ed4&#34;&gt;ユークリッド距離の最小化&lt;/h2&gt;

&lt;p&gt;ここではユークリッド距離（Frobeniusノルムともいう）として、二乗誤差最小化問題を解くことにする。
一番簡単なので。最小化すべき目的関数は次のようになる。&lt;/p&gt;

&lt;div&gt;
\begin{align}
D (\mathbf{Y}|\mathbf{H}\mathbf{U}) =&amp; || \mathbf{Y}-\mathbf{HU}||_{F} \\
=&amp; \sum_{\omega, k}|Y_{\omega,t} - \sum_{k}H_{\omega, k}U_{k, t}|^{2}
\end{align}
&lt;/div&gt;

&lt;p&gt;行列同士の二乗誤差の最小化は、要素毎の二乗誤差の和の最小化ということですね。展開すると、次のようになる。&lt;/p&gt;

&lt;div&gt;
\begin{align}
\sum_{\omega, k}|Y_{\omega,t} - \sum_{k}H_{\omega, k}U_{k, t}|^{2}
= \sum_{\omega, t}(|Y_{\omega, t}|^2 -2Y_{\omega, t} \sum_{k}H_{\omega, k}U_{k, t} + |\sum_{k}H_{\omega, k}U_{k, t}|^2)
\end{align}
&lt;/div&gt;

&lt;p&gt;微分してゼロ！としたいところだけど、3つ目の項を見ると、絶対値の中に和が入っているので、そうはいかない。
なので、補助関数法を使う。
基本的なアイデアは、目的関数の直接の最適化が難しい場合には、上界関数を立てることで間接的に最小化するということ。&lt;/p&gt;

&lt;p&gt;3項目に対してイェンセンの不等式を適応すると、&lt;/p&gt;

&lt;div&gt;
\begin{align}
|\sum_{k}H_{\omega,k}U_{k,t}|^{2} \le \sum_{k} \frac{H_{\omega,k}^{2}U_{k, t}^{2}}{\lambda_{k, \omega, t}}
\end{align}
&lt;/div&gt;

&lt;p&gt;これで、右辺は $ H_{\omega,k}, U_{k, t} $ について二次関数になったので、微分できてはっぴー。
上の不等式を使えば、実際に最小化する目的関数は、次のようになる。&lt;/p&gt;

&lt;div&gt;
\begin{align}
G := \sum_{\omega, t}(|Y_{\omega, t}|^2 -2Y_{\omega, t} \sum_{k}H_{\omega, k}U_{k, t} + \sum_{k} \frac{H_{\omega,k}^{2}U_{k, t}^{2}}{\lambda_{k, \omega, t}})
\end{align}
&lt;/div&gt;

&lt;p&gt;Gを最小化すれば、間接的に元の目的関数も小さくなる。&lt;/p&gt;

&lt;h2 id=&#34;更新式の導出:c8e0452ca4c557f980fa2fd4512b7ed4&#34;&gt;更新式の導出&lt;/h2&gt;

&lt;p&gt;あとは更新式を導出するだけ。
まず、目的関数を上から押さえるイメージで、イェンセンの不等式の等号条件から補助変数の更新式を求める。
この場合、kに関して和が1になることに注意して、&lt;/p&gt;

&lt;div&gt;
\begin{align}
\lambda_{k,\omega,t} = \frac{H_{\omega, k}U_{k, t}}{\sum_{k&#39;}H_{\omega, k&#39;}U_{k&#39;, t}}
\end{align}
&lt;/div&gt;

&lt;p&gt;次に、目的関数Gを $H_{\omega,k}, U_{k,t} $で偏微分する。&lt;/p&gt;

&lt;div&gt;
\begin{align}
\frac{\partial G}{\partial H_{\omega,k}} &amp;= \sum_{t} (-2 Y_{\omega,t}U_{k,t} + 2 \frac{H_{\omega, k}U_{k, t}^2}{\lambda_{k,\omega,t}}) &amp;= 0\\
\frac{\partial G}{\partial U_{k, t}} &amp;= \sum_{\omega} (-2 Y_{\omega,t}H_{\omega,k} + 2 \frac{H_{\omega, k}^2U_{k, t}}{\lambda_{k,\omega,t}}) &amp;= 0
\end{align}
&lt;/div&gt;

&lt;p&gt;少し変形すれば、以下の式を得る。&lt;/p&gt;

&lt;div&gt;
\begin{align}
H_{\omega,k} = \frac{\sum_{t}Y_{\omega,t}U_{k,t}}{\sum_{t}\frac{U_{k, t}^2}{\lambda_{k,\omega,t}}}, \hspace{3mm}
U_{k,t} = \frac{\sum_{\omega}Y_{\omega,t}H_{\omega,k}}{\sum_{\omega}\frac{H_{\omega, k}^2}{\lambda_{k,\omega,t}}}
\end{align}
&lt;/div&gt;

&lt;p&gt;補助変数を代入すれば、出来上がり。&lt;/p&gt;

&lt;div&gt;
\begin{align}
H_{\omega,k} = H_{\omega,k} \frac{\sum_{t}Y_{\omega,t}U_{k,t}}{\sum_{t}U_{k, t}\sum_{k&#39;}H_{\omega, k&#39;}U_{k&#39;, t}}, \hspace{3mm}
U_{k,t} = U_{k,t}\frac{\sum_{\omega}Y_{\omega,t}H_{\omega,k}}{\sum_{\omega}H_{\omega, k}\sum_{k&#39;}H_{\omega, k&#39;}U_{k&#39;, t}}
\end{align}
&lt;/div&gt;

&lt;h2 id=&#34;行列表記で:c8e0452ca4c557f980fa2fd4512b7ed4&#34;&gt;行列表記で&lt;/h2&gt;

&lt;p&gt;これで終わり…ではなく、もう少しスマートに書きたい。
ここで、少し実装を意識して行列表記を使って書きなおす。
行列の積は、AB（A: [m x n] 行列、B: [n x l] 行列）のようにAの列数とBの行数が等しくなることに注意して、
ほんの少し変形すれば最終的には次のように書ける。&lt;/p&gt;

&lt;div&gt;
\begin{align}
H_{\omega,k} &amp;= H_{\omega,k} \frac{[\mathbf{Y}\mathbf{U}^{\mathrm{T}}]_{\omega,k}}{[\mathbf{H}\mathbf{U}\mathbf{U}^{\mathrm{T}}]_{\omega,k}}, \\
U_{k,t} &amp;= U_{k,t}\frac{[\mathbf{H}^{\mathrm{T}}\mathbf{Y}]_{k, t}}{[\mathbf{H}^{\mathrm{T}}\mathbf{H}\mathbf{U}]_{k,t}}
\end{align}
&lt;/div&gt;

&lt;p&gt;乗法更新式というやつですね。
元々の行列の要素が非負なら、掛けても非負のままですよってこと。
NMFのアルゴリズムは、この更新式を目的関数が収束するまで計算するだけ、簡単。Pythonなら数行で書ける。&lt;/p&gt;

&lt;h2 id=&#34;メモ:c8e0452ca4c557f980fa2fd4512b7ed4&#34;&gt;メモ&lt;/h2&gt;

&lt;p&gt;自分で導出していて思ったことをメモっておこうと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;更新式は、行列の要素毎に独立して求められるんだなぁということ。

&lt;ul&gt;
&lt;li&gt;まぁ要素毎に偏微分して等式立ててるからそうなんだけど。更新の順番によって、収束する値、速度が変わるといったことはないんだろうか。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;行列演算とスカラー演算が同じ式に同時に含まれていることがあるので注意。例えば、最終的な更新式の割り算は、要素毎のスカラー演算で、行列演算ではない。&lt;/li&gt;
&lt;li&gt;何かいっぱいシグマがあるけど、めげない。計算ミスしやすい、つらい。&lt;/li&gt;
&lt;li&gt;NMFという名前から行列操作を意識してしまうけど、更新式の導出の過程に行列の微分とか出てこない。更新式の導出は、行列の要素個々に対して行うイメージ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;NMFなんて簡単、と言われますが（要出典）、実際にやってみると結構めんどくさいなー、と思いました（小並感&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>