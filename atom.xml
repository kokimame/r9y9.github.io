<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LESS IS MORE]]></title>
  <link href="http://r9y9.github.io/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2014-03-31T01:49:04+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi Yamamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cgo の基本的な使い方とポインタ周りのTips (Go v1.2)]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/22/cgo-tips/"/>
    <updated>2014-03-22T23:17:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/22/cgo-tips</id>
    <content type="html"><![CDATA[<p>C/C++ライブラリのGoラッパーを書くためには、cgoというパッケージを使うのだけど、特にCのポインタ周りにハマりどころが多かったので、少しまとめとく</p>

<p>cgoの基礎については、以下の二つを読むことを推奨</p>

<ul>
<li><a href="http://golang.org/cmd/cgo/">http://golang.org/cmd/cgo/</a></li>
<li><a href="https://code.google.com/p/go-wiki/wiki/cgo">https://code.google.com/p/go-wiki/wiki/cgo</a></li>
</ul>


<p>この記事では、cgo基本的な使い方と、いくつかポインタ絡みのTipsをまとめる。Tipsのみ必要な場合は、最初の方は飛ばして下さい</p>

<h2>cgo</h2>

<blockquote><p>Cgo enables the creation of Go packages that call C code.</p></blockquote>

<p><a href="http://golang.org/cmd/cgo/">http://golang.org/cmd/cgo/</a></p>

<p>cgoとは、GoからCの関数/型にアクセスするために用いるパッケージのこと。cgoを使えば、GoからCのコードが呼べる。つまり、<strong>Cで書かれたライブラリが、Goでも再利用できる</strong>。</p>

<p>なお、go v1.2 から、C++もサポートされている様子
<a href="http://golang.org/doc/go1.2#cgo_and_cpp">http://golang.org/doc/go1.2#cgo_and_cpp</a></p>

<p>ただし、C++ライブラリの使用方法については現時点でドキュメントはほぼ無し。僕の経験では、extern &ldquo;C&rdquo; を付けておくとC++用のコンパイラでコンパイルされたライブラリでも呼べる</p>

<h2>基本的な使い方</h2>

<p>まず、Cの型/関数にアクセスするために、cgoパッケージのimportを行う</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>import文のすぐ上のコメントにinclude &lt;ヘッダ.h> と書けば、コンパイルする際に自動で読み込まれるので、必要なヘッダを書く</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// #include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="c1">// #include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これで、C.int, C.float, C.double, *C.char、C.malloc, C.free などのようにして、Cの型や関数にアクセスできる</p>

<h2>外部ライブラリを呼ぶ</h2>

<p>通常は、ヘッダファイルをincludeするだけでなく、何かしらのライブラリとリンクして用いることが多いので、そのような場合には、ライブラリの依存関係をgoのコードに記述する</p>

<p>cgoでは、includeの設定と同様に、CFLAGS、CPPFLAGS、CXXFLAGS、LDFLAGS、pkg-configを記述することができる</p>

<p>pkg-configを使うと 、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="c1">// #cgo pkg-config: png cairo</span>
</span><span class='line'><span class="c1">// #include &lt;png.h&gt;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じ（<a href="http://golang.org/cmd/cgo/">Goの公式ページ</a>から参照）</p>

<h2>Tips</h2>

<p>さて、ここからTips。主に、<a href="ml.cs.yamanashi.ac.jp/world/">WORLD</a>のGoラッパーを書いていたときに得た知見です。ラッパーは、<a href="https://github.com/r9y9/go-world">Github</a>にあげた</p>

<h2>1. GoのスライスをCのポインタとして関数の引数に渡す</h2>

<p>例えば、[]float64 &ndash;> double* のイメージ</p>

<p>これは比較的簡単にできる。以前qiitaにも書いた
<a href="http://qiita.com/r9y9/items/e6d879c9b7d4f2697593">http://qiita.com/r9y9/items/e6d879c9b7d4f2697593</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">slice</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにキャストしてやればOK</p>

<h2>2. GoのスライスのスライスをCのポインタのポインタとして関数の引数に渡す</h2>

<p>[][]float64 &ndash;> double** のようなイメージ</p>

<p>例として、worldから引っ張ってきた以下のようなCの関数を考える</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="kt">void</span> <span class="n">Star</span><span class="p">(</span><span class="kt">double</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x_length</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fs</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">time_axis</span><span class="p">,</span> <span class="kt">double</span> <span class="o">*</span><span class="n">f0</span><span class="p">,</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">f0_length</span><span class="p">,</span> <span class="kt">double</span> <span class="o">**</span><span class="n">spectrogram</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>**spectrogramには処理結果が格納される。もちろん処理結果はGoの型で扱いたいんだが、では<strong>**spectrogramにどうやってGoの型を渡すか？</strong>ということが問題になる</p>

<p>doubleの二次元配列なので、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">s</span> <span class="o">:=</span> <span class="p">[][]</span><span class="kt">float64</span>
</span></code></pre></td></tr></table></div></figure>


<p>というスライスのスライスを考えて、キャストして渡したいところだけど、結論から言うとこれはできない</p>

<p>ではどうするかというと、苦肉の策として、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">wspace</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>というスライスを考えて、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="p">(</span><span class="o">**</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">wspace</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすれば、double**として関数の引数に渡すことができる。他にも方法がある気がするが、これでも期待通りの動作をする（あまりハックっぽいことしたくない…</p>

<p>まとめると、</p>

<ul>
<li>[][]float64 &ndash;> double**はできないが、</li>
<li>[]*C.double &ndash;> double**はできる。よって、一応Goの型をdouble**に渡すことはできる</li>
</ul>


<p>です。</p>

<h2>3. ポインタのポインタからスライスのスライスへの変換</h2>

<p>double** &ndash;> [][]float64 のようなイメージ</p>

<p>Tipsその2の例より、Cの関数の処理が終われば**spectrogramにデータが格納される。もちろん処理結果はGoの型で扱いたいので、[][]float64 にしたい。ただし、先程の例では、Cの関数に渡した型は実際には []*C.doubleで、Cの型を含んでいる。</p>

<p>そこで、次に問題になるのは、<strong>[]*C.doubleにから[][]float64 に変換するにはどうするか？</strong>ということ。そして、これも面倒です…（※節の頭でdouble** &ndash;> [][]float64と書いたけど、正確には []*C.double &ndash;> [][]float64）</p>

<p>結論から言えば、直接の変換は難しいけど中間変数をかませばできる</p>

<ul>
<li>[]bytes型でtmp変数を作り、<code>C.GoBytes</code> を使って*C.double &ndash;> []bytes にコピー</li>
<li>encoding/binaryパッケージを使って、[]bytes &ndash;> []float64 に書き込み</li>
<li>この処理をsliceOfSlices[0], sliceOfSlices[1], &hellip; に対して繰り返す</li>
</ul>


<p>以上。とても面倒ですね…</p>

<p>さて、結局上のStarのラッパーは以下のようになった</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Star</span><span class="p">(</span><span class="nx">x</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">fs</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">FFTSize</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">size_t</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">GetFFTSizeForStar</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">fs</span><span class="p">)))</span>
</span><span class='line'>  <span class="nx">numFreqBins</span> <span class="o">:=</span> <span class="nx">FFTSize</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Create workspace</span>
</span><span class='line'>  <span class="nx">wspace</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">wspace</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">wspace</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="nx">C</span><span class="p">.</span><span class="nx">malloc</span><span class="p">(</span><span class="nx">byteSizeOfFloat64</span> <span class="o">*</span> <span class="nx">numFreqBins</span><span class="p">))</span>
</span><span class='line'>      <span class="k">defer</span> <span class="nx">C</span><span class="p">.</span><span class="nx">free</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="nx">wspace</span><span class="p">[</span><span class="nx">i</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Perform star</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">Star</span><span class="p">((</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">x</span><span class="p">)),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">fs</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">timeAxis</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">f0</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">)),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">**</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">wspace</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Copy to go slice</span>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">spectrogram</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">spectrogram</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">CArrayToGoSlice</span><span class="p">(</span><span class="nx">wspace</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">numFreqBins</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">spectrogram</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上で使っているutility function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">CArrayToGoSlice</span><span class="p">(</span><span class="nx">array</span> <span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">,</span> <span class="nx">length</span> <span class="nx">C</span><span class="p">.</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">slice</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="nx">length</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">b</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">GoBytes</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span><span class="p">(</span><span class="nx">array</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">byteSizeOfFloat64</span><span class="o">*</span><span class="nx">length</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">binary</span><span class="p">.</span><span class="nx">Read</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">NewReader</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span> <span class="nx">binary</span><span class="p">.</span><span class="nx">LittleEndian</span><span class="p">,</span> <span class="nx">slice</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">slice</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>[]*C.double のスライスを作り、作業領域のメモリを確保する（Tips2の内容+メモリ確保）</li>
<li>[]*C.double のスライスをdouble** にキャストして、Cの関数を実行（Tips2の内容）</li>
<li>[]*C.double から[][]float64に変換する（Tips3の内容）</li>
</ul>


<p>という手順になってます</p>

<p><strong>※2013/03/27 追記</strong>
:もっとシンプルかつ効率的（deep copyの必要がないように）に書けた。[][]float64で返り値用のスライスを作り、それを[]<em>double型に変換してCに渡せば、[][]float64に変更が反映されるので、そもそも[]</em>doubleから[][]float64に変換する必要はなかった。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Star</span><span class="p">(</span><span class="nx">x</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">fs</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">[][]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">FFTSize</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">size_t</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">GetFFTSizeForStar</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">fs</span><span class="p">)))</span>
</span><span class='line'>  <span class="nx">numFreqBins</span> <span class="o">:=</span> <span class="nx">C</span><span class="p">.</span><span class="nx">size_t</span><span class="p">(</span><span class="nx">FFTSize</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">spectrogram</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">spectrogram</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">numFreqBins</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">spectrogramUsedInC</span> <span class="o">:=</span> <span class="nx">Make2DCArrayAlternative</span><span class="p">(</span><span class="nx">spectrogram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Perform star</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">Star</span><span class="p">((</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">x</span><span class="p">)),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">fs</span><span class="p">),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">timeAxis</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">f0</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">f0</span><span class="p">)),</span>
</span><span class='line'>      <span class="p">(</span><span class="o">**</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">spectrogramUsedInC</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">spectrogram</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">Make2DCArrayAlternative</span><span class="p">(</span><span class="nx">matrix</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">[]</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alternative</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">matrix</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">alternative</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// DO NOT free because the source slice is managed by Go</span>
</span><span class='line'>      <span class="nx">alternative</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="o">*</span><span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">alternative</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわりに</h2>

<ul>
<li>ポインタのポインタを引数に取る関数のラップはめんどくさい</li>
<li>Goは使いやすいのにcgoは使いにくい</li>
<li>cgoつらい</li>
<li>よりいい方法があれば教えて下さい</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[音声分析変換合成システムWORLDのGoラッパーを書いた]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/22/go-world/"/>
    <updated>2014-03-22T18:28:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/22/go-world</id>
    <content type="html"><![CDATA[<h2>音声分析変換合成システムWORLD</h2>

<p>WORLDとは、山梨大学の森勢先生が作られている高品質な音声分析変換合成システムです。非常に高品質かつ高速に動作するのが良い所です。詳細は以下のURLへ</p>

<p><a href="http://ml.cs.yamanashi.ac.jp/world/">http://ml.cs.yamanashi.ac.jp/world/</a></p>

<p>オリジナルはC+＋で書かれていますが、Goからも使えるようにラッパーを書きました。非常にいいソフトウェアなので、もしよろしければどうぞ</p>

<h2>GO-WORLD</h2>

<p><a href="https://github.com/r9y9/go-world">https://github.com/r9y9/go-world</a></p>

<p>使い方について、ほんの少し解説を書きます</p>

<p>※ubuntu12.04でのみ動作確認してます。</p>

<h2>準備</h2>

<h3>1. WORLDのインストール</h3>

<p>まずWORLDをインストールする必要があります。公式のパッケージではinstallerに相当するものがなかったので、作りました</p>

<p><a href="https://github.com/r9y9/world">https://github.com/r9y9/world</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> ./waf configure <span class="o">&amp;&amp;</span> ./waf
</span><span class='line'> sudo ./waf install
</span></code></pre></td></tr></table></div></figure>


<p>でインストールできます。</p>

<p>なお、WORLDは最新版ではなく0.1.2としています。最新版にすると自分の環境でビルドコケてしまったので…</p>

<h3>2. GO-WORLDのインストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>go get github.com/r9y9/go-world
</span></code></pre></td></tr></table></div></figure>


<p>簡単ですね！</p>

<h2>使い方</h2>

<h3>1. インポートする</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">import</span> <span class="s">&quot;github.com/r9y9/go-world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. worldのインスタンスを作る</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">w</span> <span class="o">:=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">,</span> <span class="nx">framePeriod</span><span class="p">)</span> <span class="c1">// e.g. (44100, 5)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 好きなworldのメソッドを呼ぶ</h3>

<h4>基本周波数の推定: Dio</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Dio</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">w</span><span class="p">.</span><span class="nx">NewDioOption</span><span class="p">())</span> <span class="c1">// default option is used</span>
</span></code></pre></td></tr></table></div></figure>


<h4>スペクトル包絡の推定: Star</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Star</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>励起信号の推定: Platinum</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">residual</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Platinum</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>パラメータから音声の再合成: Synthesis</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">synthesized</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Synthesis</span><span class="p">(</span><span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">,</span> <span class="nx">residual</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>使い方例.</h2>

<p>音声（wavファイル）を分析して、パラメータから音声を再合成する例を紹介します。80行弱と少し長いですがはっつけておきます</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;flag&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/mjibson/go-dsp/wav&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/go-world&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">defaultDioOption</span> <span class="p">=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">DioOption</span><span class="p">{</span>
</span><span class='line'>  <span class="nx">F0Floor</span><span class="p">:</span>          <span class="mf">80.0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">F0Ceil</span><span class="p">:</span>           <span class="mf">640.0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">FramePeriod</span><span class="p">:</span>      <span class="mi">5</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">ChannelsInOctave</span><span class="p">:</span> <span class="mf">4.0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">Speed</span><span class="p">:</span>            <span class="mi">6</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 音声を基本周波数、スペクトル包絡、励起信号の三つに分解したあと、再合成します</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">worldExample</span><span class="p">(</span><span class="nx">input</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">sampleRate</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span> <span class="o">:=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">,</span> <span class="nx">defaultDioOption</span><span class="p">.</span><span class="nx">FramePeriod</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1. Fundamental frequency</span>
</span><span class='line'>  <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Dio</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">defaultDioOption</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. Spectral envelope</span>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Star</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3. Excitation spectrum</span>
</span><span class='line'>  <span class="nx">residual</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Platinum</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4. Synthesis</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Synthesis</span><span class="p">(</span><span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">,</span> <span class="nx">residual</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 音声を基本周波数、スペクトル包絡、非周期成分の三つに分解したあと、再合成します</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">worldExampleAp</span><span class="p">(</span><span class="nx">input</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">sampleRate</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">w</span> <span class="o">:=</span> <span class="nx">world</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">,</span> <span class="nx">defaultDioOption</span><span class="p">.</span><span class="nx">FramePeriod</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 1. Fundamental frequency</span>
</span><span class='line'>  <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Dio</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">defaultDioOption</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. Spectral envelope</span>
</span><span class='line'>  <span class="nx">spectrogram</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">Star</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">timeAxis</span><span class="p">,</span> <span class="nx">f0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 3. Apiriodiciy</span>
</span><span class='line'>  <span class="nx">apiriodicity</span><span class="p">,</span> <span class="nx">targetF0</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nx">AperiodicityRatio</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">f0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 4. Synthesis</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">w</span><span class="p">.</span><span class="nx">SynthesisFromAperiodicity</span><span class="p">(</span><span class="nx">f0</span><span class="p">,</span> <span class="nx">spectrogram</span><span class="p">,</span> <span class="nx">apiriodicity</span><span class="p">,</span> <span class="nx">targetF0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">GetMonoDataFromWavData</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">val</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ifilename</span> <span class="o">:=</span> <span class="nx">flag</span><span class="p">.</span><span class="nx">String</span><span class="p">(</span><span class="s">&quot;i&quot;</span><span class="p">,</span> <span class="s">&quot;default.wav&quot;</span><span class="p">,</span> <span class="s">&quot;Input filename&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">flag</span><span class="p">.</span><span class="nx">Parse</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Read wav data</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="o">*</span><span class="nx">ifilename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">w</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">wav</span><span class="p">.</span><span class="nx">ReadWav</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">werr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">input</span> <span class="o">:=</span> <span class="nx">GetMonoDataFromWavData</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">Data</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">sampleRate</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">SampleRate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">synthesized</span> <span class="o">:=</span> <span class="nx">worldExample</span><span class="p">(</span><span class="nx">input</span><span class="p">,</span> <span class="nx">sampleRate</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">// synthesized := worldExampleAp(input, sampleRate)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">synthesized</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Goだとメモリ管理きにしなくていいしそこそこ速いし読みやすいし書きやすいし楽でいいですね（信者</p>

<h2>おわりに</h2>

<ul>
<li>GoはC++ほど速くはないですが、C++の何倍も書きやすいし読みやすい（メンテしやすい）ので、個人的にオススメです（パフォーマンスが厳しく要求される場合には、C++の方がいいかもしれません）</li>
<li>WORLD良いソフトウェアなので使いましょう</li>
</ul>


<h2>ちなみに</h2>

<p>元はと言えば、オレオレ基本周波数推定（YINもどき）が微妙に精度悪くて代替を探していたとき、</p>

<ul>
<li>SPTKのRAPTかSWIPE使おうかな…</li>
<li>RAPTもSWIPEもSPTK.hにインタフェースがない…</li>
<li>うわRAPTのコード意味わからん</li>
<li>SWIPEのコードまじ謎</li>
<li>後藤さんのPreFest実装しよう</li>
<li>あれ上手くいかない…orz</li>
<li>どうしようかな…</li>
</ul>


<p>となっていたときに、森勢先生が書いたと思われる以下の文献を見つけて、</p>

<p><a href="http://crestmuse.jp/handbookMI/pdf/2_2_PitchExtraction_Morise.pdf">2-2 基本周波数推定（歌声研究に関する視点から）</a></p>

<blockquote><p>本方法は，低域に雑音が存在する音声に対する推定は困難であるが，低域の雑音が存在しない音声の場合，SWIPE′ や NDF と実質的に同等の性能を達成しつつ，計算時間を SWIPE′の 1/42, NDF の 1/80 にまで低減可能である．</p></blockquote>

<p>あぁworld使おう（白目</p>

<p>となり、ラッパーを書くにいたりましたとさ、おしまい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restricted Boltzmann Machines with MNIST]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/06/restricted-boltzmann-machines-mnist/"/>
    <updated>2014-03-06T23:29:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/06/restricted-boltzmann-machines-mnist</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/RBM_mnist_Hidden_500_layers.png" title="&#34;RBM training result on MNIST handwritten digit dataset. Each image represents a filter learned by RBM.&#34;" alt="&#34;RBM training result on MNIST handwritten digit dataset. Each image represents a filter learned by RBM.&#34;"></p>

<p>ディープ某を使った研究を再現してみたくて、最近某ニューラルネットに手を出し始めた。で、手始めにRestricted Boltzmann Machinesを実装してみたので、</p>

<ul>
<li>MNISTを使って学習した結果の重み（22*22=484個）を貼っとく（↑）</li>
<li>得た知見をまとめとく</li>
<li>Goのコード貼っとく</li>
</ul>


<p>ってな感じで書いておく</p>

<p>(本当はRBMについて自分なりの解釈を書こうと思ったのだけど、それはまた今度)</p>

<h2>実験条件</h2>

<p>データベースはmnist。手書き数字認識で有名なアレ。学習の条件は、</p>

<ul>
<li>隠れ層のユニット数: 500</li>
<li>mini-batch size: 20</li>
<li>iterationの回数: 15</li>
</ul>


<h2>対数尤度の変化</h2>

<p><img class="center" src="http://r9y9.github.io/images/RBM_mnist_Hidden_500_log_likelihood.png" title="&#34;Pseudo log-likelihood on mnist databae.&#34;" alt="&#34;Pseudo log-likelihood on mnist databae.&#34;"></p>

<p>以下グラフに表示している生データ</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 -196.59046099622128
</span><span class='line'>1 -70.31708616742365
</span><span class='line'>2 -65.29499371647965
</span><span class='line'>3 -62.37983267378022
</span><span class='line'>4 -61.5359019358253
</span><span class='line'>5 -60.917772257650164
</span><span class='line'>6 -59.64207778426757
</span><span class='line'>7 -59.42201674307857
</span><span class='line'>8 -59.18497336138633
</span><span class='line'>9 -58.277168243126305
</span><span class='line'>10 -58.36279288392401
</span><span class='line'>11 -58.57805165724595
</span><span class='line'>12 -57.71043215987184
</span><span class='line'>13 -58.17783142034138
</span><span class='line'>14 -57.53629129936344</span></code></pre></td></tr></table></div></figure>


<p>尤度上がると安心する。厳密に対数尤度を計算することは難しいので、<a href="http://deeplearning.net/tutorial/rbm.html">Restricted Boltzmann Machines (RBM) | DeepLearning Tutorial</a> にある擬似尤度を参考にした</p>

<h2>学習時間</h2>

<p>うちのcore2duoのPCで4時間弱だった気がする（うろ覚え</p>

<p>隠れ層のユニット数100だと、40分ほどだった</p>

<h2>知見</h2>

<p>今の所、試行錯誤して自分が得た知見は、</p>

<ul>
<li>sample by sampleのSGDよりmini-batch SGDの方が安定して尤度上がる</li>
<li>mini-batch sizeを大きくしすぎると学習が進まない。20くらいがちょうど良かった</li>
<li>k-CD のkを大きくしてもさほど学習結果変わらない（計算コストはけっこう増すけど）</li>
<li>persistent CDを使ってもあまりよくならない（計算コストはけっこう増すけど）</li>
<li>やっぱ1-CDで十分だった</li>
<li>データの正規化方法によって結構結果も変わる。ノイズを足すかどうか、とか</li>
<li>学習率超重要すぎわろた。今回の場合は0.1くらいかちょうど良かった</li>
<li>隠れ層のユニット数が大きいほど学習が上手く行けばと尤度は上がる(?)</li>
</ul>


<p>まぁだいたい <a href="http://www.cs.toronto.edu/~hinton/absps/guideTR.pdf">A Practical Guide to Training Restricted Boltzmann Machines (PDF)</a> に書いてあるけど、実際に肌で感じて理解した。persistent CDはもうちょっと成果出て欲しい。データ変えると成果出るんかな？</p>

<h2>コード</h2>

<p>コアの部分だけ、一応</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
<span class='line-number'>276</span>
<span class='line-number'>277</span>
<span class='line-number'>278</span>
<span class='line-number'>279</span>
<span class='line-number'>280</span>
<span class='line-number'>281</span>
<span class='line-number'>282</span>
<span class='line-number'>283</span>
<span class='line-number'>284</span>
<span class='line-number'>285</span>
<span class='line-number'>286</span>
<span class='line-number'>287</span>
<span class='line-number'>288</span>
<span class='line-number'>289</span>
<span class='line-number'>290</span>
<span class='line-number'>291</span>
<span class='line-number'>292</span>
<span class='line-number'>293</span>
<span class='line-number'>294</span>
<span class='line-number'>295</span>
<span class='line-number'>296</span>
<span class='line-number'>297</span>
<span class='line-number'>298</span>
<span class='line-number'>299</span>
<span class='line-number'>300</span>
<span class='line-number'>301</span>
<span class='line-number'>302</span>
<span class='line-number'>303</span>
<span class='line-number'>304</span>
<span class='line-number'>305</span>
<span class='line-number'>306</span>
<span class='line-number'>307</span>
<span class='line-number'>308</span>
<span class='line-number'>309</span>
<span class='line-number'>310</span>
<span class='line-number'>311</span>
<span class='line-number'>312</span>
<span class='line-number'>313</span>
<span class='line-number'>314</span>
<span class='line-number'>315</span>
<span class='line-number'>316</span>
<span class='line-number'>317</span>
<span class='line-number'>318</span>
<span class='line-number'>319</span>
<span class='line-number'>320</span>
<span class='line-number'>321</span>
<span class='line-number'>322</span>
<span class='line-number'>323</span>
<span class='line-number'>324</span>
<span class='line-number'>325</span>
<span class='line-number'>326</span>
<span class='line-number'>327</span>
<span class='line-number'>328</span>
<span class='line-number'>329</span>
<span class='line-number'>330</span>
<span class='line-number'>331</span>
<span class='line-number'>332</span>
<span class='line-number'>333</span>
<span class='line-number'>334</span>
<span class='line-number'>335</span>
<span class='line-number'>336</span>
<span class='line-number'>337</span>
<span class='line-number'>338</span>
<span class='line-number'>339</span>
<span class='line-number'>340</span>
<span class='line-number'>341</span>
<span class='line-number'>342</span>
<span class='line-number'>343</span>
<span class='line-number'>344</span>
<span class='line-number'>345</span>
<span class='line-number'>346</span>
<span class='line-number'>347</span>
<span class='line-number'>348</span>
<span class='line-number'>349</span>
<span class='line-number'>350</span>
<span class='line-number'>351</span>
<span class='line-number'>352</span>
<span class='line-number'>353</span>
<span class='line-number'>354</span>
<span class='line-number'>355</span>
<span class='line-number'>356</span>
<span class='line-number'>357</span>
<span class='line-number'>358</span>
<span class='line-number'>359</span>
<span class='line-number'>360</span>
<span class='line-number'>361</span>
<span class='line-number'>362</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">rbm</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;encoding/json&quot;</span>
</span><span class='line'>  <span class="s">&quot;errors&quot;</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/nn&quot;</span> <span class="c1">// sigmoid, matrix</span>
</span><span class='line'>  <span class="s">&quot;math&quot;</span>
</span><span class='line'>  <span class="s">&quot;math/rand&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'>  <span class="s">&quot;time&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// References:</span>
</span><span class='line'><span class="c1">// [1] G. Hinton, &quot;A Practical Guide to Training Restricted Boltzmann Machines&quot;,</span>
</span><span class='line'><span class="c1">// UTML TR 2010-003.</span>
</span><span class='line'><span class="c1">// url: http://www.cs.toronto.edu/~hinton/absps/guideTR.pdf</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// [2] A. Fischer and C. Igel. &quot;An introduction to restricted Boltzmann machines&quot;,</span>
</span><span class='line'><span class="c1">// Proc. of the 17th Iberoamerican Congress on Pattern Recognition (CIARP),</span>
</span><span class='line'><span class="c1">// Volume 7441 of LNCS, pages 14–36. Springer, 2012</span>
</span><span class='line'><span class="c1">// url: http://image.diku.dk/igel/paper/AItRBM-proof.pdf</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// [3] Restricted Boltzmann Machines (RBM),  DeepLearning tutorial</span>
</span><span class='line'><span class="c1">// url: http://deeplearning.net/tutorial/rbm.html</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Notes about implementation:</span>
</span><span class='line'><span class="c1">// Notation used in this code basically follows [2].</span>
</span><span class='line'><span class="c1">// e.g. W for weight, B for bias of visible layer, C for bias of hidden layer.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Graphical representation of Restricted Boltzmann Machines (RBM).</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//     ○ ○ .... ○  h(hidden layer), c(bias)</span>
</span><span class='line'><span class="c1">//     /\ /\ /    /\</span>
</span><span class='line'><span class="c1">//    ○ ○ ○ ... ○ v(visible layer), b(bias)</span>
</span><span class='line'><span class="kd">type</span> <span class="nx">RBM</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">W</span>               <span class="p">[][]</span><span class="kt">float64</span> <span class="c1">// Weight</span>
</span><span class='line'>  <span class="nx">B</span>               <span class="p">[]</span><span class="kt">float64</span>   <span class="c1">// Bias of visible layer</span>
</span><span class='line'>  <span class="nx">C</span>               <span class="p">[]</span><span class="kt">float64</span>   <span class="c1">// Bias of hidden layer</span>
</span><span class='line'>  <span class="nx">NumHiddenUnits</span>  <span class="kt">int</span>
</span><span class='line'>  <span class="nx">NumVisibleUnits</span> <span class="kt">int</span>
</span><span class='line'>  <span class="nx">Option</span>          <span class="nx">TrainingOption</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">TrainingOption</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">LearningRate</span>        <span class="kt">float64</span>
</span><span class='line'>  <span class="nx">OrderOfGibbsSamping</span> <span class="kt">int</span> <span class="c1">// It is known that 1 is enough for many cases.</span>
</span><span class='line'>  <span class="nx">Epoches</span>             <span class="kt">int</span>
</span><span class='line'>  <span class="nx">MiniBatchSize</span>       <span class="kt">int</span>
</span><span class='line'>  <span class="nx">L2Regularization</span>    <span class="kt">bool</span>
</span><span class='line'>  <span class="nx">RegularizationRate</span>  <span class="kt">float64</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NewRBM creates new RBM instance. It requires input data and number of</span>
</span><span class='line'><span class="c1">// hidden units to initialize RBM.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewRBM</span><span class="p">(</span><span class="nx">numVisibleUnits</span><span class="p">,</span> <span class="nx">numHiddenUnits</span> <span class="kt">int</span><span class="p">)</span> <span class="o">*</span><span class="nx">RBM</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rbm</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">RBM</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rand</span><span class="p">.</span><span class="nx">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span> <span class="p">=</span> <span class="nx">nn</span><span class="p">.</span><span class="nx">MakeMatrix</span><span class="p">(</span><span class="nx">numHiddenUnits</span><span class="p">,</span> <span class="nx">numVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">numVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">numHiddenUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span> <span class="p">=</span> <span class="nx">numVisibleUnits</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span> <span class="p">=</span> <span class="nx">numHiddenUnits</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">InitRBM</span><span class="p">()</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rbm</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NewRBMWithParameters returns RBM instance given RBM parameters.</span>
</span><span class='line'><span class="c1">// This func will be used in Deep Belief Networks.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">NewRBMWithParameters</span><span class="p">(</span><span class="nx">W</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">B</span><span class="p">,</span> <span class="nx">C</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">RBM</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rbm</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">RBM</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">B</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span> <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">C</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">W</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span> <span class="o">||</span> <span class="nb">len</span><span class="p">(</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">!=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Shape of weight matrix is wrong.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">rand</span><span class="p">.</span><span class="nx">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Now</span><span class="p">().</span><span class="nx">UnixNano</span><span class="p">())</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span> <span class="p">=</span> <span class="nx">W</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span> <span class="p">=</span> <span class="nx">B</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span> <span class="p">=</span> <span class="nx">C</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rbm</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// LoadRBM loads RBM from a dump file and return its instatnce.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">LoadRBM</span><span class="p">(</span><span class="nx">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="nx">RBM</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewDecoder</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rbm</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">RBM</span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nx">Decode</span><span class="p">(</span><span class="nx">rbm</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rbm</span><span class="p">,</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Dump writes RBM parameters to file in json format.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">Dump</span><span class="p">(</span><span class="nx">filename</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Create</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">encoder</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nx">NewEncoder</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">err</span> <span class="p">=</span> <span class="nx">encoder</span><span class="p">.</span><span class="nx">Encode</span><span class="p">(</span><span class="nx">rbm</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Heuristic initialization of visible bias.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">InitVisibleBiasUsingTrainingData</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Init B (bias of visible layer)</span>
</span><span class='line'>  <span class="nx">activeRateInVisibleLayer</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">getActiveRateInVisibleLayer</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">activeRateInVisibleLayer</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="nx">activeRateInVisibleLayer</span><span class="p">[</span><span class="nx">j</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">getActiveRateInVisibleLayer</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rate</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">sample</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">rate</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">sample</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">rate</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rate</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">/=</span> <span class="nb">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">rate</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// InitRBM performes a heuristic parameter initialization.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">InitRBM</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Init W</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.01</span> <span class="o">*</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">NormFloat64</span><span class="p">()</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Init C (bias of hidden layer)</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// P_H_Given_V returns the conditinal probability of a hidden unit given a set of visible units.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">P_H_Given_V</span><span class="p">(</span><span class="nx">hiddenIndex</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">v</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sum</span> <span class="o">:=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">hiddenIndex</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">*</span> <span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">nn</span><span class="p">.</span><span class="nx">Sigmoid</span><span class="p">(</span><span class="nx">sum</span> <span class="o">+</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span><span class="p">[</span><span class="nx">hiddenIndex</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// P_V_Given_H returns the conditinal probability of a visible unit given a set of hidden units.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">P_V_Given_H</span><span class="p">(</span><span class="nx">visibleIndex</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">h</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sum</span> <span class="o">:=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">visibleIndex</span><span class="p">]</span> <span class="o">*</span> <span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">nn</span><span class="p">.</span><span class="nx">Sigmoid</span><span class="p">(</span><span class="nx">sum</span> <span class="o">+</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">visibleIndex</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// GibbsSampling performs k-Gibbs sampling algorithm,</span>
</span><span class='line'><span class="c1">// where k is the number of iterations in gibbs sampling.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">GibbsSampling</span><span class="p">(</span><span class="nx">v</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">k</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Initial value is set to input</span>
</span><span class='line'>  <span class="nx">vUsedInSamping</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
</span><span class='line'>  <span class="nb">copy</span><span class="p">(</span><span class="nx">vUsedInSamping</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">t</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">t</span> <span class="p">&lt;</span> <span class="nx">k</span><span class="p">;</span> <span class="nx">t</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sampledH</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">P_H_Given_V</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">vUsedInSamping</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">p</span> <span class="p">&gt;</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Float64</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">sampledH</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="mf">1.0</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">sampledH</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.0</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">P_V_Given_H</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="nx">sampledH</span><span class="p">)</span>
</span><span class='line'>          <span class="k">if</span> <span class="nx">p</span> <span class="p">&gt;</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Float64</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">vUsedInSamping</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mf">1.0</span>
</span><span class='line'>          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">vUsedInSamping</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mf">0.0</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">vUsedInSamping</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">flip</span><span class="p">(</span><span class="nx">x</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">bit</span> <span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">y</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">x</span><span class="p">))</span>
</span><span class='line'>  <span class="nb">copy</span><span class="p">(</span><span class="nx">y</span><span class="p">,</span> <span class="nx">x</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">y</span><span class="p">[</span><span class="nx">bit</span><span class="p">]</span> <span class="p">=</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="nx">x</span><span class="p">[</span><span class="nx">bit</span><span class="p">]</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">y</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// FreeEnergy returns F(v), the free energy of RBM given a visible vector v.</span>
</span><span class='line'><span class="c1">// refs: eq. (25) in [1].</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">FreeEnergy</span><span class="p">(</span><span class="nx">v</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">energy</span> <span class="o">:=</span> <span class="mf">0.0</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">energy</span> <span class="o">-=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">*</span> <span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">*</span> <span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">energy</span> <span class="o">-=</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Exp</span><span class="p">(</span><span class="nx">sum</span><span class="p">))</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">energy</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// PseudoLogLikelihood returns pseudo log-likelihood for a given input data.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">PseudoLogLikelihood</span><span class="p">(</span><span class="nx">v</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bitIndex</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nx">Int</span><span class="p">()</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fe</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">FreeEnergy</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">feFlip</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">FreeEnergy</span><span class="p">(</span><span class="nx">flip</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span> <span class="nx">bitIndex</span><span class="p">))</span>
</span><span class='line'>  <span class="nx">cost</span> <span class="o">:=</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">)</span> <span class="o">*</span> <span class="nx">math</span><span class="p">.</span><span class="nx">Log</span><span class="p">(</span><span class="nx">nn</span><span class="p">.</span><span class="nx">Sigmoid</span><span class="p">(</span><span class="nx">feFlip</span><span class="o">-</span><span class="nx">fe</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cost</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// PseudoLogLikelihood returns pseudo log-likelihood for a given dataset (or mini-batch).</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">PseudoLogLikelihoodForAllData</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sum</span> <span class="o">:=</span> <span class="mf">0.0</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">PseudoLogLikelihood</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">cost</span> <span class="o">:=</span> <span class="nx">sum</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">cost</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ComputeGradient returns gradients of RBM parameters for a given (mini-batch) dataset.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">ComputeGradient</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">([][]</span><span class="kt">float64</span><span class="p">,</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gradW</span> <span class="o">:=</span> <span class="nx">nn</span><span class="p">.</span><span class="nx">MakeMatrix</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">gradB</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">gradC</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Gibbs Sampling</span>
</span><span class='line'>      <span class="nx">gibbsStart</span> <span class="o">:=</span> <span class="nx">v</span>
</span><span class='line'>      <span class="nx">vAfterSamping</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">GibbsSampling</span><span class="p">(</span><span class="nx">gibbsStart</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">OrderOfGibbsSamping</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// pre-computation that is used in gradient computation</span>
</span><span class='line'>      <span class="nx">p_h_given_v1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">p_h_given_v2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">)</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">p_h_given_v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">P_H_Given_V</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span>
</span><span class='line'>          <span class="nx">p_h_given_v2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">P_H_Given_V</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">vAfterSamping</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Gompute gradient of W</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">gradW</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">p_h_given_v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">-</span> <span class="nx">p_h_given_v2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">*</span><span class="nx">vAfterSamping</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Gompute gradient of B</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">gradB</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">v</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">-</span> <span class="nx">vAfterSamping</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Gompute gradient of C</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">gradC</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">p_h_given_v1</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">-</span> <span class="nx">p_h_given_v2</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">gradW</span><span class="p">,</span> <span class="nx">gradB</span><span class="p">,</span> <span class="nx">gradC</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">ParseTrainingOption</span><span class="p">(</span><span class="nx">option</span> <span class="nx">TrainingOption</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span> <span class="p">=</span> <span class="nx">option</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Number of mini-batchs must be larger than zero.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">Epoches</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Epoches must be larger than zero.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">OrderOfGibbsSamping</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Order of Gibbs sampling must be larger than zero.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">LearningRate</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">errors</span><span class="p">.</span><span class="nx">New</span><span class="p">(</span><span class="s">&quot;Learning rate must be specified to train RBMs.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Train performs Contrastive divergense learning algorithm to train RBM.</span>
</span><span class='line'><span class="c1">// The alrogithm is basedd on (mini-batch) Stochastic Gradient Ascent.</span>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">rbm</span> <span class="o">*</span><span class="nx">RBM</span><span class="p">)</span> <span class="nx">Train</span><span class="p">(</span><span class="nx">data</span> <span class="p">[][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">option</span> <span class="nx">TrainingOption</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">ParseTrainingOption</span><span class="p">(</span><span class="nx">option</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">err</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">numMiniBatches</span> <span class="o">:=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">/</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="nx">epoch</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">epoch</span> <span class="p">&lt;</span> <span class="nx">option</span><span class="p">.</span><span class="nx">Epoches</span><span class="p">;</span> <span class="nx">epoch</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Monitoring</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">epoch</span><span class="p">,</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">PseudoLogLikelihoodForAllData</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">for</span> <span class="nx">m</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">m</span> <span class="p">&lt;</span> <span class="nx">numMiniBatches</span><span class="p">;</span> <span class="nx">m</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// Compute Gradient</span>
</span><span class='line'>          <span class="nx">batch</span> <span class="o">:=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">m</span><span class="o">*</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span> <span class="p">:</span> <span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span><span class="p">]</span>
</span><span class='line'>          <span class="nx">gradW</span><span class="p">,</span> <span class="nx">gradB</span><span class="p">,</span> <span class="nx">gradC</span> <span class="o">:=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">ComputeGradient</span><span class="p">(</span><span class="nx">batch</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Update W</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">LearningRate</span> <span class="o">*</span> <span class="nx">gradW</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span><span class="p">)</span>
</span><span class='line'>                  <span class="k">if</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">L2Regularization</span> <span class="p">{</span>
</span><span class='line'>                      <span class="nx">rbm</span><span class="p">.</span><span class="nx">W</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">*=</span> <span class="p">(</span><span class="mf">1.0</span> <span class="o">-</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">RegularizationRate</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Update B</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumVisibleUnits</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">rbm</span><span class="p">.</span><span class="nx">B</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">LearningRate</span> <span class="o">*</span> <span class="nx">gradB</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// Update C</span>
</span><span class='line'>          <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">NumHiddenUnits</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">rbm</span><span class="p">.</span><span class="nx">C</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">LearningRate</span> <span class="o">*</span> <span class="nx">gradC</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">/</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">rbm</span><span class="p">.</span><span class="nx">Option</span><span class="p">.</span><span class="nx">MiniBatchSize</span><span class="p">)</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kc">nil</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使い方とかは察して（どうせ誰も使わないはず</p>

<p>今は、通常のRBMのvisible layerを連続値に拡張した Gaussian Bernoulli RBMを学習しようとしてるんだけど、これがムズイ。実装ミスもあるかもだけど、局所解に落ちまくってる気がする。</p>

<p>Gaussian Bernoulli RBM、Deep Belief Networks, Deep Neural Networksについてはまた今度</p>

<h2>参考資料</h2>

<ul>
<li><a href="http://image.diku.dk/igel/paper/AItRBM-proof.pdf">An Introduction to Restricted Boltzmann Machines (PDF)</a></li>
<li><a href="http://www.cs.toronto.edu/~hinton/absps/guideTR.pdf">A Practical Guide to Training Restricted Boltzmann Machines (PDF)</a></li>
<li><a href="http://m%0Aglab.blogspot.jp/2012/08/restricted-boltzmann-machine.html">Restricted Boltzmann Machineの学習手法についての簡単なまとめ | 映像奮闘記</a></li>
<li><a href="http://d.hatena.ne.jp/saket/20121212">ゆるふわ Restricted Boltzmann Machine | Risky Dune</a></li>
<li><a href="http://deeplearning.net/tutorial/rbm.html">Restricted Boltzmann Machines (RBM) | DeepLearning Tutorial</a></li>
<li><a href="http://imonad.com/rbm/restricted-boltzmann-machine/">Restricted Boltzmann Machine &ndash; Short Tutorial | iMonad</a></li>
<li><a href="http://scikit-learn.org/stable/auto_examples/plot_rbm_logistic_classification.html">Restricted Boltzmann Machine features for digit classification | scikit-learn</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[マルコフ確率場 (MRF) と条件付き確率場 (CRF) の違い]]></title>
    <link href="http://r9y9.github.io/blog/2014/03/01/difference-between-mrf-and-crf/"/>
    <updated>2014-03-01T22:06:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/03/01/difference-between-mrf-and-crf</id>
    <content type="html"><![CDATA[<p>一番の違いは、生成モデルか識別モデルか、ということ。それぞれ、</p>

<ul>
<li>Markov Random Fields (MRF) は生成モデル</li>
<li>Conditional Random Fields (CRF) は識別モデル</li>
</ul>


<p>です。</p>

<ul>
<li><a href="http://metaoptimize.com/qa/questions/4021/what-is-exactly-the-difference-between-mrf-and-crf">What is exactly the difference between MRF and CRF</a></li>
</ul>


<p>ここを見ると割とすっきりする。</p>

<p>ただ、少しスムーズに納得できないことがありまして…それは、MRFもCRFもグラフィカルモデルで書くと無向グラフとなること。識別モデルは無向グラフで生成モデルは有向グラフなんじゃ…？と思ってしまう人もいるんじゃないかと思う（いなかったらごめんなさい）。</p>

<h2>グラフィカルモデルとしての表現</h2>

<p>一般に、生成モデルは有向グラフの形で記述され、識別モデルは無向グラフとして記述される。例えば、隠れマルコフモデル (HMM) は有向グラフで、条件付き確率場 (CRF) は無向グラフで表される。図を貼っておく</p>

<p><img class="center" src="http://r9y9.github.io/images/HMM_and_CRF.png"></p>

<p>その道の人には、馴染みのある図だと思う（ｼｭｳﾛﾝから引っ張ってきた）。グレーの○が観測変数、白い○が隠れ変数です</p>

<p>ここで重要なのは、例外もあるということ。具体的には、タイトルにあるMRFは生成モデルだけど無向グラフで書かれる。MRFというと、例えばRestricted Boltzmann Machine とかね！</p>

<p>単純なことだけど、これを知らないとMRFについて学習するときにつっかかってしまうので注意</p>

<p><a href="http://homepages.inf.ed.ac.uk/csutton/publications/crftut-fnt.pdf">An Introduction to Conditional Random Fields</a> の2.2 Generative versus Discriminative Models から引用すると、</p>

<blockquote><p>Because a generative model takes the form p(y,x) = p(y)p(x|y), it is often natural to represent a generative model by a directed graph in which in outputs y topologically precede the inputs. Similarly, we will see that it is often natural to represent a discriminative model by a undirected graph. However, this need not always be the case, and both undirected generative models, such as the Markov random ﬁeld (2.32), and directed discriminative models, such as the MEMM (6.2), are sometimes used. It can also be useful to depict discriminative models by directed graphs in which the x precede the y.</p></blockquote>

<p>らしいです</p>

<h2>結論</h2>

<ul>
<li>生成モデル＝有向グラフ、識別モデル＝無向グラフで<strong>表されるとは限らない</strong></li>
<li>ことMRFに関して言えば生成モデルだけど無向グラフで表されるよ</li>
</ul>


<p>ということです</p>

<p>さらに言えば、MRFとCRFはグラフィカルモデルでは同じように書けてしまうけれど、両者には明確な違いがあることに気をつけましょう、ということです（ちょっと自信ない）</p>

<p>間違っていたら教えて下さい</p>

<h2>参考</h2>

<ul>
<li><a href="http://metaoptimize.com/qa/questions/4021/what-is-exactly-the-difference-between-mrf-and-crf">What is exactly the difference between MRF and CRF</a></li>
<li><a href="http://homepages.inf.ed.ac.uk/csutton/publications/crftut-fnt.pdf">An Introduction to Conditional Random Fields (PDF)</a></li>
<li><a href="http://www.cs.helsinki.fi/group/cosco/Teaching/Probability/2010/lecture5_MRF2.pdf">More about Undirected Graphical Models</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goで音声信号処理をしたいのでSPTKのGoラッパーを書く]]></title>
    <link href="http://r9y9.github.io/blog/2014/02/10/sptk-go-wrapper/"/>
    <updated>2014-02-10T02:33:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/02/10/sptk-go-wrapper</id>
    <content type="html"><![CDATA[<p>Goが最近オススメです（n度目</p>

<p>Goで音声信号処理をしたいけど、全部一から書くのは大変だし、既存の資産は出来るだけ再利用したい。というわけで、C言語製の<a href="http://sp-tk.sourceforge.net/">SPTK</a> をGoから使えるようにする</p>

<h2>cgo</h2>

<p>GoにはC言語のライブラリを使うには、cgoというパッケージを使えばできる。使い方は、公式のページ等を見るといいと思う <a href="http://golang.org/cmd/cgo/">http://golang.org/cmd/cgo/</a></p>

<p>Cの関数や変数などには、 <code>C.</code> でアクセスできる</p>

<h2>ラッパー</h2>

<p>例えば以下のように書く。MFCCの計算を例に上げる。必要に応じで<code>SPTK.h</code>に定義されている関数をラップする</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">sptk</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// #cgo pkg-config: SPTK</span>
</span><span class='line'><span class="c1">// #cgo LDFLAGS: -lSPTK -lSPTKlib -lm</span>
</span><span class='line'><span class="c1">// #include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="c1">// #include &lt;SPTK/SPTK.h&gt;</span>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;C&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/****************************************************************</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    $Id: _mfcc.c,v 1.11 2012/12/21 11:27:35 mataki Exp $</span>
</span><span class='line'>
</span><span class='line'><span class="cm">    Mel-Frequency Cepstral Analysis</span>
</span><span class='line'>
</span><span class='line'><span class="cm">        void mfcc(in, mc, sampleFreq, alpha, eps, wlng, flng</span>
</span><span class='line'><span class="cm">                  m, n, ceplift, dftmode, usehamming);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">        double  *in        : input sequence</span>
</span><span class='line'><span class="cm">        double  *mc        : mel-frequency cepstral coefficients</span>
</span><span class='line'><span class="cm">        double  sampleFreq : sample frequency</span>
</span><span class='line'><span class="cm">        double  alpha      : pre-emphasis coefficient</span>
</span><span class='line'><span class="cm">        double  eps        : epsilon</span>
</span><span class='line'><span class="cm">        int     wlng       : frame length of input sequence</span>
</span><span class='line'><span class="cm">        int     flng       : frame length for fft</span>
</span><span class='line'><span class="cm">        int     m          : order of cepstrum</span>
</span><span class='line'><span class="cm">        int     n          : number of channel for mel-filter bank</span>
</span><span class='line'><span class="cm">        int     ceplift    : liftering coefficients</span>
</span><span class='line'><span class="cm">        Boolean dftmode    : use dft</span>
</span><span class='line'><span class="cm">        Boolean usehamming : use hamming window</span>
</span><span class='line'>
</span><span class='line'><span class="cm">******************************************************************/</span>
</span><span class='line'><span class="c1">// MFCC returns Mel-frequency Cepstral Coefficients.</span>
</span><span class='line'><span class="kd">func</span> <span class="nx">MFCC</span><span class="p">(</span><span class="nx">audioBuffer</span> <span class="p">[]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">sampleRate</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">alpha</span><span class="p">,</span> <span class="nx">eps</span> <span class="kt">float64</span><span class="p">,</span> <span class="nx">wlng</span><span class="p">,</span> <span class="nx">flng</span><span class="p">,</span> <span class="nx">m</span><span class="p">,</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">ceplift</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">dftmode</span><span class="p">,</span> <span class="nx">usehamming</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">[]</span><span class="kt">float64</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Convert go bool to C.Boolean (so annoying..</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">dftmodeInGo</span><span class="p">,</span> <span class="nx">usehammingInGo</span> <span class="nx">C</span><span class="p">.</span><span class="nx">Boolean</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">dftmode</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dftmodeInGo</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">dftmodeInGo</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">usehamming</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">usehammingInGo</span> <span class="p">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">usehammingInGo</span> <span class="p">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">resultBuffer</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">m</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">C</span><span class="p">.</span><span class="nx">mfcc</span><span class="p">((</span><span class="o">*</span><span class="nx">_Ctype_double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">audioBuffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="p">(</span><span class="o">*</span><span class="nx">_Ctype_double</span><span class="p">)(</span><span class="o">&amp;</span><span class="nx">resultBuffer</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">(</span><span class="nx">alpha</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nx">double</span><span class="p">(</span><span class="nx">eps</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">wlng</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">flng</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span> <span class="nx">C</span><span class="p">.</span><span class="nb">int</span><span class="p">(</span><span class="nx">ceplift</span><span class="p">),</span> <span class="nx">dftmodeInGo</span><span class="p">,</span> <span class="nx">usehammingInGo</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">resultBuffer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>個人的な流儀で、結果は必ずreturnするようにしている</li>
<li>boolからC言語のBooleanっぽいenumへの変換でめんどくさいことしてます</li>
<li>コメントはSPTK 3.6のコードから引っ張って来ました</li>
</ul>


<p>このパッケージを使う前に、 <a href="https://github.com/r9y9/SPTK">https://github.com/r9y9/SPTK</a> を使ってSPTKをインストールする。本家のを使ってもいいですが、その場合は #cgo の設定が変わると思います。公式のSPTK、pkg-configに対応してくれんかな…</p>

<p>最初は、LDFLAGS つけ忘れてて、symbol not foundってなってつらまった。次回から気をつけよう</p>

<p>SPTKの、特に（メル）ケプストラム分析当たりは本当に難しいので、論文読んで実装するのも大変だし中身がわからなくてもラップする方が合理的、という結論に至りました。簡単なもの（例えば、メルケプからMLSA filterの係数への変換とか）は、依存関係を少なくするためにもGo nativeで書きなおした方がいいです</p>

<p>コードは気が向いたら上げる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOSアプリ開発に使える単体テスト・結合テストのツール]]></title>
    <link href="http://r9y9.github.io/blog/2014/02/04/ios-testing-tools/"/>
    <updated>2014-02-04T00:29:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/02/04/ios-testing-tools</id>
    <content type="html"><![CDATA[<h1>まとめ</h1>

<p>結局どれがいいのか？時と場合によるが、自分の場合、以下の二つを使うのがベストではないかと考えた</p>

<ul>
<li><a href="https://github.com/allending/Kiwi">Kiwi</a> (単体テスト用)</li>
<li><a href="https://github.com/kif-framework/KIF">KIF</a> (UI周りの結合テスト用)</li>
</ul>


<p>追記
unit testに関しては以下の記事がよくまとまっているので、そちらを参照した方が良いです
<a href="http://magneticbear.com/lab/ios-unit-testing/">http://magneticbear.com/lab/ios-unit-testing/</a></p>

<h1>Why so?</h1>

<h2>単体テスト</h2>

<p>代表的なツールににApple製のSenTestingやXCTestがある。が、SenTestingはXcode 5に上がってからXcodeのデフォルトがXCTestになったので、新しいアプリではあえてSenTestingを使う必要はない（ちなみにSentTestingからXCTestへの変更は容易）。</p>

<p>KiwiかXCTestか、といった問題は、正直人によると思うが、RSpecに慣れてる人はKiwiのが使いやすいと思う。XCTestはデフォでサポートされているし使いやすいというメリットはあるが、Kiwiは<a href="https://github.com/allending/Kiwi/wiki/Asynchronous-Testing">Asynchronous Testing</a> をデフォでサポートしてるというメリットもあるので、個人的にはKiwiを選択した。XCTestとかSenTestingでもAsynchronus testingは可能だけど若干めんどいし、非同期処理のテストのしやすさはやはり重要</p>

<h2>結合テスト</h2>

<p><a href="http://qiita.com/hirayaCM/items/513786631575db8e1fb1">iOSアプリのUIテストツール候補 | Qiita</a> によくまとまってる。色々調べた結果、一番メジャーなのは <a href="https://github.com/kif-framework/KIF">KIF</a> っぽい、かつKIFの方がgithubで人気だからいいんじゃねという短絡的発想です。その他ツールとの比較は、しばらくして気が向いたら書きます。。。</p>

<p>ちなみにGoogleさんも使ってるらしい → <a href="http://googletesting.blogspot.jp/2013/08/how-google-team-tests-mobile-apps.html">http://googletesting.blogspot.jp/2013/08/how-google-team-tests-mobile-apps.html</a></p>

<p>では、セットアップ方法についてまとめる。</p>

<h1>Kiwi <a href="https://github.com/allending/Kiwi">[code]</a></h1>

<p>基本的に、<a href="https://github.com/allending/Kiwi/wiki/Getting-Started-with-Kiwi-2.0">Getting Started with Kiwi 2.0</a> を読めばわかる</p>

<h2>Kiwiのセットアップ</h2>

<p>CocoaPodsを使う場合についてのみ記述する</p>

<h3>Xcode 5</h3>

<p>あらかじめXcodeでテスト用のターゲットを作成して、Podfileに以下を追加する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target :単体テストのターゲットの名前, :exclusive =&gt; true do
</span><span class='line'>   pod 'Kiwi/XCTest'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h3>Xcode 5未満</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target :単体テストのターゲットの名前, :exclusive =&gt; true do
</span><span class='line'>   pod 'Kiwi'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>XCTestを使うかどうか、の違いです</p>

<h2>インストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure>


<p>でOK、簡単。公式のtutorialは結構長いけど、基本的に確認するだけの作業</p>

<h1>KIF <a href="https://github.com/kif-framework/KIF">[code]</a></h1>

<h2>Podfile</h2>

<p>Xcodeで結合テスト用のターゲットを作成して、Podfileに以下を追加する</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>target '結合テストのターゲットの名前', :exclusive =&gt; true do
</span><span class='line'>  pod 'KIF', '~&gt; 2.0'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>インストール</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pod install</span></code></pre></td></tr></table></div></figure>


<p>でOK、簡単。インストール方法の詳細はGithubのREADMEを参照</p>

<p>Githubで検索するとサンプルプロジェクト等出てくるので、そちらで動作確認をするのがおすすめです。</p>

<p>例えばこれ <a href="https://github.com/ishkawa/KIFNextExample">https://github.com/ishkawa/KIFNextExample</a></p>

<h2>注意点</h2>

<p>KIFはXCTestではなくSenTestingをベースに作られてる（XCTestに対応しようとしてる<a href="https://github.com/kif-framework/KIF/pull/313">pull request</a>もあるようだけど、まだ本家にmergeされてない）。よって、リンクするライブラリにはSenTestingを指定しないといけない。KiwiはXCTestを使ってるので、注意が必要</p>

<h1>継続的インテグレーション?</h1>

<p>Jenkins or Bots 使えばいいと思います。どっちもメリットデメリットがあって難しいよなーと思うけど、Jenkinsの方が柔軟性は圧倒的に高いので、Jenkinsを使おうと思ってます。</p>

<h1>参考</h1>

<ul>
<li><a href="http://www.fastcolabs.com/3012626/open-company/finally-three-ways-to-automate-ios-app-testing">Finally, Three Ways To Automate iOS App Testing  By Brad Heintz, James Paolantonio and Aaron Schildkrout</a></li>
<li><a href="http://blog.ishkawa.org/blog/2013/08/31/unit-test/">iOS開発でのユニットテストを身につけるには | blog.ishkawa.org</a></li>
<li><a href="http://qiita.com/hirayaCM/items/513786631575db8e1fb1">iOSアプリのUIテストツール候補 | Qiita</a></li>
<li><a href="https://github.com/mixi-inc/iOSTraining/wiki/11.3-Kiwi%E3%82%92%E7%94%A8%E3%81%84%E3%81%9F%E6%8C%AF%E3%82%8B%E8%88%9E%E3%81%84%E3%83%86%E3%82%B9%E3%83%88">Kiwiを用いた振る舞いテスト | mixi-inc iOSTraining</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goに関する良記事]]></title>
    <link href="http://r9y9.github.io/blog/2014/02/02/ready-to-use-go/"/>
    <updated>2014-02-02T16:57:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/02/02/ready-to-use-go</id>
    <content type="html"><![CDATA[<p>いくつか見つけたのでメモる</p>

<h2><a href="http://www.jellolabs.com/blog/why-golang-is-ready-for-early-stage-startups.html">Why We Think GoLang Is Ready For Early Stage Startups</a></h2>

<p>とあるスタートアップがウェブでGoを使うという意思決定をした理由、その決断に至るまでのプロセスが書かれている。また、その過程でGoを使うことによる利点・欠点が簡潔にまとめられてる。参考になった</p>

<h2><a href="https://kidoman.com/programming/go-getter.html">Go Getter &ndash; Performance comparison to C++ business card ray tracer</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/go-improvements.png"></p>

<p>GoとC++のパフォーマンスの比較。Ray tracingというCGの手法を用いて比較をしていて、Goでも最適化するとC++並のスピード出ますよ（そしてC++と違ってGCあるしマルチコアにも簡単にできるしGoいいよ）って話。（自分へのメモのため画像を拝借していますが、意味がわからないと思うので元記事を参照してください）</p>

<p>ただoptimized Go vs un-optimized C++なので注意。Goの最適化が主旨の記事です</p>

<h2><a href="https://kidoman.com/programming/go-getter-part-2.html">Go Getter Part 2 &ndash; Now with C++ optimizations</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/go-vs-cpp-after-both-optimized.png"></p>

<p>さっきの続きで、こちらでは最適化したC++と比較されてる。OpenMP使って並列化してるようだけど、あれ、まだC++の方が遅い・・（正直意外</p>

<h2><a href="https://kidoman.com/programming/go-getter-part-3.html">Go Getter Part 3 &ndash; Further optimizations and a multi-threaded C++ version</a></h2>

<p><img class="center" src="http://r9y9.github.io/images/2048x2048-3.png"></p>

<p>これで最後。C++（とGo）をめちゃくちゃ最適化した、って奴ですね。C++の方が二倍程度速くなったよう。
ただ、やっぱC++の方が良かった、というよりGoがC++並になるのも時間の問題って感じですね。</p>

<h2>さて</h2>

<p>このまとめで何が言いたかったというと</p>

<p><strong>「Goを使わない選択肢がない」</strong></p>

<p>まぁ半分冗談（ケースバイケースだし）ですが、僕のようにC++をメインで使っているけど不満ありまくりな人は、一度Go使ってみてもいいんじゃないでしょうか、と思います。C++の百倍書きやすいです</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goでクロマベクトルを求める]]></title>
    <link href="http://r9y9.github.io/blog/2014/01/28/go-chroma-vector/"/>
    <updated>2014-01-28T23:08:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/01/28/go-chroma-vector</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/pcp_result.png" title="&#34;Chromagram&#34;" alt="&#34;Chromagram&#34;"></p>

<p>Chromagram。ドレミの歌の冒頭を分析した結果です</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="p">(</span>
</span><span class='line'>  <span class="s">&quot;fmt&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/mjibson/go-dsp/wav&quot;</span>
</span><span class='line'>  <span class="s">&quot;github.com/r9y9/go-msptools/pcp&quot;</span>
</span><span class='line'>  <span class="s">&quot;log&quot;</span>
</span><span class='line'>  <span class="s">&quot;os&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// reading data</span>
</span><span class='line'>  <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Open</span><span class="p">(</span><span class="s">&quot;/path/to/file.wav&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nx">Close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">wav</span><span class="p">,</span> <span class="nx">werr</span> <span class="o">:=</span> <span class="nx">wav</span><span class="p">.</span><span class="nx">ReadWav</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">werr</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">log</span><span class="p">.</span><span class="nx">Fatal</span><span class="p">(</span><span class="nx">werr</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// convert to []float64 from []int</span>
</span><span class='line'>  <span class="nx">data</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">wav</span><span class="p">.</span><span class="nx">Data</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">data</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">float64</span><span class="p">(</span><span class="nx">wav</span><span class="p">.</span><span class="nx">Data</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">i</span><span class="p">])</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// settings for analysis</span>
</span><span class='line'>  <span class="nx">frameShift</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">float64</span><span class="p">(</span><span class="nx">wav</span><span class="p">.</span><span class="nx">SampleRate</span><span class="p">)</span> <span class="o">/</span> <span class="mf">100.0</span><span class="p">)</span> <span class="c1">// 0.01 sec</span>
</span><span class='line'>  <span class="nx">sampleRate</span> <span class="o">:=</span> <span class="nb">int</span><span class="p">(</span><span class="nx">wav</span><span class="p">.</span><span class="nx">SampleRate</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// create PCP extrator</span>
</span><span class='line'>  <span class="nx">p</span> <span class="o">:=</span> <span class="nx">pcp</span><span class="p">.</span><span class="nx">NewPCP</span><span class="p">(</span><span class="nx">sampleRate</span><span class="p">,</span> <span class="nx">frameShift</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// analysis roop</span>
</span><span class='line'>  <span class="nx">result</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">float64</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">NumFrames</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">NumFrames</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">pcp</span> <span class="o">:=</span> <span class="nx">p</span><span class="p">.</span><span class="nx">PCP</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">i</span><span class="o">*</span><span class="nx">frameShift</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">//pcp := p.PCPNormalized(data, i*frameShift)</span>
</span><span class='line'>      <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">pcp</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// print as a gnuplot 3D plotting format</span>
</span><span class='line'>  <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;#&quot;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">len</span><span class="p">(</span><span class="nx">result</span><span class="p">))</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">spec</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">result</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">val</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">spec</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="nx">fmt</span><span class="p">.</span><span class="nx">Println</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こんな感じでOK。Chromagramをgnuplot形式で標準出力に出力します</p>

<h2>Pitch Class Profile (PCP) in Go <a href="https://github.com/r9y9/go-msptools/tree/master/pcp">[Code]</a></h2>

<p>どうやってクロマベクトルを計算しているかざっくり説明すると、</p>

<ul>
<li>入力信号をガボールウェーブレット変換</li>
<li>オクターブ無視して12次元に圧縮（例えば55Hz, 110Hz, 220Hz, 440Hz はすべてAとする）</li>
</ul>


<p>という手順で求めてます</p>

<p>Goかどうかなんてどうでもいいんだけど、まぁC++に比べて書きやすすぎて泣けるよね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Goで信号処理]]></title>
    <link href="http://r9y9.github.io/blog/2014/01/27/start-coding-go-msptools/"/>
    <updated>2014-01-27T02:17:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/01/27/start-coding-go-msptools</id>
    <content type="html"><![CDATA[<p>最近Go言語を触っていて、これがなかなかいい感じ。そこそこ速いので、信号処理や機械学習も行けると思う</p>

<h2>Goの良い所</h2>

<ul>
<li>デフォでたくさん便利なパッケージがある。http, json, os, &hellip;</li>
<li>パッケージのインストールはとても簡単。go getするだけ</li>
<li>デフォでテストの枠組みがある</li>
<li>gofmtでコードのformattingしてくれるので書き方で迷わなくて良い</li>
<li>使わないパッケージをimportするとコンパイルエラーになるし自然と疎結合なコードを書くようになる</li>
<li>並列処理を言語レベルでサポート</li>
<li>GCあるのでメモリ管理なんてしなくていい</li>
<li>全般的にC++より書きやすい（ここ重要）</li>
<li>そこそこ速い（C++よりは遅いけど）</li>
</ul>


<p>ホントはPythonでさくっと書きたいけどパフォーマンスもほしいからC++で書くかー（嫌だけど）。と思ってた自分にはちょうどいい</p>

<h2>Goの悪い所（主にC++と比べて）</h2>

<ul>
<li>ちょっと遅い。さっと試したウェーブレット変換は、1.5倍くらい遅かった気がする（うろ覚え）</li>
<li>C++やpythonに比べるとライブラリは少ない</li>
<li>言語仕様とかそのへんが優れてるかどうかは判断つきませんごめんなさい</li>
</ul>


<h1><a href="https://github.com/r9y9/go-msptools">Go-msptools</a></h1>

<p>で、大学院時代から継ぎ足し継ぎ足ししてきた秘伝の信号処理C++ライブラリがあるんだけど、一部切り出してGoで書いてみた</p>

<ul>
<li><a href="https://github.com/r9y9/go-msptools">Github</a></li>
<li><a href="http://godoc.org/github.com/r9y9/go-msptools">GoDoc</a></li>
</ul>


<p>音声信号処理用にケプストラム分析とかLPCとか色々書いたけど、考えた結果既存のライブラリ使うほうがいいやってなったので音楽に特化することにしました。SPTK様には頭が上がりません</p>

<p>さておき、パッケージは今の所二つ</p>

<ul>
<li><a href="https://github.com/r9y9/go-msptools/tree/master/cwt">cwt</a> : ガボール連続ウェーブレット変換</li>
<li><a href="https://github.com/r9y9/go-msptools/tree/master/pcp">pcp</a> : クロマベクトル</li>
</ul>


<p>Go始めたてのころに <a href="https://github.com/mjibson/go-dsp/">go-dsp</a> というデジタル信号処理ライブラリを見つけて、もろそれに影響受けた名前になってる。</p>

<p>徐々にC++版を移植していこうかなと考え中</p>

<h2>おまけ：音の信号処理に役立ちそうなライブラリ</h2>

<ul>
<li><a href="https://github.com/mjibson/go-dsp/">go-dsp</a></li>
<li><a href="https://code.google.com/p/portaudio-go/">portaudio-go</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs themes - Sublime Text風のcolor themeが気に入った]]></title>
    <link href="http://r9y9.github.io/blog/2013/12/23/emacs-sublime-text-like-theme/"/>
    <updated>2013-12-23T23:32:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/12/23/emacs-sublime-text-like-theme</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/emacs-sublime-text-like-theme.png" title="&#34;Spolsky, Sublime Text風のcolor theme on Ubuntu 12.04&#34;" alt="&#34;Spolsky, Sublime Text風のcolor theme on Ubuntu 12.04&#34;"></p>

<p>Sublime Textのデフォルトの色が結構好きなので、emacsも同じようにしたいと思ってた。今まではずっと<a href="http://ethanschoonover.com/solarized">solarized</a>を使ってたけど、個人的にはsublime textっぽい方が好き。</p>

<p>と思って探してたらよさげなのを見つけた。</p>

<p><a href="https://github.com/owainlewis/emacs-color-themes">https://github.com/owainlewis/emacs-color-themes</a></p>

<p>若干目がチカチカせんこともないけど、しばらく使ってみる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MLSA digital filter のC++実装]]></title>
    <link href="http://r9y9.github.io/blog/2013/12/01/mlsa-filter-with-c-plus-plus/"/>
    <updated>2013-12-01T23:43:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/12/01/mlsa-filter-with-c-plus-plus</id>
    <content type="html"><![CDATA[<p><a href="http://r9y9.github.io/blog/2013/09/23/mlsa-filter-wakaran/">MLSAフィルタわからん</a>という記事を書いて早2ヶ月、ようやく出来た。</p>

<p>Mel-log spectrum approximate (MLSA) filterというのは、対数振幅スペクトルを近似するようにメルケプストラムから直接音声を合成するデジタルフィルタです。<a href="http://sp-tk.sourceforge.net/">SPTK</a>のmlsa filterと比較して完全に計算結果が一致したので、間違ってはないはず。MLSAフィルタを使ってメルケプから音声合成するプログラムをC++で自分で書きたいという稀有な人であれば、役に立つと思います。基本的に、SPTKのmlsa filterの再実装です。</p>

<h1>mlsa_filter.h</h1>

<p><a href="https://gist.github.com/r9y9/7735120">https://gist.github.com/r9y9/7735120</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#pragma once</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;memory&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cassert&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">sp</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MLSA BASE digital filter (Mel-log Spectrum Approximate digital filter)</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">mlsa_base_filter</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_base_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_base_filter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">alpha_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">delay_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">mlsa_base_filter</span><span class="o">::</span><span class="n">mlsa_base_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">)</span>
</span><span class='line'><span class="o">:</span> <span class="n">alpha_</span><span class="p">(</span><span class="n">alpha</span><span class="p">),</span>
</span><span class='line'>  <span class="n">delay_</span><span class="p">(</span><span class="n">order</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">mlsa_base_filter</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delay_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">delay_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">alpha_</span><span class="o">*</span><span class="n">alpha_</span><span class="p">)</span><span class="o">*</span><span class="n">delay_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">alpha_</span><span class="o">*</span><span class="n">delay_</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">alpha_</span><span class="o">*</span><span class="p">(</span><span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">+=</span> <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// special case</span>
</span><span class='line'>  <span class="c1">// TODO: other solution?</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">+=</span> <span class="n">delay_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// t &lt;- t+1 in time</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">delay_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MLSA digital filter cascaded</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">mlsa_base_cascaded_filter</span> <span class="p">{</span>
</span><span class='line'> <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_base_cascaded_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span>
</span><span class='line'>              <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">,</span>
</span><span class='line'>              <span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_base_cascaded_filter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">mlsa_base_filter</span><span class="o">&gt;&gt;</span> <span class="n">base_f_</span><span class="p">;</span> <span class="c1">// cascadad filters</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">delay_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">pade_coef_</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">mlsa_base_cascaded_filter</span><span class="o">::</span><span class="n">mlsa_base_cascaded_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span>
</span><span class='line'>                           <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">,</span>
</span><span class='line'>                           <span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span><span class="p">)</span>
</span><span class='line'>  <span class="o">:</span> <span class="n">delay_</span><span class="p">(</span><span class="n">n_pade</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
</span><span class='line'>  <span class="n">pade_coef_</span><span class="p">(</span><span class="n">n_pade</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n_pade</span> <span class="o">!=</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="n">n_pade</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The number of pade approximations must be 4 or 5.&quot;</span>
</span><span class='line'>        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">assert</span><span class="p">(</span><span class="n">n_pade</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">||</span> <span class="n">n_pade</span> <span class="o">==</span> <span class="mi">5</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n_pade</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">mlsa_base_filter</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="n">mlsa_base_filter</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">alpha</span><span class="p">);</span>
</span><span class='line'>    <span class="n">base_f_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">mlsa_base_filter</span><span class="o">&gt;</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n_pade</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">4.999273e-1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.067005e-1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.170221e-2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mf">5.656279e-4</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n_pade</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mf">4.999391e-1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.107098e-1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.369984e-2</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="mf">9.564853e-4</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pade_coef_</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mf">3.041721e-5</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">mlsa_base_cascaded_filter</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">feed_back</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">pade_coef_</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">base_f_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">filter</span><span class="p">(</span><span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">v</span> <span class="o">=</span> <span class="n">delay_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">pade_coef_</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">feed_back</span> <span class="o">+=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">feed_back</span> <span class="o">-=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">result</span> <span class="o">+=</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">delay_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">feed_back</span> <span class="o">+</span> <span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">+=</span> <span class="n">delay_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * MLSA digital filter (Mel-log Spectrum Approximate digital filter)</span>
</span><span class='line'><span class="cm"> * The filter consists of two stage cascade filters</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">mlsa_filter</span> <span class="p">{</span>
</span><span class='line'> <span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">mlsa_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span> <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span><span class="p">);</span>
</span><span class='line'> <span class="o">~</span><span class="n">mlsa_filter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'> <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'> <span class="kt">double</span> <span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'> <span class="k">private</span><span class="o">:</span>
</span><span class='line'> <span class="n">mlsa_filter</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">double</span> <span class="n">alpha_</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">mlsa_base_cascaded_filter</span><span class="o">&gt;</span> <span class="n">f1_</span><span class="p">;</span> <span class="c1">// first stage</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">mlsa_base_cascaded_filter</span><span class="o">&gt;</span> <span class="n">f2_</span><span class="p">;</span> <span class="c1">// second stage</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">mlsa_filter</span><span class="o">::</span><span class="n">mlsa_filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span><span class="p">,</span>
</span><span class='line'>           <span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span><span class="p">,</span>
</span><span class='line'>           <span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span><span class="p">)</span>
</span><span class='line'>  <span class="o">:</span> <span class="n">alpha_</span><span class="p">(</span><span class="n">alpha</span><span class="p">),</span>
</span><span class='line'>  <span class="n">f1_</span><span class="p">(</span><span class="k">new</span> <span class="n">mlsa_base_cascaded_filter</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">n_pade</span><span class="p">)),</span>
</span><span class='line'>  <span class="n">f2_</span><span class="p">(</span><span class="k">new</span> <span class="n">mlsa_base_cascaded_filter</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">n_pade</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">mlsa_filter</span><span class="o">::~</span><span class="n">mlsa_filter</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">Vector</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">double</span> <span class="n">mlsa_filter</span><span class="o">::</span><span class="n">filter</span><span class="p">(</span><span class="k">const</span> <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="k">const</span> <span class="n">Vector</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 1. First stage filtering</span>
</span><span class='line'>  <span class="n">Vector</span> <span class="n">b1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]};</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">y</span> <span class="o">=</span> <span class="n">f1_</span><span class="o">-&gt;</span><span class="n">filter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">b1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 2. Second stage filtering</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">f2_</span><span class="o">-&gt;</span><span class="n">filter</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span> <span class="c1">// end namespace sp</span>
</span></code></pre></td></tr></table></div></figure>


<h1>使い方</h1>

<p>mlsa_filter.hをインクルードすればおｋ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;mlsa_filter.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// セットアップ</span>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">0.42</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">order</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">int</span> <span class="n">n_pade</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span><span class='line'><span class="n">sp</span><span class="o">::</span><span class="n">mlsa_filter</span> <span class="n">mlsa_f</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="n">alpha</span><span class="p">,</span> <span class="n">n_pade</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="c1">// MLSA フィルタリング </span>
</span><span class='line'><span class="err">出力一サンプル</span> <span class="o">=</span> <span class="n">mlsa_f</span><span class="p">.</span><span class="n">filter</span><span class="p">(</span><span class="err">入力一サンプル</span><span class="p">,</span> <span class="err">フィルタ係数</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h1>何で再実装したのか</h1>

<ul>
<li>mlsa filterをC++的なインタフェースで使いたかった</li>
<li>コード見たらまったく意味がわからなくて、意地でも理解してやろうと思った</li>
<li>反省はしている</li>
<li>知り合いの声質変換やってる方がMLSAフィルタを波形合成に使ってるっていうし、ちょっとやってみようかなって</li>
<li>あと最近音声合成の低レベルに手をつけようとと思ってたし勉強にもなるかなって</li>
<li>思ったんだ……んだ…だ…</li>
</ul>


<p>車輪の再開発はあんま良くないと思ってるけど許して。
誰かがリファクタせないかんのだ</p>

<h1>感想</h1>

<p>SPTKのmlsa filterは、正直に言うとこれまで読んできたコードの中で一二を争うほど難解でした（いうてC言語はあまり読んできてないので、Cだとこれが普通なのかもしれないけど）。特に、元コードの d: delayという変数の使われ方が複雑過ぎて、とても読みにくくございました。MLSAフィルタは複数のbase filterのcascade接続で表されるわけだけど、それぞれの遅延が一つのdという変数で管理されていたのです。つまり、</p>

<ul>
<li>d[1] ~ d[5] までは、あるフィルタの遅延</li>
<li>d[6] ~ d[11] までは、別のフィルタの遅延</li>
<li>d[12] ~ にはまた別のフィルタの遅延</li>
</ul>


<p>という感じです。</p>

<p>改善しようと思って、base filterというクラスを作ってそのクラスの状態として各フィルタの遅延を持たせて、見通しを良くしました</p>

<h2>さいごに</h2>

<p>MLSAフィルタ、難しいですね（小並感</p>

<p>いつかリアルタイム声質変換がやってみたいので、それに使う予定（worldを使うことになるかもしれんけど）。戸田先生当たりがやってる声質変換を一回真似してみたいと思ってる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPTKをC++から使えるようにする]]></title>
    <link href="http://r9y9.github.io/blog/2013/12/01/sptk-with-waf/"/>
    <updated>2013-12-01T18:46:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/12/01/sptk-with-waf</id>
    <content type="html"><![CDATA[<p><a href="http://sp-tk.sourceforge.net/">音声信号処理ツールキットSPTK</a>をC++から使おうと思ったら意外とハマってしまったので、</p>

<ul>
<li>C++から使えるようにC++コンパイラでコンパイルできるようにした</li>
<li>使いやすいようにwafを組み込みんだ</li>
</ul>


<p>リポジトリ: <a href="https://github.com/r9y9/SPTK">https://github.com/r9y9/SPTK</a></p>

<p>というわけで、使い方について簡単に書いておく</p>

<h1>SPTK について</h1>

<ul>
<li>SPTKを使うと何ができるか: <a href="http://aidiary.hatenablog.com/entry/20120701/1341126474">SPTKの使い方 (1) インストール・波形描画・音声再生 | 人工知能に関する断創録</a></li>
<li>SPTKとは: <a href="[http://sp-tk.sourceforge.net/]">Speech Signal Processing Toolkit (SPTK)</a></li>
</ul>


<h1>SPTK with waf</h1>

<p><a href="https://github.com/r9y9/SPTK">SPTK with waf</a>は、SPTKをwafでビルド管理できるようにしたものです。</p>

<ul>
<li>SPTKを共有ライブラリとしてインストールできます。</li>
<li>C、C++の好きな方でコンパイルできます。</li>
<li>wafが使えます（速い、出力がキレイ）</li>
<li>自分のC、C++コードからSPTKのメソッドを呼べます。</li>
<li>コマンドラインツールはインストールされません。</li>
</ul>


<p>コマンドラインツールを使いたい人は、元のconfigure scriptを使えば十分です。</p>

<h1>環境</h1>

<ul>
<li>Unix系</li>
</ul>


<p>Ubuntu 12.04 LTS 64 bitとMac OS X 10.9では確認済み</p>

<h1>SPTKのインストール</h1>

<p>リポジトリをクローンしたあと、</p>

<h2>Build</h2>

<pre><code> ./waf configure &amp;&amp; ./waf
</code></pre>

<h2>Build with clang++</h2>

<pre><code> CXX=clang++ ./waf configure &amp;&amp; ./waf
</code></pre>

<h2>Build with gcc</h2>

<pre><code> git checkout c
 ./waf configure &amp;&amp; ./waf
</code></pre>

<h2>Build with clang</h2>

<pre><code> git checkout c
 CC=clang ./waf configure &amp;&amp; ./waf
</code></pre>

<h2>Install</h2>

<pre><code> sudo ./waf install
</code></pre>

<ul>
<li>Include files: <code>/usr/local/include/SPTK</code></li>
<li>Library: <code>/usr/local/lib/SPTK</code></li>
<li>Pkg-config: <code>/usr/local/lib/pkgconfig</code></li>
</ul>


<p>オリジナルのSPTKとはインストール場所が異なります（オリジナルは、<code>/usr/local/SPTK</code>）</p>

<h1>SPTKを使ってコードを書く</h1>

<p><code>&lt;SPTK/SPTK.h&gt;</code> をインクルードして、好きな関数を呼ぶ</p>

<p>コンパイルは、例えば以下のようにする</p>

<pre><code> g++ test.cpp `pkg-config SPTK --cflags --libs`
</code></pre>

<p>面倒なので、example/ 内のコードを修正して使う（wafを使おう）のがおすすめです。</p>

<br/>


<h1>きっかけ</h1>

<ul>
<li>SPTKはコマンドラインツールだと思ってたけど、どうやらSPTK.hをインクルードすれば一通りのツールを使えるらしい</li>
<li>SPTK.hをインクルードして使う方法のマニュアルが見つからない…</li>
<li>SPTKはC言語で書かれてるし、C++から使うの地味にめんどくさい</li>
</ul>


<h1>C++から簡単に使いたかった</h1>

<ul>
<li>gccやclangだけじゃなくg++やclang++でコンパイルできるようにしよう</li>
<li>自分のコードのビルド管理にはwafを使ってるし、wafで管理できるようにしてしまおう</li>
<li>waf素晴らしいしな （参考: <a href="http://d.hatena.ne.jp/tanakh/20100212">waf チュートリアル | 純粋関数型雑記帳 </a>）</li>
</ul>


<h1>最後に</h1>

<p>SPTKもwafも素晴らしいので積極的に使おう＾＾</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MFCCの計算方法についてメモ]]></title>
    <link href="http://r9y9.github.io/blog/2013/11/24/mfcc-calculation-memo/"/>
    <updated>2013-11-24T22:29:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/11/24/mfcc-calculation-memo</id>
    <content type="html"><![CDATA[<h2>MFCC とは</h2>

<p>Mel-Frequency Cepstral Coefficients (MFCCs) のこと。音声認識でよく使われる、音声の特徴表現の代表的なもの。</p>

<h3>算出手順</h3>

<ul>
<li>音声信号を適当な長さのフレームで切り出し</li>
<li>窓がけ</li>
<li>フーリエ変換して対数振幅スペクトルを求める</li>
<li>メルフィルタバンクを掛けて、メル周波数スペクトルを求める</li>
<li>離散コサイン変換により、MFCCを求める</li>
</ul>


<p>以上。SPTKのmfccコマンドのソースもだいたいそうなってた。</p>

<h3>さて</h3>

<h4>ここに音声波形があるじゃろ？？</h4>

<p><img class="center" src="http://r9y9.github.io/images/speech-signal.png" title="&#34;音声信号を適当な長さのフレームで切り出し&#34;" alt="&#34;音声信号を適当な長さのフレームで切り出し&#34;"></p>

<h4>音声波形を窓がけして…</h4>

<p><img class="center" src="http://r9y9.github.io/images/windowed-signal.png" title="&#34;窓がけ&#34;" alt="&#34;窓がけ&#34;"></p>

<h4>さらにフーリエ変換して対数取って…</h4>

<p><img class="center" src="http://r9y9.github.io/images/log-amplitude.png" title="&#34;フーリエ変換して振幅スペクトルを求める&#34;" alt="&#34;フーリエ変換して振幅スペクトルを求める&#34;"></p>

<h4>ここでメルフィルタバンクの出番じゃ</h4>

<p><img class="center" src="http://r9y9.github.io/images/after-mel-filterbank.png" title="&#34;メルフィルタバンクを掛けて、メル周波数スペクトルを求める&#34;" alt="&#34;メルフィルタバンクを掛けて、メル周波数スペクトルを求める&#34;"></p>

<h4>最後に離散コサイン変換で完成じゃ</h4>

<p><img class="center" src="http://r9y9.github.io/images/MFCC.png" title="&#34;離散コサイン変換により、MFCCを求める&#34;" alt="&#34;離散コサイン変換により、MFCCを求める&#34;"></p>

<h2>まとめ</h2>

<ul>
<li>MFCC求めたかったら、普通はHTKかSPTK使えばいいんじゃないですかね。自分で書くと面倒くさいです</li>
<li>正規化はどうするのがいいのか、まだよくわかってない。単純にDCT（IIを使った）を最後に掛けると、かなり大きい値になって使いにくい。ので、 <a href="http://research.cs.tamu.edu/prism/lectures/sp/l9.pdf">http://research.cs.tamu.edu/prism/lectures/sp/l9.pdf</a> にもあるとおり、mel-filterbankの数（今回の場合は64）で割った。</li>
<li>間違ってるかもしれないけどご愛嬌</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://research.cs.tamu.edu/prism/lectures/sp/l9.pdf">L9: Cepstral analysis [PDF]</a></li>
<li><a href="http://shower.human.waseda.ac.jp/~m-kouki/pukiwiki_public/66.html">メル周波数ケプストラム（MFCC） | Miyazawa’s Pukiwiki 公開版</a></li>
<li><a href="http://aidiary.hatenablog.com/entry/20120225/1330179868">メル周波数ケプストラム係数（MFCC） | 人工知能に関する断創録</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[スペクトログラムとメル周波数スペクトログラムの可視化]]></title>
    <link href="http://r9y9.github.io/blog/2013/11/16/mel-spectrogram/"/>
    <updated>2013-11-16T23:07:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/11/16/mel-spectrogram</id>
    <content type="html"><![CDATA[<p>やったので貼っとくだけ</p>

<p><img class="center" src="http://r9y9.github.io/images/spectrogram.png" title="&#34;よくあるスペクトログラム&#34;" alt="&#34;よくあるスペクトログラム&#34;"></p>

<p><img class="center" src="http://r9y9.github.io/images/mel_spectrogram.png" title="&#34;メル周波数に変換したスペクトログラム&#34;" alt="&#34;メル周波数に変換したスペクトログラム&#34;"></p>

<p>低周波数の部分は解像度高い、高周波数は粗めというのがメル周波数のような対数周波数の特徴。ただし元々のスペクトルが線形なので、フィルタバンクかけても結果はご覧の通り。</p>

<p>今回は振幅を対数を取って表示した（ちなみに）。上のスペクトログラムは、周波数方向は512次元になっているけど、メル周波数の方は128になっている。直感的には、512次元の線形周波数スペクトルを、人間の聴覚特性に合うようにメル周波数に変換して次元圧縮するイメージ。</p>

<p>解説は、<a href="http://aidiary.hatenablog.com/entry/20120225/1330179868">メル周波数ケプストラム係数（MFCC） | 人工知能に関する断創録</a> を見よう。素晴らしいです</p>

<p>僕はと言えば特に解説する気も起きないので、C++コードでも貼っとこう（※間違ってたので、とりあえず消しました</p>

<h2>まとめ</h2>

<p>メルフィルタバンクかけるクラス作ってたら数時間潰した</p>

<h2>参考</h2>

<ul>
<li><a href="http://aidiary.hatenablog.com/entry/20120225/1330179868">メル周波数ケプストラム係数（MFCC） | 人工知能に関する断創録</a>

<ul>
<li> とても参考にしました。ただ、フィルタバンクかける際に正規化してない？元のスケールを保つために、上のコードでは正規化するようにした(<a href="http://ohm.nuigalway.ie/0809/mbyrne/Images.html#MFCC">ここ</a>の図のようなイメージ）</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkinsを使い始めたのでメモ。インストール方法とかプラグインとかテーマとか]]></title>
    <link href="http://r9y9.github.io/blog/2013/11/16/start-using-jenkins/"/>
    <updated>2013-11-16T12:27:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/11/16/start-using-jenkins</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/jenkins_doony.png" title="&#34;Jenkinsをdoonyというテーマにしたもの。jenkinsおじさんはいません&#34;" alt="&#34;Jenkinsをdoonyというテーマにしたもの。jenkinsおじさんはいません&#34;"></p>

<h2>Jenkinsとは</h2>

<p>超高機能cronだと思えばいいよ（先輩より</p>

<h2>Ubuntu 12.04へのインストール</h2>

<p>以下のURLに従えばできる。</p>

<p><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu">https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
</span><span class='line'>sudo sh -c <span class="s1">&#39;echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list&#39;</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install jenkins
</span></code></pre></td></tr></table></div></figure>


<p>まとめると、</p>

<ol>
<li>新しいjenkinsのpackageをリポジトリに追加して</li>
<li>apt-get でインストール（2013/11/16 現在だと、1.5.39が入る）</li>
</ol>


<p>※1の手順を省くと、少しバージョン（1.4.x）の古いjenkinsが入ってしまうので注意</p>

<h2>Mac OS Xへのインストール</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install jenkins
</span></code></pre></td></tr></table></div></figure>


<p>でおｋ。</p>

<h2>プラグイン</h2>

<p>インストールしたものをメモ。他にも便利なのはたくさんあると思う</p>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Configuration+Slicing+Plugin">Configuration Slicing plugin</a> 設定を一括で変更したいときに使う</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin">Jenkins GIT plugin</a> Git使うために</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin">Jenkins Email Extension Plugin</a> メール機能を拡張するため</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/JobConfigHistory+Plugin">Jenkins Job Configuration History Plugin</a> ジョブの変更履歴がサイドバーから見れる、便利</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Python+Plugin">Python Plugin</a> Pythonスクリプト書きたい</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Simple+Theme+Plugin">Simple Theme Plugin</a> テーマ変更するのに使う</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Timestamper">Timestamper</a> コンソール出力にタイムスタンプが付く、便利</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/jQuery+Plugin">Jenkins jQuery plugin</a> テーマにDoonyを使うためにいる</li>
</ul>


<h2>テーマをDoonyにする</h2>

<p>見やすい、オススメ。気に入った。</p>

<p><a href="https://github.com/kevinburke/doony">https://github.com/kevinburke/doony</a></p>

<p>上によれば、</p>

<blockquote><p>Doony is a series of UI improvements on top of Jenkins. Install this to make your Jenkins user experience much better.</p></blockquote>

<p>とのこと。良い。使い方などは、githubのdoonyのREADMEを見るか、あるいは以下の日本語の記事にも書いてある。</p>

<p><a href="http://safx-dev.blogspot.jp/2013/10/jenkinsuidoony.html">JenkinsのUIをすっきり変化させるテーマdoonyを試す | Safx</a></p>

<h3>必要なプラグイン</h3>

<ul>
<li>Simple Theme Plugin</li>
<li>Jenkins jQuery plugin</li>
</ul>


<p>※テーマのプラグインだけでなく、jqueryのプラグインもインストールしないとダメなので注意</p>

<h2>おわりに</h2>

<p>これでテストもろもろ自動化だー</p>

<h2>その他メモ</h2>

<ul>
<li>/etc/default/jenkinsでjava起動時に文字コードをutf-8にしても、コンソールのログで日本語が化ける？

<ul>
<li> /etc/default/jenkinsを変更前に実行したものは化けたまま。変更後に実行すると、化けない</li>
<li> Jenkinsのバージョンを1.4.xから1.5.39にしたらオプションつけなくても化けなくなった？たぶん</li>
<li> ちな、Macのbrewでインストールしたものは、日本語文字化け問題に悩まなかった。新し目のjenkinsはデフォがutf-8にでもなってんですかね</li>
</ul>
</li>
<li>brewでインストールすると、jenkinsユーザは作られない。ubuntuでインストールすると、jenkinsというユーザが作られ、jenkins権限でdeamonが立ち上がる

<ul>
<li> スクリプトでsudoするために、visudoで <code>jenkins ALL=(ALL) NOPASSWD:ALL</code> しておく</li>
</ul>
</li>
<li>workspaceの場所

<ul>
<li> brewでインストールした場合、~/.jenkins/ にできると思う</li>
<li> ubuntuの場合、/var/lib/jenkins/ にある</li>
</ul>
</li>
<li>Macの場合、jenkinsの実行ユーザをちゃんと考えないとですね</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MIT Media Lab 特別フォーラムに参加してきた]]></title>
    <link href="http://r9y9.github.io/blog/2013/11/03/mit-media-lab-talk-participated/"/>
    <updated>2013-11-03T22:31:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/11/03/mit-media-lab-talk-participated</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/mit_media_lab_talk_participated.jpg" title="&#34;MIT Media Lab Talk&#34;" alt="&#34;MIT Media Lab Talk&#34;"></p>

<p><a href="http://www.tdwa.com/tdw/special/forum/mitmedialab.html">TOKYO DESIGNES WEEK MIT Media Lab 特別フォーラム</a></p>

<p>すごい刺激になった。悔しかった。このままで終わりたくない。世の中にはすごい人がいる中で、自分が大したことも為せないでいること、ビジョンを持てていないこと、自分がとても小さな人間だと感じた。石井先生の話の一つに「ビジョンを持て」っていうのがあったけど、僕にはビジョンが圧倒的に欠けてると思った。</p>

<p>メディアラボの学生の発表は、内容に興味を感じたのはもちろん、プレゼンテーションの魅せ方が上手かった。一番面白かったのはsuper shoes。プレゼンの魅せ方も一際良かったし話の構成もわかりやすくて、super shoes自体も面白かった。自分の行きたい所、食べたいもの、聴きたい音楽、それらに合わせて道案内してくれる靴。</p>

<p>石井先生の話では、今の僕に一番響いたのは「屈辱力」という言葉だった。理由は単純で、今の僕が一番頻繁に感じている感情だから。石井先生の言葉で「出杭力」とか有名だけど、それはもうすでに身に染みてるので。打たれても打たれてもやるしかない。何度叩かれようが、出すぎるまでやる。</p>

<p>とはいえ、なかなか思ったようにできない。努力は最低条件と思っているが、十分にできていない。理想と現実のギャップが大きくて、毎日悔しいと感じる。恥ずかしい話ですね、こういうの書いてしまうあたり。僕は弱音はかずに頑張れるほど強くない・・・。</p>

<p>話がそれてしまったけど、それはさておき、パーティーで石井先生と話したとき、悔しいのは誰でも感じること、そこから何が出来るかが大事、的なことを言われた（はず…緊張していてうろ覚え…）。当たり前なんですけどね。最近、どうも悔しさの数だけ強くなれると思っていた節があるけど、正確にはそれは違って、強くなるチャンスが得られる、が正しいと思う。悔しさを感じただけでは、変われない。行動に移さないと行けない。変わるために、自分で一歩踏み出さねければならない。</p>

<p>最近、いつも通り毎日悔しいけど、その分楽しいよね。Mかもしれない。成長するって、人間の本質的な欲求の一つなんじゃないか（適当</p>

<p>っと、すごい恥ずかしいことを書いてしまった。ただせっかくなので、思ったことを残しておこうと思った。</p>

<p>Xiao Xiaoのピアノ、良かったよね。プレゼンもとても良かった。日本語しゃべってるXiao Xiaoに惚れた</p>

<p>趣向は違うけれど、自動伴奏紹介すればよかったよ。お前何やってんの？って言われて何も語れないとか、いやだなぁって思う。せっかく修士でやったんだし、もっとブラッシュアップして、使えるレベルにまで持っていきたい。僕だって、何のビジョンもなく自動伴奏やってたわけじゃないんだし。</p>

<p>当面やりたいことが、また増えた。</p>

<p>感じたこと一行まとめ</p>

<p>「なぜを突き詰めて、自分の本当にやりたいことを理解して、ビジョンを持ってひたすら進む」</p>

<p>ところでどうでもいいけど、最近、さくら荘7.5巻の生徒会長のはうはうな彼女、って短編読みましたが、はうはうかわいいですね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QtのQMediaPlayerを使って簡単なAudio playerを作る]]></title>
    <link href="http://r9y9.github.io/blog/2013/10/27/qt-mediaplayer-demo/"/>
    <updated>2013-10-27T00:06:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/10/27/qt-mediaplayer-demo</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/media-player_clipped_rev_1.png" title="&#34;A simple media player demo&#34;" alt="&#34;A simple media player demo&#34;"></p>

<p>Qtのmultimediaを使えば簡単に出来る。最低限の機能しかないけど試しに作ってみた。再生、停止、スライダー、ボリューム調整とかだけなら、100行くらいでできる。</p>

<p><a href="https://github.com/r9y9/media-player-demo">https://github.com/r9y9/media-player-demo</a></p>

<p>あまりにも簡単なコードだけど、何か音が流れるだけで満足してしまうのは普段低レベルのコードばっか書いてるからか…</p>

<p>感想はさておき、適当なアプリ作るのに、以下の当たりを参考にした</p>

<ul>
<li><a href="http://qt-project.org/doc/qt-5.0/qtmultimedia/multimediaoverview.html">Qt Multimedia Overview</a></li>
<li><a href="http://qt-project.org/doc/qt-5.0/qtmultimedia/qmediaplayer.html">QMediaPlayer Class</a></li>
<li><a href="http://qt-project.org/doc/qt-5.0/qtmultimedia/qml-qtmultimedia5-mediaplayer.html">MediaPlayer</a></li>
</ul>


<h2>メディアの再生</h2>

<p><a href="http://qt-project.org/doc/qt-5.0/qtmultimedia/qmediaplayer.html">QMediaPlayer Class</a> から引用すれば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">player</span> <span class="o">=</span> <span class="k">new</span> <span class="n">QMediaPlayer</span><span class="p">;</span>
</span><span class='line'><span class="n">connect</span><span class="p">(</span><span class="n">player</span><span class="p">,</span> <span class="n">SIGNAL</span><span class="p">(</span><span class="n">positionChanged</span><span class="p">(</span><span class="n">qint64</span><span class="p">)),</span> <span class="k">this</span><span class="p">,</span> <span class="n">SLOT</span><span class="p">(</span><span class="n">positionChanged</span><span class="p">(</span><span class="n">qint64</span><span class="p">)));</span>
</span><span class='line'><span class="n">player</span><span class="o">-&gt;</span><span class="n">setMedia</span><span class="p">(</span><span class="n">QUrl</span><span class="o">::</span><span class="n">fromLocalFile</span><span class="p">(</span><span class="s">&quot;/Users/me/Music/coolsong.mp3&quot;</span><span class="p">));</span>
</span><span class='line'><span class="n">player</span><span class="o">-&gt;</span><span class="n">setVolume</span><span class="p">(</span><span class="mi">50</span><span class="p">);</span>
</span><span class='line'><span class="n">player</span><span class="o">-&gt;</span><span class="n">play</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>で再生できる。簡単過ぎる。。</p>

<p>Qt5 になってから、さらにMultimediaが進化したらしいので、これからも色々使っていきたい。特にグラフィック周りがすごくなったとかなってないとか。今試行錯誤中</p>

<h2>Qtめも</h2>

<ul>
<li>Resourceを登録するとき、ちゃんとリソースファイルを&#8221;保存&#8221;しないとdesigner上では登録したリソースが出てこない</li>
<li>volume(50)だとけっこう小さい。ちなみに単位なんやねんということだけど、classのドキュメントには書いてなかった。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[逆連続ウェーブレット変換による信号の再構成]]></title>
    <link href="http://r9y9.github.io/blog/2013/10/21/signal-reconstruction-using-invere-cwt/"/>
    <updated>2013-10-21T01:00:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/10/21/signal-reconstruction-using-invere-cwt</id>
    <content type="html"><![CDATA[<p>やったのでメモ。おそらく正しくできたと思う。結果貼っとく。ウェーブレットの参考は以下の文献</p>

<p><a href="http://paos.colorado.edu/research/wavelets/bams_79_01_0061.pdf">Torrence, C. and G.P. Compo &ldquo;A Practical Guide to Wavelet Analysis&rdquo;, Bull. Am. Meteorol. Soc., 79, 61–78, 1998.</a></p>

<h2>ウェーブレットの条件</h2>

<p>マザーウェーブレットはmorletを使う</p>

<script type="math/tex; mode=display">
\begin{align}
\psi_{0}(\eta) = \pi^{-1/4}e^{i\omega_{0}\eta}e^{-\eta^{2}/2}
\end{align}
</script>


<p></p>

<p>文献に従って$\omega_{0} = 6.0$とした。</p>

<p>以下にいっぱい図を張る。軸は適当</p>

<h2>元の信号</h2>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/original_signal.png" title="&#34;The original signal&#34;" alt="&#34;The original signal&#34;"></p>

<h2>ウェーブレットスペクトログラム</h2>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/morlet_wavelet_spectrogram.png" title="&#34;Morlet wavelet spectrogram&#34;" alt="&#34;Morlet wavelet spectrogram&#34;"></p>

<p>Gaborではなく、Morletで求めたもの。スケールは、min=55hzで、25cent毎に8オクターブ分取った。一サンプル毎にウェーブレット変換を求めてるので、前回の記事でガボールウェーブレットで求めた奴よりよっぽど解像度高いっすね（前のは10ms毎だった、書いてなかったけど）。見てて綺麗（こなみ</p>

<p>計算はFFT使ってるので速い</p>

<p><a href="http://hp.vector.co.jp/authors/VA046927/gabor_wavelet/gabor_wavelet.html">http://hp.vector.co.jp/authors/VA046927/gabor_wavelet/gabor_wavelet.html</a>
スケールのとり方はここを参考にするといい</p>

<h2>再構成した信号</h2>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/recostructed_signal.png" title="&#34;The recostructed signal&#34;" alt="&#34;The recostructed signal&#34;"></p>

<p>連続ウェーブレットの逆変換は、フーリエ変換と違ってそんなシンプルじゃないんだけど、結果から言えばウェーブレット変換の実数部を足しあわせて適当にスケールすれば元の信号が再構成できるみたい。ほんまかと思って実際にやってみたけど、できた</p>

<p>が、実は少し誤差がある</p>

<h2>重ねてプロット</h2>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/double_0.png" title="&#34;The original signal and recostructed signal&#34;" alt="&#34;The original signal and recostructed signal&#34;"></p>

<h2>あっぷ</h2>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/double_1.png" title="&#34;The original signal and recostructed signal with zoom 1&#34;" alt="&#34;The original signal and recostructed signal with zoom 1&#34;"></p>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/double_2.png" title="&#34;The original signal and recostructed signal with zoom 2&#34;" alt="&#34;The original signal and recostructed signal with zoom 2&#34;"></p>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/double_3.png" title="&#34;The original signal and recostructed signal with zoom 3&#34;" alt="&#34;The original signal and recostructed signal with zoom 3&#34;"></p>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/double_4.png" title="&#34;The original signal and recostructed signal with zoom 4&#34;" alt="&#34;The original signal and recostructed signal with zoom 4&#34;"></p>

<p><img class="center" src="http://r9y9.github.io/images/wavelet/double_5.png" title="&#34;The original signal and recostructed signal with zoom 5&#34;" alt="&#34;The original signal and recostructed signal with zoom 5&#34;"></p>

<p>んー、まぁだいたいあってんじゃないですかね</p>

<h2>誤差</h2>

<p>平均誤差を計算すると、図の縦軸の量で考えて55.3994だった。16bitのwavが-32768〜32767なので、どうだろう、大きいのか小さいのかわからん</p>

<p>ただ、再合成した音声を聞いた所それほど違和感はなかった。これはつまり、スペクトルいじる系の分析にSTFTがではなくウェーブレット使ってもいいんではないか？という考えが生まれますね。果たして、ウェーブレットが音声/音楽の分析にフーリエ変換ほど使われないのはなぜなのか、突き詰めたい</p>

<h2>使った音声</h2>

<p>あなたが一番聞きたいと思った声が流れます、どうぞ</p>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/116227502"></iframe>


<p>スペクトログラム表示するのにサンプルが多いと大変なので、48kから10kにサンプリング周波数を落としたもの</p>

<h2>再構成した音声</h2>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/116227539"></iframe>


<p>僕の耳では違いはわからない。サンプリング周波数によって誤差が大小する可能性はあるが、そこまで調査してない</p>

<h2>メモ</h2>

<p><a href="http://paos.colorado.edu/research/wavelets/wavelet3.html">http://paos.colorado.edu/research/wavelets/wavelet3.html</a>
ここの最後に書かれている以下の文章、</p>

<blockquote><p>One problem with performing the wavelet transform in Fourier space is that this assumes the time series is periodic. The result is that signals in the wavelet transform at one end of the time series will get wrapped around to the other end.</p></blockquote>

<p>FFT使うウェーブレット変換の問題は、信号を周期関数として仮定してしまうことにある、と。まあ、ですよねー。信号がめちゃくちゃ長くてこの仮定が破綻してしまう場合、どうするのがいいんだろう。</p>

<p>あと、FFT使うウェーブレットの問題として、メモリ食うってのがあるんよな。ウェーブレット変換を計算する前に、マザーウェーブレットのフーリエ変換を持っとかないといけないし、サンプル毎に計算しないといけないし。44.1kの数分の音声とかなると、もう無理っすね。</p>

<p>それぞれ、解決方法は思いつかないでもないけど、まだまとまってないので、解決したらまとめる、かもしれない。</p>

<h2>さらにめも</h2>

<ul>
<li>practicalなんちゃらの、マザーウェーブレットを正規化する部分のmatlabコード、文献中の数式と若干違ってトリッキー。展開すれば一緒なんだけど、文献中の数式をそのまま書いたようになってないので、注意。ちょっと戸惑った</li>
<li>逆ウェーブレットを行う際のスケールにかかる係数（文献中でいう$C_{\delta}$）は、マザーウェーブレットが決まれば値が定まる（らしい）。例えばMorletの$\omega_0 = 6$なら0.776とわかってるので、積分して計算する必要はない</li>
<li>ウェーブレット変換と戯れてたら週末終わった</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[短時間フーリエ変換と連続ウェーブレット変換のvisualization]]></title>
    <link href="http://r9y9.github.io/blog/2013/10/20/wavelet-stft-visualization/"/>
    <updated>2013-10-20T11:46:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/10/20/wavelet-stft-visualization</id>
    <content type="html"><![CDATA[<h2>STFT(短時間フーリエ変換)によるスペクトログラム</h2>

<p><img class="center" src="http://r9y9.github.io/images/spectrogram_linear_clipped_rev_1.png" title="&#34;STFT spectrogram&#34;" alt="&#34;STFT spectrogram&#34;"></p>

<h2>STFTによるスペクトログラム（Y軸を対数にしたもの）</h2>

<p><img class="center" src="http://r9y9.github.io/images/spectrogram_log_clipped_rev_1.png" title="&#34;STFT spectrogram (with log-y-axis)&#34;" alt="&#34;STFT spectrogram (with log-y-axis)&#34;"></p>

<h2>連続ガボールウェーブレット変換によるスペクトログラム</h2>

<p><img class="center" src="http://r9y9.github.io/images/wavelet_spectrogram_clipped_rev_1.png" title="&#34;Gabor Wavelet spectrogram&#34;" alt="&#34;Gabor Wavelet spectrogram&#34;"></p>

<p>メモリも軸も無くて発表資料に貼ったら間違いなく怒られる奴だけど許して。でもだいたいの違いはわかると思う。図はgnuplotで作りました</p>

<p>STFTのlog-y-axisと比べるとよくわかるけど、ウェーブレットは低域もちゃんと綺麗にとれてますね。</p>

<p>みんなもっとウェーブレット変換使おう（提案</p>

<h2>分析に使った音声</h2>

<p>決して聞いてはならない</p>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/116165738"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FFTを使った連続ウェーブレット変換の高速化]]></title>
    <link href="http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/"/>
    <updated>2013-10-20T00:55:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/gabor_wavelet_nnmnkwii.png" title="&#34;An example of Gabor Wavelet spectrogram (the original wav file is generated using Open Jalk)&#34;" alt="&#34;An example of Gabor Wavelet spectrogram (the original wav file is generated using Open Jalk)&#34;"></p>

<h2>そもそもウェーブレット変換って何</h2>

<p><a href="http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%BC%E3%83%96%E3%83%AC%E3%83%83%E3%83%88%E5%A4%89%E6%8F%9B">Jump to wikipedia</a></p>

<p>いわゆる時間周波数解析の手法の一つで、音声、音楽、画像の解析に使われる。直感的には、STFTでいう窓関数の幅を周波数に応じて拡大・伸縮させて、時間変化する信号の特徴を上手く捉えようとする手法のこと</p>

<h2>高速化の仕組み</h2>

<p>さて、本題。ウェーブレット変換は、(スケールパラメータを固定すれば)入力信号とマザーウェーブレットのたたみ込みで表されるので、たたみ込み定理よりフーリエ変換を使った計算方法が存在する。</p>

<p>つまり、</p>

<ul>
<li>入力信号とマザーウェーブレットをそれぞれフーリエ変換する</li>
<li>掛け算する</li>
<li>逆フーリエ変換する</li>
</ul>


<p>というプロセスでウェーブレット変換を求めることができて、かつフーリエ変換にはFFTという高速なアルゴリズムが存在するので、計算を高速化できるという仕組み。まぁ原理としてはシンプルなんだけど以外と面倒くさい（気のせい？）。</p>

<p>色々調べたので、メモ代わりにまとめておく。解説ではなくリンク集です</p>

<h2>A Practical Guide to Wavelet Analysis <a href="http://paos.colorado.edu/research/wavelets/">[web]</a> <a href="http://paos.colorado.edu/research/wavelets/bams_79_01_0061.pdf">[PDF]</a></h2>

<p>結論から言えばここが一番わかりやすかった。</p>

<ul>
<li>実装よりで理論の解説がある</li>
<li>matlab/fortran のコードがある</li>
</ul>


<p>がいいところ</p>

<p>基本的にはこれ読めばわかる。数学全然わからん俺でも読めた。特に、離散表現でのウェーブレットについても書かれているのは良い。連続ウェーブレットといっても、デジタル信号処理で扱う上では離散化しないといけないわけなので</p>

<p>さて、僕が参考にしたmatlabコードへの直リンクは以下</p>

<ul>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wave_bases.m">マザーウェーブレットの周波数応答の計算部分</a></li>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wavelet.m">連続ウェーブレット変換の本体</a></li>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wavetest.m">連続ウェーブレット変換のテストコード</a></li>
</ul>


<p>その他、fortanコードなどいくつかあるので、それらはウェブサイトからどうぞ</p>

<h2>Matlab</h2>

<p> mathworksさんのwavelet toolboxのドキュメントもよかった。ここから上記のpracticalなんちゃらのリンクもある</p>

<ul>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/gs/continuous-wavelet-transform.html">Continuous Wavelet Transform</a></li>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/ref/cwtft.html">Continuous wavelet transform using FFT algorithm</a></li>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/ref/icwtft.html">Inverse CWT</a></li>
</ul>


<p>コードは転がってないですね。まぁ有料なので</p>

<h2>日本語でわかりやすいもの</h2>

<ul>
<li><a href="http://hp.vector.co.jp/authors/VA046927/gabor_wavelet/gabor_wavelet.html">C/C++言語でガボールウェーブレット変換により時間周波数解析を行うサンプルプログラム</a>

<ul>
<li> ここは本当に素晴らしい。何年か前にも参考にさせて頂きました。</li>
</ul>
</li>
<li><a href="http://www.hulinks.co.jp/support/flexpro/v7/dataanalysis_cwt.html">連続ウェーブレット変換 (CWT) &ndash; FlexPro 7 日本語版サポート情報</a>

<ul>
<li> 日本語で丁寧に書かれてる。内容自体は、practicalなんちゃらと似ている</li>
</ul>
</li>
<li><a href="http://www.makino.ecei.tohoku.ac.jp/~aito/wavelet/">東北大学 伊藤先生の講義資料</a>

<ul>
<li> 数少ない日本語でのウェーブレットに関する資料。ただし連続ウェーブレットについてはあんまり解説はない。C言語のサンプル付き</li>
</ul>
</li>
</ul>


<h2>書籍</h2>

<p>今回は調べてない。数年前にちょいちょい調べたことがあるけど忘れた</p>

<h2>その他</h2>

<ul>
<li><a href="https://code.google.com/p/tspl/source/browse/trunk/include/cwt-impl.h?spec=svn2&amp;r=2">tspl Signal Processing Library in C++</a>

<ul>
<li> 連続ウェーブレット変換/逆変換のC++実装。細部までコードは追えてないけど、それっぽいコードがある（俺が読んだ記事とはマザーウェーブレットのnormalizationが違う気もする…</li>
</ul>
</li>
<li><a href="http://dsp.stackexchange.com/questions/10979/inverse-continuous-wavelet-transform-and-matlab">Inverse Continuous Wavelet Transform and matlab &ndash; dsp StackExchange</a>

<ul>
<li> 逆連続ウェーブレット変換教えてーっていう質問。ここでpracticalなんちゃらを知った</li>
</ul>
</li>
<li><a href="http://staff.aist.go.jp/h.fujihara/voice_conversion/">混合音中の歌声の声質変換手法</a>

<ul>
<li> ガチ技術。元産総研の藤原さんが研究開発したもの。<a href="http://staff.aist.go.jp/m.goto/PAPER/SIGMUS201007fujihara.pdf">論文(PDF)</a>の方に少し説明がある。</li>
<li> 声質変換でウェーブレット使うのは僕が知る限りではこれくらい</li>
<li> ちなみに結果めっちゃすごい</li>
</ul>
</li>
</ul>


<h2>さいごに</h2>

<p>以上。ウェーブレット変換は難しいことがわかった（こなみ）。ウェーブレットの利点欠点については書かなかったけれど、音声や音楽を解析したい場合に、時間周波数解析によく用いられる短時間フーリエ解析よりもウェーブレット解析の方が望ましい場合は非常によくあると思っているので、ぜひもっと使われてほしいですね。作ってるライブラリには必ず入れます。</p>

<h2>ちなみに</h2>

<p>計算コストがそこまでボトルネックにならないなら、畳み込みでウェーブレット計算してもいいんじゃないかと思ってる。FFTを使う方法の場合、あるスケールパラメータに対する時間方向のウェーブレット変換係数を一気に求められても、あるシフトパラメータに対する周波数方向のウェーブレット変換係数（つまりある時間でのスペクトルのようなもの）は一気に求められない気がしている。つまり、STFTみたいな形でインクリメンタルにスペクトルは求めにくいんじゃないかってこと（少なくとも自明には思えない）。畳み込み計算するなら、間違いなくできるけど。このあたり理解がまだあやふやなので、間違ってる可能性大</p>

<p>さらにちなみに、僕が作ってたリアルタイムで動く自動伴奏システムは畳み込みでウェーブレット変換してたよ。ウェーブレットよりもアルゴリズムのほうがボトルネックになっていたので全然気にならなかった。参考まで</p>
]]></content>
  </entry>
  
</feed>
