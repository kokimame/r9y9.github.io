<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Go, | LESS IS MORE]]></title>
  <link href="http://r9y9.github.io/blog/categories/go/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2014-11-15T17:38:12+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi YAMAMOTO]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Goでクロマベクトルを求める]]></title>
    <link href="http://r9y9.github.io/blog/2014/01/28/go-chroma-vector/"/>
    <updated>2014-01-28T23:08:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/01/28/go-chroma-vector</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/pcp_result.png" title="&ldquo;Chromagram&rdquo;" ></p>

<p>Chromagram。ドレミの歌の冒頭を分析した結果です</p>

<p>```go
package main</p>

<p>import (</p>

<pre><code>"fmt"
"github.com/mjibson/go-dsp/wav"
"github.com/r9y9/go-msptools/pcp"
"log"
"os"
</code></pre>

<p>)</p>

<p>func main() {</p>

<pre><code>// reading data
file, err := os.Open("/path/to/file.wav")
if err != nil {
    log.Fatal(err)
}
defer file.Close()

wav, werr := wav.ReadWav(file)
if werr != nil {
    log.Fatal(werr)
}

// convert to []float64 from []int
data := make([]float64, len(wav.Data[0]))
for i := range data {
    data[i] = float64(wav.Data[0][i])
}

// settings for analysis
frameShift := int(float64(wav.SampleRate) / 100.0) // 0.01 sec
sampleRate := int(wav.SampleRate)

// create PCP extrator
p := pcp.NewPCP(sampleRate, frameShift)

// analysis roop
result := make([][]float64, p.NumFrames(data))
for i := 0; i &lt; p.NumFrames(data); i++ {
    pcp := p.PCP(data, i*frameShift)
    //pcp := p.PCPNormalized(data, i*frameShift)
    result[i] = pcp
}

// print as a gnuplot 3D plotting format
fmt.Println("#", len(result[0]), len(result))
for i, spec := range result {
    for j, val := range spec {
        fmt.Println(i, j, val)
    }
    fmt.Println("")
}
</code></pre>

<p>}
```</p>

<p>こんな感じでOK。Chromagramをgnuplot形式で標準出力に出力します</p>

<h2>Pitch Class Profile (PCP) in Go <a href="https://github.com/r9y9/go-msptools/tree/master/pcp">[Code]</a></h2>

<p>どうやってクロマベクトルを計算しているかざっくり説明すると、</p>

<ul>
<li>入力信号をガボールウェーブレット変換</li>
<li>オクターブ無視して12次元に圧縮（例えば55Hz, 110Hz, 220Hz, 440Hz はすべてAとする）</li>
</ul>


<p>という手順で求めてます</p>

<p>Goかどうかなんてどうでもいいんだけど、まぁC++に比べて書きやすすぎて泣けるよね</p>
]]></content>
  </entry>
  
</feed>
