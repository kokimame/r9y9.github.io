<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on LESS IS MORE</title>
    <link>http://r9y9.github.io/categories/go/index.xml</link>
    <description>Recent content in Go on LESS IS MORE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="http://r9y9.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Goに関する良記事</title>
      <link>http://r9y9.github.io/blog/2014/02/02/ready-to-use-go/</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/02/02/ready-to-use-go/</guid>
      <description>

&lt;p&gt;いくつか見つけたのでメモる&lt;/p&gt;

&lt;h2 id=&#34;why-we-think-golang-is-ready-for-early-stage-startups-http-www-jellolabs-com-blog-why-golang-is-ready-for-early-stage-startups-html&#34;&gt;&lt;a href=&#34;http://www.jellolabs.com/blog/why-golang-is-ready-for-early-stage-startups.html&#34;&gt;Why We Think GoLang Is Ready For Early Stage Startups&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;とあるスタートアップがウェブでGoを使うという意思決定をした理由、その決断に至るまでのプロセスが書かれている。また、その過程でGoを使うことによる利点・欠点が簡潔にまとめられてる。参考になった&lt;/p&gt;

&lt;h2 id=&#34;go-getter-performance-comparison-to-c-business-card-ray-tracer-https-kidoman-com-programming-go-getter-html&#34;&gt;&lt;a href=&#34;https://kidoman.com/programming/go-getter.html&#34;&gt;Go Getter - Performance comparison to C++ business card ray tracer&lt;/a&gt;&lt;/h2&gt;

&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;http://r9y9.github.io/images/go-improvements.png&#34; class=&#34;image&#34;&gt;&lt;/div&gt;

&lt;p&gt;GoとC++のパフォーマンスの比較。Ray tracingというCGの手法を用いて比較をしていて、Goでも最適化するとC++並のスピード出ますよ（そしてC++と違ってGCあるしマルチコアにも簡単にできるしGoいいよ）って話。（自分へのメモのため画像を拝借していますが、意味がわからないと思うので元記事を参照してください）&lt;/p&gt;

&lt;p&gt;ただoptimized Go vs un-optimized C++なので注意。Goの最適化が主旨の記事です&lt;/p&gt;

&lt;h2 id=&#34;go-getter-part-2-now-with-c-optimizations-https-kidoman-com-programming-go-getter-part-2-html&#34;&gt;&lt;a href=&#34;https://kidoman.com/programming/go-getter-part-2.html&#34;&gt;Go Getter Part 2 - Now with C++ optimizations&lt;/a&gt;&lt;/h2&gt;

&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;http://r9y9.github.io/images/go-vs-cpp-after-both-optimized.png&#34; class=&#34;image&#34;&gt;&lt;/div&gt;

&lt;p&gt;さっきの続きで、こちらでは最適化したC++と比較されてる。OpenMP使って並列化してるようだけど、あれ、まだC++の方が遅い・・（正直意外&lt;/p&gt;

&lt;h2 id=&#34;go-getter-part-3-further-optimizations-and-a-multi-threaded-c-version-https-kidoman-com-programming-go-getter-part-3-html&#34;&gt;&lt;a href=&#34;https://kidoman.com/programming/go-getter-part-3.html&#34;&gt;Go Getter Part 3 - Further optimizations and a multi-threaded C++ version&lt;/a&gt;&lt;/h2&gt;

&lt;div align=&#34;center&#34;&gt;&lt;img src=&#34;http://r9y9.github.io/images/2048x2048-3.png&#34; class=&#34;image&#34;&gt;&lt;/div&gt;

&lt;p&gt;これで最後。C++（とGo）をめちゃくちゃ最適化した、って奴ですね。C++の方が二倍程度速くなったよう。
ただ、やっぱC++の方が良かった、というよりGoがC++並になるのも時間の問題って感じですね。&lt;/p&gt;

&lt;h2 id=&#34;さて&#34;&gt;さて&lt;/h2&gt;

&lt;p&gt;このまとめで何が言いたかったというと&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「Goを使わない選択肢がない」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;まぁ半分冗談（ケースバイケースだし）ですが、僕のようにC++をメインで使っているけど不満ありまくりな人は、一度Go使ってみてもいいんじゃないでしょうか、と思います。C++の百倍書きやすいです&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goで信号処理</title>
      <link>http://r9y9.github.io/blog/2014/01/27/start-coding-go-msptools/</link>
      <pubDate>Mon, 27 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://r9y9.github.io/blog/2014/01/27/start-coding-go-msptools/</guid>
      <description>

&lt;p&gt;最近Go言語を触っていて、これがなかなかいい感じ。そこそこ速いので、信号処理や機械学習も行けると思う&lt;/p&gt;

&lt;h2 id=&#34;goの良い所&#34;&gt;Goの良い所&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;デフォでたくさん便利なパッケージがある。http, json, os, &amp;hellip;&lt;/li&gt;
&lt;li&gt;パッケージのインストールはとても簡単。go getするだけ&lt;/li&gt;
&lt;li&gt;デフォでテストの枠組みがある&lt;/li&gt;
&lt;li&gt;gofmtでコードのformattingしてくれるので書き方で迷わなくて良い&lt;/li&gt;
&lt;li&gt;使わないパッケージをimportするとコンパイルエラーになるし自然と疎結合なコードを書くようになる&lt;/li&gt;
&lt;li&gt;並列処理を言語レベルでサポート&lt;/li&gt;
&lt;li&gt;GCあるのでメモリ管理なんてしなくていい&lt;/li&gt;
&lt;li&gt;全般的にC++より書きやすい（ここ重要）&lt;/li&gt;
&lt;li&gt;そこそこ速い（C++よりは遅いけど）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ホントはPythonでさくっと書きたいけどパフォーマンスもほしいからC++で書くかー（嫌だけど）。と思ってた自分にはちょうどいい&lt;/p&gt;

&lt;h2 id=&#34;goの悪い所-主にc-と比べて&#34;&gt;Goの悪い所（主にC++と比べて）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ちょっと遅い。さっと試したウェーブレット変換は、1.5倍くらい遅かった気がする（うろ覚え）&lt;/li&gt;
&lt;li&gt;C++やpythonに比べるとライブラリは少ない&lt;/li&gt;
&lt;li&gt;言語仕様とかそのへんが優れてるかどうかは判断つきませんごめんなさい&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;go-msptools&#34;&gt;Go-msptools&lt;/h1&gt;

&lt;p&gt;2014/07/22 追記：&lt;br /&gt;
Go-msptoolsはGOSSPに吸収されました。（&lt;a href=&#34;http://r9y9.github.io/blog/2014/06/08/gossp-speech-signal-processing-for-go/&#34;&gt;GOSSP - Go言語で音声信号処理 - LESS IS MORE&lt;/a&gt;を参照）&lt;/p&gt;

&lt;h2 id=&#34;おまけ-音の信号処理に役立ちそうなライブラリ&#34;&gt;おまけ：音の信号処理に役立ちそうなライブラリ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mjibson/go-dsp/&#34;&gt;go-dsp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/portaudio-go/&#34;&gt;portaudio-go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>