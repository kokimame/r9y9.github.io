<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Julia | LESS IS MORE]]></title>
  <link href="http://r9y9.github.io/blog/categories/julia/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2015-08-23T18:09:15+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi YAMAMOTO]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JuliaTokyo #3 Speech Signal Processing in Julia]]></title>
    <link href="http://r9y9.github.io/blog/2015/04/26/juliatokyo3-speech-signal-processing-in-julia/"/>
    <updated>2015-04-26T23:29:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2015/04/26/juliatokyo3-speech-signal-processing-in-julia</id>
    <content type="html"><![CDATA[<p><a href="http://juliatokyo.connpass.com/event/13218/">JuliaTokyo #3</a>でLT発表してきました。前回の<a href="http://juliatokyo.connpass.com/event/8010/">JuliaTokyo #2</a>でも発表したので、二回目でした。</p>

<h2>スライド</h2>

<div align="center">
<iframe src="http://r9y9.github.io//www.slideshare.net/slideshow/embed_code/key/h4geMoK1msYqdY" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://r9y9.github.io//www.slideshare.net/ryuichiy/juliatokyo-3-speech-signal-processing-in-julia-47403938" title="JuliaTokyo #3 Speech Signal Processing in Julia" target="_blank">JuliaTokyo #3 Speech Signal Processing in Julia</a> </strong> from <strong><a href="http://r9y9.github.io//www.slideshare.net/ryuichiy" target="_blank">Ryuichi YAMAMOTO</a></strong> </div>
</div>


<h2>コード</h2>

<p><a href="https://github.com/r9y9/JuliaTokyo3">https://github.com/r9y9/JuliaTokyo3</a></p>

<h2>三行まとめ</h2>

<p>発表の内容を三行でまとめると、</p>

<ul>
<li>音声ファイルの読み込み（or 書き込み）は<a href="(https://github.com/dancasimiro/WAV.jl">WAV.jl</a>を使おう</li>
<li>基本的なデジタル信号処理は <a href="https://github.com/JuliaDSP/DSP.jl">JuliaDSP/DSP.jl</a> をチェック（※JuliaDSPにはウェーブレットとかもあるよ）</li>
<li>音声に特化した信号処理は、<a href="https://github.com/r9y9/WORLD.jl">r9y9/WORLD.jl</a> がオススメです</li>
</ul>


<p>という感じです。</p>

<p>応用例として、歌声を分離する話（<a href="https://github.com/r9y9/RobustPCA.jl">デモコード</a>）、統計的声質変換（<a href="http://r9y9.github.io/blog/2014/11/12/statistical-voice-conversion-code/">統計的声質変換クッソムズすぎワロタ（チュートリアル編） &ndash; LESS IS MORE</a>）、画像をスペクトログラムに足しこむ話とか、さっと紹介しました。</p>

<h2>補足</h2>

<p>僕が使う/作ったパッケージを、あとで見返せるように最後のスライドにまとめておいたのですが、改めてここで整理しておきます。</p>

<ul>
<li><a href="https://github.com/dancasimiro/WAV.jl">dancasimiro/WAV</a> WAVファイルの読み込み</li>
<li><a href="https://github.com/JuliaDSP/DSP.jl">JuliaDSP/DSP</a> 窓関数、スペクトログラム、デジタルフィルタ</li>
<li><a href="https://github.com/r9y9/WORLD.jl">r9y9/WORLD</a> 音声分析・合成フレームワーク</li>
<li><a href="https://github.com/r9y9/MelGeneralizedCepstrums.jl">r9y9/MelGeneralizedCepstrums</a> メル一般化ケプストラム分析</li>
<li><a href="https://github.com/r9y9/SynthesisFilters.jl">r9y9/SynthesisFilters</a> メル一般化ケプストラムからの波形合成</li>
<li><a href="https://github.com/r9y9/SPTK.jl">r9y9/SPTK</a> 音声信号処理ツールキット</li>
<li><a href="https://github.com/r9y9/RobustPCA.jl">r9y9/RobustPCA</a> ロバスト主成分分析(歌声分離へ応用)</li>
<li><a href="https://github.com/r9y9/REAPER.jl">r9y9/REAPER</a> 基本周波数推定</li>
<li><a href="https://github.com/r9y9/VoiceConversion.jl">r9y9/VoiceConversion</a> 統計的声質変換</li>
</ul>


<p>上から順に、<del>汎用的かなーと思います</del><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。僕が書いたパッケージの中では、<strong>WORLDのみ</strong>公式パッケージにしています。理由は単純で、その他のパッケージはあまりユーザがいないだろうなーと思ったからです。かなりマニアックであったり、今後の方針が決まってなかったり（ごめんなさい）、応用的過ぎて全然汎用的でなかったり。WORLDは自信を持ってオススメできますので、Juliaで音声信号処理をやってみようかなと思った方は、ぜひお試しください。</p>

<h2>ざっくり感想</h2>

<ul>
<li>＃Juliaわからん 本当に素晴らしいと思うので、僕も積極的に #Juliaわからん とつぶやいていこうと思います（詳しくは <a href="https://twitter.com/chezou">@chezou</a> さんの記事をどうぞ <a href="http://chezou.hatenablog.com/entry/2015/04/26/222518">#JuliaTokyo で #juliaわからん という雑なレポジトリを立てた話をしたら julia.tokyo ができてた  &ndash; once upon a time,</a>）。僕は、Julia に Theano が欲しいです。<code>T.grad</code> 強力すぎる</li>
<li><code>ccall</code> かんたんとか言いましたが、ミスった書き方をしたときのエラーメッセージはあまり親切ではないので、つまずきやすいかも。僕は気合で何とかしています。</li>
<li>Julia遅いんだけど？？？と言われたら、<a href="https://twitter.com/bicycle1885">@bicycle1885</a> さんの <a href="http://www.slideshare.net/KentaSato/whats-wrong-47403774">What&rsquo;s wrong with this Julia?</a> を投げつけようと思います。</li>
<li>かなり聴衆が限定的になってしまう話をしてしまったので、次発表するならJulia 言語自体の話をしようかなと思いました</li>
</ul>


<h2>最後に</h2>

<p><a href="https://twitter.com/sorami">@sorami</a>さんを筆頭とする運営の方々、本当にありがとうございました！楽しかったです。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>とスライドに書いたけど、考えなおすと、僕が思う品質の高さ順、の方が正確です、失礼しました。MelGeneneralizedCepstrumsは一番気合入れて書いたけど、ユーザーがいるかといったらいないし、RobustPCAはさっと書いただけだけど、アルゴリズムとしては汎用的だし。またRobustPCAだけ毛色が違いますが、応用例で紹介したのでリストに入れておきました。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JuliaTokyo #2でBinDeps.jl についてLTしてきた]]></title>
    <link href="http://r9y9.github.io/blog/2014/09/30/juliatokyo2/"/>
    <updated>2014-09-30T00:40:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/09/30/juliatokyo2</id>
    <content type="html"><![CDATA[<p><a href="juliatokyo.connpass.com/event/8010/">JuliaTokyo #2 &ndash; connpass</a></p>

<script async class="speakerdeck-embed" data-id="21106ae0285e01327810268beacd0cf3" data-ratio="1.77777777777778" src="http://r9y9.github.io//speakerdeck.com/assets/embed.js"></script>


<h2>発表概要</h2>

<p>C/C++ライブラリのラッパー（C++は現状のJuliaでは難しいけど）を作るときに、どうやってライブラリの依存関係を管理するか？という話です。結論としては、方法はいくつかありますが　BinDeps.jl というパッケージを使うのが楽で良いですよ、ということです。Githubのいろんなリポジトリをあさった僕の経験上、BinDeps.jl はバイナリの依存関係管理におけるデファクトスタンダードな気がしています。BinDeps.jl の使い方は、既存のパッケージのコードを読みまくって学ぶのがおすすめです。</p>

<p>さて、途中で書くのに疲れてしまったのですが、<a href="http://qiita.com/r9y9/items/73806e3ce7f3a372d0b3">自作のJuliaパッケージで、Cライブラリとの依存性を記述する &ndash; Qiita</a> に以前似たような内容をまとめたので、併せてどうぞ。qiitaにも書きましたが、最適化関係のプロジェクトを集めた <a href="http://www.juliaopt.org/">JuliaOpt</a> コミュニティでは、バイナリの依存関係管理にBinDeps.jlを使用することを推奨しています。</p>

<h2>雑感</h2>

<ul>
<li>勉強会にはデータ分析界隈の人が多い印象。音声系の人はとても少なかった。</li>
<li>R人気だった</li>
<li>Go使ってる！って人と合わなかった（つらい）</li>
<li>@show マクロ最高</li>
<li>unicode最高</li>
<li>懇親会では、なぜか途中から深層学習やベイズの話をしていた…</li>
<li>いい忘れたけど僕もnightly build勢でした。毎日あたたかみのある手動pull &amp; make をしています。</li>
<li>Julia の話ができて楽しかったので、また参加したいなー</li>
</ul>


<p>LTで <a href="https://github.com/chezou/MeCab.jl">MeCab.jl</a> について話をしてくれたchezouさんが、ちょうどBinDeps.jl に興味を持たれているようだったので、勉強会のあとに BinDeps.jl を使ってバイナリの管理を実装して、<a href="https://github.com/chezou/MeCab.jl/pull/2">プルリク</a>をしてみました。参考になればうれしいなーと思います。</p>

<p>おしまい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SPTKのJuliaラッパーも書いた]]></title>
    <link href="http://r9y9.github.io/blog/2014/09/15/sptk-for-julia/"/>
    <updated>2014-09-15T01:25:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/09/15/sptk-for-julia</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/IMG_0960.JPG" title="&ldquo;sea&rdquo;" ></p>

<p>夏も終わったようですね。またSPTKかという感じですが、Juliaから使うためのラッパーを書きました。必要そうなのはだいたいラップしたので、よろしければどうぞ。</p>

<p><a href="https://github.com/r9y9/SPTK.jl">Julia wrapper for Speech Signal Processing Toolkit (SPTK) | Github</a></p>

<p>かれこれ、Go, Python, Juliaと、3つの言語でラッパーを書いてしまいました。どれだけSPTK好きなんだと。そしてどれだけ言語触ってるんだ絞れと。うーん、とはいえどれも良いところと悪いところがあってですね（何も言ってない）、難しい…</p>

<p>おしまい</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gamma Process Non-negative Matrix Factorization (GaP-NMF) in Julia]]></title>
    <link href="http://r9y9.github.io/blog/2014/08/20/gap-nmf-julia/"/>
    <updated>2014-08-20T15:30:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2014/08/20/gap-nmf-julia</id>
    <content type="html"><![CDATA[<p>最近 <a href="julialang.org">Julia</a> で遊んでいて、その過程で非負値行列因子分解（NMF）のノンパラ版の一つであるGamma Process Non-negative Matrix Factorization (GaP-NMF) を書いてみました。（まぁmatlabコードの写経なんですが）</p>

<p><a href="https://github.com/r9y9/BNMF.jl">https://github.com/r9y9/BNMF.jl</a></p>

<p>元論文:
 <a href="http://soundlab.cs.princeton.edu/publications/2010_icml_gapnmf.pdf">Bayesian Nonparametric Matrix Factorization for Recorded Music</a>
by Matthew D. Hoffman et al. in ICML 2010.</p>

<h2>デモ</h2>

<p><a href="http://nbviewer.ipython.org/github/r9y9/BNMF.jl/blob/master/notebook/GaP-NMF.ipynb">http://nbviewer.ipython.org/github/r9y9/BNMF.jl/blob/master/notebook/GaP-NMF.ipynb</a></p>

<p>適当な音声（音楽じゃなくてごめんなさい）に対して、GaP-NMFをfittingしてみた結果のメモです。$K=100$ で始めて、100回ほどイテレーションを回すと適度な数（12くらい）にtruncateしているのがわかると思います。予めモデルの複雑度を指定しなくても、データから適当な数を自動決定してくれる、ノンパラベイズの良いところですね。</p>

<h2>ハマったところ</h2>

<ul>
<li>GIGの期待値を求めるのに必要な第二種変形ベッセル関数は、exponentially scaled versionを使いましょう。じゃないとInf地獄を見ることになると思います（つらい）。Juliaで言うなら <a href="https://julia.readthedocs.org/en/latest/stdlib/base/?highlight=besselkx#Base.besselkx">besselkx</a> で、scipyで言うなら <a href="http://students.mimuw.edu.pl/~pbechler/scipy_doc/generated/scipy.special.kve.html#scipy.special.kve">scipy.special.kve</a> です。</li>
</ul>


<h2>雑感</h2>

<ul>
<li>MatlabのコードをJuliaに書き直すのは簡単。ところどころ作法が違うけど（例えば配列の要素へのアクセスはmatlabはA(i,j)でJuliaはA[i,j]）、だいたい一緒</li>
<li>というかJuliaがMatlabに似すぎ？</li>
<li>Gamma分布に従う乱数は、<a href="https://github.com/JuliaStats/Distributions.jl">Distributions,jl</a> を使えばめっちゃ簡単に生成できた。素晴らしすぎる</li>
<li>行列演算がシンプルにかけてホント楽。pythonでもmatlabでもそうだけど（Goだとこれができないんですよ…）</li>
<li>第二種変形ベッセル関数とか、scipy.special にあるような特殊関数が標準である。素晴らしい。</li>
</ul>


<h2>Python版と速度比較</h2>

<p><a href="https://github.com/dawenl/bp_nmf/tree/master/code/gap_nmf">bp_nmf/code/gap_nmf</a> と比較します。matlabはもってないので比較対象からはずします、ごめんなさい</p>

<p>Gistにベンチマークに使ったスクリプトと実行結果のメモを置いときました
<a href="https://gist.github.com/r9y9/3d0c6a90dd155801c4c1">https://gist.github.com/r9y9/3d0c6a90dd155801c4c1</a></p>

<p>結果だけ書いておくと、あらゆる現実を（ry の音声にGaP-NMFをepochs=100でfittingするのにかかった時間は、</p>

<p><code>
Julia: Mean elapsed time: 21.92968243 [sec]
Python: Mean elapsed time: 18.3550617 [sec]
</code></p>

<p>という結果になりました。つまりJuliaのほうが1.2倍くらい遅かった（僕の実装が悪い可能性は十分ありますが）。どこがボトルネックになっているのか調べていないので、気が向いたら調べます。Juliaの方が速くなったらいいなー</p>

<h2>おわりに</h2>

<p>GaP-NMFの実装チャレンジは二回目でした。（たぶん）一昨年、年末に実家に帰るときに、何を思ったのか急に実装したくなって、電車の中で論文を読んで家に着くなり実装するというエクストリームわけわからんことをしていましたが、その時はNaN and Inf地獄に負けてしまいました。Pythonで書いていましたが、今見るとそのコードマジクソでした。</p>

<p>そして二回目である今回、最初はmatlabコードを見ずに自力で書いていたんですが、またもやInf地獄に合いもうだめだと思って、matlabコードを写経しました。あんま成長していないようです（つらい）</p>

<p>Julia歴二週間くらいですが、良い感じなので使い続けて見ようと思います。</p>
]]></content>
  </entry>
  
</feed>
