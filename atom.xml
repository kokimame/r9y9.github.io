<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[r9y9::blog]]></title>
  <link href="http://r9y9.github.io/atom.xml" rel="self"/>
  <link href="http://r9y9.github.io/"/>
  <updated>2013-10-20T10:21:37+09:00</updated>
  <id>http://r9y9.github.io/</id>
  <author>
    <name><![CDATA[Ryuichi Yamamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FFTを使った連続ウェーブレット変換の高速化]]></title>
    <link href="http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform/"/>
    <updated>2013-10-20T00:55:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/10/20/continuous-wavelet-tranform</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/gabor_wavelet_nnmnkwii.png" title="&#34;An example of Gabor Wavelet spectrogram (the original wav file is generated using Open Jalk)&#34;" alt="&#34;An example of Gabor Wavelet spectrogram (the original wav file is generated using Open Jalk)&#34;"></p>

<h2>そもそもウェーブレット変換って何</h2>

<p><a href="http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7%E3%83%BC%E3%83%96%E3%83%AC%E3%83%83%E3%83%88%E5%A4%89%E6%8F%9B">Jump to wikipedia</a></p>

<p>いわゆる時間周波数解析の手法の一つで、音声、音楽、画像の解析に使われる。直感的には、STFTでいう窓関数の幅を周波数に応じて拡大・伸縮させて、時間変化する信号の特徴を上手く捉えようとする手法のこと</p>

<h2>高速化の仕組み</h2>

<p>さて、本題。ウェーブレット変換は、(スケールパラメータを固定すれば)入力信号とマザーウェーブレットのたたみ込みで表されるので、たたみ込み定理よりフーリエ変換を使った計算方法が存在する。</p>

<p>つまり、</p>

<ul>
<li>入力信号とマザーウェーブレットをそれぞれフーリエ変換する</li>
<li>掛け算する</li>
<li>逆フーリエ変換する</li>
</ul>


<p>というプロセスでウェーブレット変換を求めることができて、かつフーリエ変換にはFFTという高速なアルゴリズムが存在するので、計算を高速化できるという仕組み。まぁ原理としてはシンプルなんだけど以外と面倒くさい（気のせい？）。</p>

<p>色々調べたので、メモ代わりにまとめておく。解説ではなくリンク集です</p>

<h2>A Practical Guide to Wavelet Analysis <a href="http://paos.colorado.edu/research/wavelets/">[web]</a> <a href="http://paos.colorado.edu/research/wavelets/bams_79_01_0061.pd">[PDF]</a></h2>

<p>結論から言えばここが一番詳しいかった。</p>

<ul>
<li>実装よりで理論の解説がある</li>
<li>matlab/fortran のコードがある</li>
</ul>


<p>がいいところ</p>

<p>基本的にはこれ読めばわかる。数学全然わからん俺でも読めた。特に、離散表現でのウェーブレットについても書かれているのは良い。連続ウェーブレットといっても、デジタル信号処理で扱う上では離散化しないといけないわけなので</p>

<p>さて、僕が参考にしたmatlabコードへの直リンクは以下</p>

<ul>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wave_bases.m">マザーウェーブレットの周波数応答の計算部分</a></li>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wavelet.m">連続ウェーブレット変換の本体</a></li>
<li><a href="http://paos.colorado.edu/research/wavelets/wave_matlab/wavetest.m">連続ウェーブレット変換のテストコード</a></li>
</ul>


<p>その他、fortanコードなどいくつかあるので、それらはウェブサイトからどうぞ</p>

<h2>Matlab</h2>

<p> mathworksさんのwavelet toolboxのドキュメントもよかった。ここから上記のpracticalなんちゃらのリンクもある</p>

<ul>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/gs/continuous-wavelet-transform.html">Continuous Wavelet Transform</a></li>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/ref/cwtft.html">Continuous wavelet transform using FFT algorithm</a></li>
<li><a href="http://www.mathworks.co.jp/jp/help/wavelet/ref/icwtft.html">Inverse CWT</a></li>
</ul>


<p>コードは転がってないですね。まぁ有料なので</p>

<h2>日本語でわかりやすいもの</h2>

<ul>
<li><a href="http://hp.vector.co.jp/authors/VA046927/gabor_wavelet/gabor_wavelet.html">C/C++言語でガボールウェーブレット変換により時間周波数解析を行うサンプルプログラム</a>

<ul>
<li> ここは本当に素晴らしい。何年か前にも参考にさせて頂きました。</li>
</ul>
</li>
<li><a href="http://www.hulinks.co.jp/support/flexpro/v7/dataanalysis_cwt.html">連続ウェーブレット変換 (CWT) &ndash; FlexPro 7 日本語版サポート情報</a>

<ul>
<li> 日本語で丁寧に書かれてる。内容自体は、practicalなんちゃらと似ている</li>
</ul>
</li>
<li><a href="http://www.makino.ecei.tohoku.ac.jp/~aito/wavelet/">東北大学 伊藤先生の講義資料</a>

<ul>
<li> 数少ない日本語でのウェーブレットに関する資料。ただし連続ウェーブレットについてはあんまり解説はない。C言語のサンプル付き</li>
</ul>
</li>
</ul>


<h2>書籍</h2>

<p>今回は調べてない。数年前にちょいちょい調べたことがあるけど忘れた</p>

<h2>その他</h2>

<ul>
<li><a href="https://code.google.com/p/tspl/source/browse/trunk/include/cwt-impl.h?spec=svn2&amp;r=2">tspl Signal Processing Library in C++</a>

<ul>
<li> 連続ウェーブレット変換/逆変換のC++実装。細部までコードは追えてないけど、それっぽいコードがある（俺が読んだ記事とはマザーウェーブレットのnormalizationが違う気もする…</li>
</ul>
</li>
<li><a href="http://dsp.stackexchange.com/questions/10979/inverse-continuous-wavelet-transform-and-matlab">Inverse Continuous Wavelet Transform and matlab &ndash; dsp StackExchange</a>

<ul>
<li> 逆連続ウェーブレット変換教えてーっていう質問。ここでpracticalなんちゃらを知った</li>
</ul>
</li>
<li><a href="http://staff.aist.go.jp/h.fujihara/voice_conversion/">混合音中の歌声の声質変換手法</a>

<ul>
<li> ガチ技術。元産総研の藤原さんが研究開発したもの。<a href="http://staff.aist.go.jp/m.goto/PAPER/SIGMUS201007fujihara.pdf">論文(PDF)</a>の方に少し説明がある。</li>
<li> 声質変換でウェーブレット使うのは僕が知る限りではこれくらい</li>
<li> ちなみに結果めっちゃすごい</li>
</ul>
</li>
</ul>


<h2>さいごに</h2>

<p>以上。ウェーブレット変換は難しいことがわかった（こなみ）。ウェーブレットの利点欠点については書かなかったけれど、音声や音楽を解析したい場合に、時間周波数解析によく用いられる短時間フーリエ解析よりもウェーブレット解析の方が望ましい場合は非常によくあると思っているので、ぜひもっと使われてほしいですね。作ってるライブラリには必ず入れます。</p>

<h2>ちなみに</h2>

<p>計算コストがそこまでボトルネックにならないなら、畳み込みでウェーブレット計算してもいいんじゃないかと思ってる。FFTを使う方法の場合、あるスケールパラメータに対する時間方向のウェーブレット変換係数を一気に求められても、あるシフトパラメータに対する周波数方向のウェーブレット変換係数（つまりある時間でのスペクトルのようなもの）は一気に求められない気がしている。つまり、STFTみたいな形でインクリメンタルにスペクトルは求めにくいんじゃないかってこと（少なくとも自明には思えない）。畳み込み計算するなら、間違いなくできるけど。このあたり理解がまだあやふやなので、間違ってる可能性大</p>

<p>さらにちなみに、僕が作ってたリアルタイムで動く自動伴奏システムは畳み込みでウェーブレット変換してたよ。ウェーブレットよりもアルゴリズムのほうがボトルネックになっていたので全然気にならなかった。参考まで</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[簡単、フリーで使える音声/音楽信号処理ライブラリが作りたい]]></title>
    <link href="http://r9y9.github.io/blog/2013/10/15/signal-processing-library/"/>
    <updated>2013-10-15T23:47:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/10/15/signal-processing-library</id>
    <content type="html"><![CDATA[<p>音声を使ったアプリケーションが作りたい、例えば自分の声を誰かの声に変えたい、自動で音痴補正したい、関西弁のゆっくりちゃん作りたい、ギターエフェクト作りたい、とか思う人も少なくないんじゃないかと思う。</p>

<p>信号処理のアプリケーションを一から真面目に作ろうとすると、やるべきことが多すぎて途中で断念してしまうことがある。信号処理って、Hello 信号処理までがホント長くて、File I/O やらstreaming I/O等音声入出力書いたり、スペクトルやケプストラムやらメルケプやらウェーブレットやら特徴抽出書いたり、波形合成のアルゴリズム書いたり、難しい機械学習のアルゴリズム書いたり。本当にやりたいことを実現するためには、専門家はおろか初学者にはハードルが高すぎると思う。リアルタイムでやりたい（よくある状況）とかだとなおさら大変。</p>

<p>もちろん、そんなの自分で書かなくてもライブラリなりツールなりはたくさんある。</p>

<ul>
<li><a href="http://sp-tk.sourceforge.net/">SPTK &ndash; Speech Signal Processing Toolkit</a></li>
<li><a href="http://hts.sp.nitech.ac.jp/">HTS &ndash; HMM-based Speech Synthesis System</a></li>
<li><a href="http://www.mmdagent.jp/">MMDAgenet &ndash; toolkit for building voice interaction systems.</a></li>
<li><a href="http://open-jtalk.sourceforge.net/">OpenJTalk &ndash; HMM-based Text-to-Speech System</a></li>
<li><a href="https://ccrma.stanford.edu/software/stk/">STK &ndash; The Synthesis ToolKit in C++ (STK)</a></li>
<li><a href="http://aquila-dsp.org/">Aquila &ndash; Open source DSP library for C++</a></li>
<li><a href="http://www.portaudio.com/">PortAudio &ndash; Portable Cross-platform Audio I/O</a></li>
<li><a href="http://www.sonicvisualiser.org/">Sonic visualiser</a></li>
<li><a href="https://www.jyu.fi/hum/laitokset/musiikki/en/research/coe/materials/mirtoolbox">MIRToolbox</a></li>
<li><a href="http://isse.sourceforge.net/">ISSE &ndash; An Interactive Source Separation Editor</a></li>
<li><a href="http://www.wakayama-u.ac.jp/~kawahara/STRAIGHTadv/index_j.html">音声分析変換合成法STRAIGHT</a></li>
<li><a href="http://www.slp.is.ritsumei.ac.jp/~morise/world/">音声分析合成システム「WORLD」</a></li>
</ul>


<p>直近で印象に残ってるのはこんなもん。どれも素晴らしいけど、傾向としては専門知識のある人向けの物が多い気がしている。一方で、専門知識がなくても使えるツールというのは、本当に少ないと思う。これは個人的に大きな問題だと思っていて、何とか解決したい。というか僕でも簡単に使える便利ツールほしい。</p>

<p>とまぁそんな経緯で、</p>

<ul>
<li>音声/音楽信号処理をやるためのベースをすでに備えていて、アプリケーションが簡単に作れる</li>
<li>専門知識がなくてもまぁ使える</li>
<li>リアルタイムアプリケーションを作れる</li>
<li>商用/学術利用共にフリー</li>
</ul>


<p>なライブラリを作ろうと考えている。商用フリーなのは、単に僕がGPL/LPGLとか嫌いだから。フリーという制約を除けば選択肢も増えるけど、まぁ使いづらい。</p>

<p><a href="http://opencv.org/">opencv</a>とか、めっちゃ素晴らしいよね。まさにこういうものがほしい（作りたい）。これの音声版ですよ。何でないんだ。あったら教えて下さい。</p>

<p><a href="http://stackoverflow.com/questions/6938634/any-opencv-like-c-c-library-for-audio-processing">&ldquo;Any OpenCV-like C/C++ library for Audio processing?&rdquo; &ndash; StackOverflow</a></p>

<p>今頑張って作ってるので、お楽しみに。ここに書くことで、後に引けなくする作戦です。</p>

<h2>余談</h2>

<p>ライブラリ作ろうと思ったきっかけは、つい最近声質変換を作ろうとしたことにあります。自分の声を、好きな人の声に変えられたらおもしろいなぁと思って。何か火が着いちゃった時がありました。ただ、音声読み込み、FFT、ケプストラム、メルフィルタバンク、メルケプストラム、GMM、固有声空間の構築、MLSAフィルタ、短遅延アルゴリズム、overlapping addition合成（ry</p>

<p>もう、やることが多すぎてギブアップした。具体的にはmlsaフィルタが難しくてやめた。その時にSPTKのソースコードを読んでいたんだけど、すごいわかりにくくて、くそーっと思って、どうせなら新しく書きなおして使いやすいライブラリ作ってやろうと思ったのが、きっかけ。まぁえらそうな事書いといて、自分がほしいからっていうのが落ちなんですけどね。</p>

<p>ないから作る、シンプルに言えばそれだけです。あと、絶賛有志募集中です。よろしくおねがいします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BloggerからGithub Pagesに引越しした]]></title>
    <link href="http://r9y9.github.io/blog/2013/10/03/blogger-to-github-pages/"/>
    <updated>2013-10-03T01:24:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/10/03/blogger-to-github-pages</id>
    <content type="html"><![CDATA[<p>これからは、こちらで書いてく。</p>

<p>気まぐれなのでまた変わるかもしれないけど、ぼちぼちメモっていこうと思う</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start using octopress]]></title>
    <link href="http://r9y9.github.io/blog/2013/09/28/start-using-octopress/"/>
    <updated>2013-09-28T00:33:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/09/28/start-using-octopress</id>
    <content type="html"><![CDATA[<h1>使い始めました</h1>

<p>テストです</p>

<h2>Text</h2>

<p>こんにちは。octopressを使い始めた。Hello Octopress!</p>

<h2>code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello octopress&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Math</h2>

<script type="math/tex; mode=display">
\begin{align}
X(\omega) = \int_{-\infty}^{\infty} x(t) e^{-i\omega t} dt.
\end{align}
</script>


<p>なかなかいい。Let&rsquo;s enjoy with Octopress!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MLSA フィルタの実装]]></title>
    <link href="http://r9y9.github.io/blog/2013/09/23/mlsa-filter-wakaran/"/>
    <updated>2013-09-23T23:51:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/09/23/mlsa-filter-wakaran</id>
    <content type="html"><![CDATA[<p>音声合成に使われるMLSA（Mel-Log Spectrum Approximatation）フィルタを実装したいんだが、なにぶんわからん。SPTKにコードはあるけれど、正直理解できない。デジタル信号処理を小学一年生から勉強しなおしたいレベルだ</p>

<p>と、前置きはさておき、MLSAフィルタの実装を見つけたのでメモ。ここ最近ちょくちょく調べているが、SPTK以外で初めて見つけた。</p>

<p><a href="http://simple4all.org/wp-content/uploads/2013/05/Jiunn.pdf">Realisation and Simulation of the Mel Log Spectrum Approximation Filter | Simple4All Internship Report</a></p>

<p>Simple4Allという音声技術系のコミュニティの、学生さんのインターンの成果らしい。ちらっと調べてたら山岸ｾﾝｾｲも参加してる（た？）っぽい。ｺﾞｺﾞｺﾞｺﾞｺﾞ</p>

<p>上のreportで引用されているように、MLSA filterの実現方法については、益子さんのD論に詳しく書いてあることがわかった。今井先生の論文と併せて読んでみようと思う。</p>

<p><a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.109.3623&amp;rep=rep1&amp;type=pdf">T. Masuko, &ldquo;HMM-Based Speech Synthesis and Its Applications&rdquo;, Ph.D Thesis, 2002.</a></p>

<p>もう正直わからんしブラックボックスでもいいから既存のツール使うかーと諦めかけていたところで割りと丁寧な実装付き解説を見つけたので、もう一度勉強して実装してみようと思い直した。</p>

<p>機械学習にかまけて信号処理をちゃんと勉強していなかったつけがきている。LMA filterもMLSA filterも、本当にわからなくてツライ……orz</p>

<p>(実はそんなに難しくなく、理解できた 2013/09後半)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[調波打楽器音分離（HPSS）を試す]]></title>
    <link href="http://r9y9.github.io/blog/2013/09/14/hpss/"/>
    <updated>2013-09-14T23:34:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/09/14/hpss</id>
    <content type="html"><![CDATA[<h2>HPSSとは（一行説明）</h2>

<p>HPSS（Harmonic/Percussive Sound Separation）というのは、音源中の調波音/打楽器音が、それぞれ時間方向に滑らか/周波数方向に滑らかという異った性質を持つことを利用して、両者を分離する方法のこと。わからんければ論文へ</p>

<p>アイデアはシンプル、実装は簡単、効果は素晴らしい。specmurtに似たものを感じる。ということで少し感動したので結果を載せる</p>

<h2>実装</h2>

<p>調波音のスペクトログラムを$H$、打楽器音のスペクトログラムを$P$、時間indexをt、周波数indexをkとして、以下の数式をそのまま実装して、適当に反復計算すればおｋ</p>

<script type="math/tex; mode=display">
\begin{align}
|H_{t, k}| = \frac{w_{H}^2 (|H_{t+1,k}| + |H_{t-1,k}|)^2 |W_{t,k}|}{w_{H}^2 (|H_{t+1,k}| + |H_{t-1,k}|)^2 + w_{P}^2(|P_{t,k+1}| + |P_{t,k-1}|)^2}
\end{align}
</script>




<script type="math/tex; mode=display">
\begin{align}
|P_{t, k}| = \frac{w_{P}^2 (|P_{t,k+1}| + |P_{t,k-1}|)^2 |W_{t,k}|}{w_{H}^2 (|H_{t+1,k}| + |H_{t-1,k}|)^2 + w_{P}^2(|P_{t,k+1}| + |P_{t,k-1}|)^2}
\end{align}
</script>


<p>ただし</p>

<script type="math/tex; mode=display">
\begin{align}
|W_{t,k}| = |H_{t,k}| + |P_{t,k}|
\end{align}
</script>


<p>絶対値はパワースペクトル。論文中の表記とはけっこう違うので注意。厳密ではないです。$w_{H}, w_{P}$は重み係数で、両方共1.0くらいにしとく。</p>

<p>HPSSの論文はたくさんあるけど、日本語でかつ丁寧な <a href="http://ci.nii.ac.jp/naid/110007997346">&ldquo;スペクトルの時間変化に基づく音楽音響信号からの歌声成分の強調と抑圧&rdquo;</a> を参考にした。</p>

<p>H/Pから音源を再合成するときは、位相は元の信号のものを使えばおｋ</p>

<p>一点だけ、HとPの初期値どうすればいいんかなぁと思って悩んだ。まぁ普通に元音源のスペクトログラムを両方の初期値としてやったけど、うまく動いてるっぽい。</p>

<h2>結果</h2>

<p>フリー音源でテストしてみたので、結果を貼っとく。$w_{H}=1.0, w_{P}=1.0$、サンプリング周波数44.1kHz、モノラル、フレーム長512、窓関数はhanning。反復推定の回数は30。音源は、<a href="http://maoudamashii.jokersounds.com/archives/song_kyoko_feels_happiness.html">歌もの音楽素材：歌入り素材系のフリー音楽素材一覧</a> から使わせてもらいました。ありがとうございまっす。元音源だけステレオです。
18秒目くらいからを比較すると効果がわかりやすいです</p>

<h3>元音源</h3>

<iframe frameborder="no" height="166" scrolling="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F110367442" width="100%"></iframe>


<h3>Hのみ取り出して再合成した音源</h3>

<iframe frameborder="no" height="166" scrolling="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F110367534" width="100%"></iframe>


<h3>Pのみ取り出して再合成した音源</h3>

<iframe frameborder="no" height="166" scrolling="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F110367599" width="100%"></iframe>


<p>それにしても特に泥臭い努力をせずに、このクオリティーが出せるのはすごい。音源に対する事前知識も何もないし。あと、ちょっとノイズが載ってるのはたぶんプログラムミス。つらたーん</p>

<p>コレ以外にも多重HPSSとかもやったけど、いやーおもしろい手法だなーと思いました（こなみ</p>

<p>詳しくは論文へ（僕のじゃないけど</p>

<h2>参考</h2>

<ul>
<li><a href="http://ci.nii.ac.jp/naid/110007997346">橘 秀幸, 小野 順貴, 嵯峨山 茂樹, &ldquo;スペクトルの時間変化に基づく音楽音響信号からの歌声成分の強調と抑圧&rdquo;, 情報処理学会研究報告, vol. 2009-MUS-81(12), pp. 1-6, 2009.</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数学と英語と機械学習とプログラミング]]></title>
    <link href="http://r9y9.github.io/blog/2013/09/07/math-eng-ml-programming/"/>
    <updated>2013-09-07T23:32:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/09/07/math-eng-ml-programming</id>
    <content type="html"><![CDATA[<p>タイトルに上げたものは、僕がやりたい or やるべきと思っていることで、まぁ思い始めて数年立つんだけど未だにまったく出来ていない。どうにかしないとヤバイ</p>

<ul>
<li>数学：算数すら危うい</li>
<li>英語：話せない</li>
<li>機械学習：あぁカーネルトリックね（全然わかってない</li>
<li>プログラミング：c++わからん</li>
</ul>


<p>がんばろう。ただの日記</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UbuntuでNumpy, Scipyをソースからインストール]]></title>
    <link href="http://r9y9.github.io/blog/2013/08/12/numpy-scipy-for-ubuntu/"/>
    <updated>2013-08-12T00:35:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/08/12/numpy-scipy-for-ubuntu</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://r9y9.github.io/images/numpy_scipy_version_terminal.png"></p>

<p>apt-getを使う場合→<a href="http://d.hatena.ne.jp/sat0yu/20130302/1362172589">ubuntuにnumpy, scipy, matplotlib環境を構築 &ndash; sat0yuの日記</a>
ただやっぱり最新版を使いたいということがある。というわけでメモ。
Ubuntu 12.04 desktopを想定する（他でもほぼ同様の手順でインストールできると思う）。</p>

<h2>準備</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install python python-dev gcc gfortran g++
</span></code></pre></td></tr></table></div></figure>


<h2>Numpyのインストール</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/numpy/numpy
</span><span class='line'><span class="nb">cd </span>numpy
</span><span class='line'>python setup.py build
</span><span class='line'>sudo python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>かんたん</p>

<h2>Scipyのインストール</h2>

<p>これがちょっとめんどい。numpyのようには行かなかった。2013/08/12</p>

<h3>前準備</h3>

<p>以下をインストール</p>

<ul>
<li>numpy （上の通りでおｋ）</li>
<li>blas/lapack</li>
<li>cython</li>
</ul>


<h2>cythonのインストール</h2>

<p>これ、apt-get install cython でも入るんだけど、バージョンが古いって怒られた。なので、cythonもソースからいれる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/cython/cython
</span><span class='line'><span class="nb">cd </span>cython
</span><span class='line'>python setup.py build
</span><span class='line'>sudo python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>かんたん</p>

<h2>blas/lapackのインストール</h2>

<p>これはapt-getから入れればおｋ</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install libblas-dev liblapack-dev
</span></code></pre></td></tr></table></div></figure>


<p>scipyのINSTALL.txt （リンク）を見るに、libatlas3-base-devをインストールすれば良さそうだけど、ubuntu 12.04じゃ見つからんかった（2013/08/12時点で）。で、何となく試してたら、libblas-devとliblapack-devで行けた。</p>

<h2>Scipyのインストール！</h2>

<p>これでやっとインストールできる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone https://github.com/scipy/scipy
</span><span class='line'><span class="nb">cd </span>scipy
</span><span class='line'>python setup.py build
</span><span class='line'>sudo python setup.py install
</span></code></pre></td></tr></table></div></figure>


<p>終わり。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apt-getでコマンドがインストールできるか確認する方法]]></title>
    <link href="http://r9y9.github.io/blog/2013/08/12/apt-commend-check/"/>
    <updated>2013-08-12T00:33:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/08/12/apt-commend-check</id>
    <content type="html"><![CDATA[<p>apt-cacheを使えばいい、なんてことは誰でも知ってると思うけど、apt-cache search ってすると、コマンド名だけじゃなくコマンドの説明文も一緒に検索されてしまって、都合が悪い場合がある。</p>

<p>そんな時には以下のようにする。</p>

<p><code>
apt-cache search --names-only ^emacs24$
</code></p>

<p>これで、指定したコマンドがインストールできるかを確認できる。</p>

<h3>ポイント1</h3>

<p><code>--names-only</code> オプションを付ける。これで名前のみから検索してくれる。</p>

<h3>ポイント2</h3>

<p>正規表現を使う。これで柔軟性の高い検索ができる。</p>

<p>以上。</p>

<p>ちなみにyumだともうちょっとめんどくさい。yum listかyum searchを使えば似たようなことができる。yum listは、名前のみ検索、yum searchは名前と説明文を検索。</p>

<p>どうでもいいけどyum使いづらい。apt-get最高</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bashでコマンドの存在チェック]]></title>
    <link href="http://r9y9.github.io/blog/2013/08/12/bash-check-commend-existence/"/>
    <updated>2013-08-12T00:30:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/08/12/bash-check-commend-existence</id>
    <content type="html"><![CDATA[<p>素晴らしいまとめ→ <a href="http://qiita.com/kawaz/items/1b61ee2dd4d1acc7cc94">コマンドの存在チェックはwhichよりhashの方が良いかも→いやtypeが最強 &ndash; qiita</a></p>

<p>いつもwhichを使っていたのだけど、typeの方がよさげ。</p>

<p>今までこう書いてた</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> -x which <span class="s2">&quot;何かコマンド&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    コマンドが存在した場合の処理
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>コマンドが実行可能かどうかをwhichを使って判定する。少なくとも自分のubuntu 12.04では期待した通りに動く。だた環境によっては、指定したコマンドがない場合に、</p>

<p><code>
/usr/bin/which: no hogehoge
</code></p>

<p>みたいに表示されて、おそらくwhichが実行可能なバイナリだから、if文がtrueで通っちゃうことがある。これは困る。で、ググってたらtypeやhashがあることを知って、typeが良さそうということで試したら期待通りの動作になったのでハッピー。bash組み込みらしいね</p>

<h2>書き方</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if </span><span class="nb">type</span> <span class="s2">&quot;コマンド&quot;</span> &gt; /dev/null 2&gt;&amp;1
</span><span class='line'><span class="k">then</span>
</span><span class='line'>    コマンドが存在した場合の処理
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>bash組み込みのコマンドを使って存在判定するので、速いらしい（割りとどうでもいいけど）。標準エラー出力は意外とうっとしいということがわかったので、今回書いてたスクリプトでは捨てるようにした。</p>

<p>これからはtype使おう。［］も書かなくても済むしコードもすっきりする</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emacs24をUbuntu12.04 にインストールする方法]]></title>
    <link href="http://r9y9.github.io/blog/2013/08/11/emacs-24-for-ubuntu12-04/"/>
    <updated>2013-08-11T00:26:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/08/11/emacs-24-for-ubuntu12-04</id>
    <content type="html"><![CDATA[<h2>コマンド</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:cassou/emacs
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install emacs24
</span></code></pre></td></tr></table></div></figure>


<p>ググればすぐ解決するんだけど、過去何回も調べててアホみたいなので自分でもスクリプト書いたよ。といってもレポジトリ追加してapt-getするだけだけど。</p>

<p><a href="https://github.com/r9y9/install/blob/master/install_emacs.sh">https://github.com/r9y9/install/blob/master/install_emacs.sh</a></p>

<p>emacsがサーバに入ってないとしにたみることが判明したので、もうサーバにもemacs入れておくようにしたい。</p>

<p>ちなみに24以降だと、パッケージ管理システムがデフォでちゃんとしてたり、color-themeがデフォであったりするので、24以降の方がいい</p>

<h2>参考</h2>

<p><a href="http://d.hatena.ne.jp/going-around/20130120/1358693301">emacs24 &ndash; Ubuntu的日常</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naive Bayesの復習（実装編）: MNISTを使って手書き数字認識]]></title>
    <link href="http://r9y9.github.io/blog/2013/08/06/naive-bayes-mnist/"/>
    <updated>2013-08-06T23:08:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/08/06/naive-bayes-mnist</id>
    <content type="html"><![CDATA[<p>前回は学習アルゴリズムを導出したので、今回はそれを実装する。Gaussian Naive Bayesのみやった。例によって、アルゴリズムを書く時間よりも言語の使い方等を調べてる時間などの方が圧倒的に多いという残念感だったけど、とりあえずメモる。python, numpy, scipy, matplotlibすべて忘れてた。どれも便利だから覚えよう…</p>

<p>そもそもナイーブベイズやろうとしてたのも、MNISTのdigit recognitionがやりたかったからなので、実際にやってみた。</p>

<p>コードはgithubに置いた <a href="https://github.com/r9y9/naive_bayes">https://github.com/r9y9/naive_bayes</a></p>

<p>結果だけ知りたい人へ：正解率  76 %くらいでした。まぁこんなもんですね</p>

<h2>手書き数字認識</h2>

<p>手書き数字の画像データから、何が書かれているのか当てる。こういうタスクを手書き数字認識と言う。郵便番号の自動認識が有名ですね。</p>

<p>今回は、MNISTという手書き数字のデータセットを使って、0〜9の数字認識をやる。MNISTについて詳しくは本家へ→<a href="http://yann.lecun.com/exdb/mnist/">THE MNIST DATABASE of handwritten digits</a>
ただし、MNISTのデータセットは直接使わず、Deep Learningのチュートリアルで紹介されていた（<a href="http://deeplearning.net/tutorial/gettingstarted.html#gettingstarted">ここ</a>）、pythonのcPickleから読める形式に変換されているデータを使った。感謝</p>

<h2>とりあえずやってみる</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/r9y9/naive_bayes
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>naive_bayes
</span><span class='line'><span class="nv">$ </span>python mnist_digit_recognition.py
</span></code></pre></td></tr></table></div></figure>


<p>プログラムの中身は以下のようになってる。</p>

<ul>
<li>MNISTデータセットのダウンロード</li>
<li>モデルの学習</li>
<li>テスト</li>
</ul>


<p>実行すると、学習されたGaussianの平均が表示されて、最後に認識結果が表示される。今回は、単純に画像のピクセル毎に独立なGaussianを作ってるので、尤度の計算にめちゃくちゃ時間かかる。実装のせいもあるけど。なので、デフォでは50サンプルのみテストするようにした。</p>

<h2>学習されたGaussianの平均</h2>

<p><img class="center" src="http://r9y9.github.io/images/mnist_mean_of_gaussian.png" title="&#34;gaussian means&#34;" alt="&#34;gaussian means&#34;"></p>

<p>学習されたGaussianの平均をプロットしたもの。上のコードを実行すると表示される。</p>

<p>それっぽい。学習データは50000サンプル</p>

<h2>認識結果</h2>

<p>時間がかかるけど、テストデータ10000個に対してやってみると、結果は以下のようになった。</p>

<p><code>0.7634 (7634/10000)</code></p>

<p>まぁナイーブベイズなんてこんなもん。もちろん、改善のしようはいくらでもあるけれども。ちなみにDeep learningのチュートリアルで使われてたDBN.pyだと0.987くらいだった。</p>

<h2>感想</h2>

<p>相関が強い特徴だと上手くいかんのは当たり前で、ピクセル毎にGaussianなんて作らずに（ピクセル間の相関を無視せずに）、少しまともな特徴抽出をかませば、8割りは超えるんじゃないかなぁと思う。</p>

<p>あとこれ、実装してても機械学習的な面白さがまったくない（上がれ目的関数ｩｩーー！的な）ので、あまりおすすめしません。おわり。</p>

<p><a href="http://r9y9.github.io/blog/2013/07/28/naive-bayes-formulation/">導出編→Naive Bayesの復習（導出編）</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://www.slideshare.net/shima__shima/python-13349162">機械学習のPythonとの出会い（１）：単純ベイズ基礎編 &ndash; slideshare</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mathjaxを使ってBloggerで数式を書く]]></title>
    <link href="http://r9y9.github.io/blog/2013/08/03/mathjax-blogger/"/>
    <updated>2013-08-03T23:01:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/08/03/mathjax-blogger</id>
    <content type="html"><![CDATA[<p>Bloggerカスタマイズメモから、Mathjaxの部分を切り出して補足。ちょっとカスタマイズして書くことも増えたので。bloggerでの作業記録だけど、wordpressでもoctopressでもだいたい一緒</p>

<h2>Mathjax</h2>

<p>Latex形式の数式をレンダリングしてくれるエンジン。レンダリングに少し時間がかかるけど、それでも数式は綺麗だし画像じゃないから普通にコピーできるし、個人的にオススメ</p>

<h3>使い方</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\begin</span><span class="nb">{</span>align<span class="nb">}</span>
</span><span class='line'><span class="k">\sum</span><span class="nb">_{</span>i=1<span class="nb">}^{</span>n<span class="nb">}</span>i = <span class="k">\frac</span><span class="nb">{</span>1<span class="nb">}{</span>2<span class="nb">}</span>n(n+1)
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>align<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>と書くと、以下のように表示される</p>

<script type="math/tex; mode=display">
\begin{align}
\sum_{i=1}^{n}i = \frac{1}{2}n(n+1)
\end{align}
</script>


<p>他にもLaTeXの記法はまぁだいたい使えると思う。$$でインラインで書いてももちろんおｋ</p>

<h3>導入方法</h3>

<p>bloggerのレイアウト編集画面で、html/javascriptのガジェットを追加して、そこにmathjaxを使うためのスクリプトを書くだけ。もしくは、htmlを編集して、<code>&lt;head&gt;&lt;/head&gt;</code>の中に直接書く。
以下をコピペすればおｋ．</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">HTML</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span><span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">TeX</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>               <span class="nx">Macros</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>                        <span class="nx">bm</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;\\boldsymbol{#1}&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
</span><span class='line'>                        <span class="nx">argmax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;\\mathop{\\rm arg\\,max}\\limits&quot;</span><span class="p">],</span>
</span><span class='line'>                        <span class="nx">argmin</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;\\mathop{\\rm arg\\,min}\\limits&quot;</span><span class="p">]},</span>
</span><span class='line'>               <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;AMSmath.js&quot;</span><span class="p">,</span><span class="s2">&quot;AMSsymbols.js&quot;</span><span class="p">],</span>
</span><span class='line'>               <span class="nx">equationNumbers</span><span class="o">:</span> <span class="p">{</span> <span class="nx">autoNumber</span><span class="o">:</span> <span class="s2">&quot;AMS&quot;</span> <span class="p">}</span> <span class="p">},</span>
</span><span class='line'>        <span class="nx">extensions</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;tex2jax.js&quot;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">jax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;input/TeX&quot;</span><span class="p">,</span><span class="s2">&quot;output/HTML-CSS&quot;</span><span class="p">],</span>
</span><span class='line'>        <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span> <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span><span class="s1">&#39;$&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s2">&quot;\\(&quot;</span><span class="p">,</span><span class="s2">&quot;\\)&quot;</span><span class="p">]</span> <span class="p">],</span>
</span><span class='line'>                   <span class="nx">displayMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$$&#39;</span><span class="p">,</span><span class="s1">&#39;$$&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s2">&quot;\\[&quot;</span><span class="p">,</span><span class="s2">&quot;\\]&quot;</span><span class="p">]</span> <span class="p">],</span>
</span><span class='line'>                   <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span> <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;HTML-CSS&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">availableFonts</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;TeX&quot;</span><span class="p">],</span>
</span><span class='line'>                      <span class="nx">linebreaks</span><span class="o">:</span> <span class="p">{</span> <span class="nx">automatic</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでlatexの文法で数式が書ける。らくちん。wordpressとかでももちろん使える</p>

<h3>マクロの追加</h3>

<p>基本的にはここ→ <a href="http://irrep.blogspot.jp/2011/07/mathjax-in-blogger-ii.html">MathJax in Blogger (II)</a> に書いてあるとおりにやったけど、デフォではargmaxとかargminが使えないので、マクロを追加した。</p>

<p>Mathjaxを呼び出すスクリプトに、以下のような感じで追加（正確には上のスクリプト参考）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">bm</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;\\boldsymbol{#1}&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="nx">argmax</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;\\mathop{\\rm arg\\,max}\\limits&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">argmin</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;\\mathop{\\rm arg\\,min}\\limits&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>bmはおまけ。これで以下のような数式が書ける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='latex'><span class='line'><span class="k">\begin</span><span class="nb">{</span>align<span class="nb">}</span>
</span><span class='line'>y = <span class="k">\argmax</span><span class="nb">_</span>y p(y|x)
</span><span class='line'><span class="k">\end</span><span class="nb">{</span>align<span class="nb">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>次のように表示される</p>

<script type="math/tex; mode=display">
\begin{align}
y = \argmax_y p(y|x)
\end{align}
</script>


<p>マクロ参考: <a href="http://d.hatena.ne.jp/a_bicky/20130216/1361098344">http://d.hatena.ne.jp/a_bicky/20130216/1361098344</a></p>

<p>数式綺麗でイイネ！重いけどね</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multinomial distributionとCategorical distributionの違い]]></title>
    <link href="http://r9y9.github.io/blog/2013/07/31/multinomial-categorical-diff/"/>
    <updated>2013-07-31T22:51:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/07/31/multinomial-categorical-diff</id>
    <content type="html"><![CDATA[<p>些細な違いなんだけど調べたのでメモ。Multinomial distributionは多項分布のこと。Categorical distributionは、一般的な日本語表現が見つからなかった（なのでタイトルは英語）。打つのが大変なので、以下カテゴリカル分布と書く。</p>

<p>結論としては、多項分布のn=1の特殊な場合がカテゴリカル分布ですよってこと。以下少しまとめる。</p>

<p>分布を仮定する離散変数をカテゴリと呼ぶとして、</p>

<ul>
<li>多項分布は、n回試行したときに各カテゴリが何回出るかを表す確率分布</li>
<li>多項分布は、二項分布を多カテゴリに一般化したもの</li>
<li>カテゴリカル分布は、多項分布のn=1の場合に相当する</li>
<li>カテゴリカル分布は、ベルヌーイ分布を多カテゴリに一般化したもの</li>
</ul>


<p>以上</p>

<p>nokunoさんによるこの記事→ <a href="http://d.hatena.ne.jp/nokuno/20111006/1317853653">多項分布の最尤推定</a> は、多項分布というよりカテゴリカル分布の話。本文には書いてあるけどね。あと最尤推定の結果はどちらにしろ同じなんだけどね</p>

<h2>導出メモ</h2>

<p>一応最尤推定をやってみる。前回のナイーブベイズのメモの時は省略したので。入力の変数を$Y = {y_n}_{n=1}^{N}$とする。</p>

<h3>カテゴリカル分布</h3>

<script type="math/tex; mode=display">
\begin{align}
p(l) = \pi_{l}, \hspace{2mm} \sum_{l=1}^{L}\pi_{l} = 1
\end{align}
</script>


<p>ここで、$\pi_{l}$がパラメータ、lはカテゴリの番号</p>

<h3>最尤推定</h3>

<p>尤度関数を立てて、最大化することでパラメータを求める。各データは独立に生起すると仮定すると、尤度関数は以下のようになる。</p>

<script type="math/tex; mode=display">
\begin{align}
L(Y; \theta) = \prod_{n=1}^{N} \pi_{y_{n}}
\end{align}
</script>


<p>$\theta$はパラメータの集合ということで。</p>

<p>ラベルlの出現回数を$N_{l} = \sum_{n=1}^{N} \delta (y_{n} = l)$とすると、次のように書き直せる。</p>

<script type="math/tex; mode=display">
\begin{align}
L(Y; \theta) = \prod_{l=1}^{L}\pi_{l}^{N_{l}}
\end{align}
</script>


<p>よって、対数尤度は以下のようになる。</p>

<script type="math/tex; mode=display">
\begin{align}
\log L(Y; \theta) = \sum_{l=1}^{L} N_{l}\log \pi_{l}
\end{align}
</script>


<h3>ラグランジュの未定乗数法で解く</h3>

<p>nokunoさんの記事の通りだけど、一応手でも解いたのでメモ</p>

<script type="math/tex; mode=display">
\begin{align}
G = \sum_{l=1}^{L} N_{l}\log \pi_{l} + \lambda \Bigl[ \sum_{l=1}^{L} \pi_{l} -1) \Bigr]
\end{align}
</script>


<p>として、</p>

<script type="math/tex; mode=display">
\begin{align}
\frac{\partial G}{\partial \pi_{l}} = \frac{N_{l}}{\pi_{l}} + \lambda  =0
\end{align}
</script>


<p>よって、</p>

<script type="math/tex; mode=display">
\begin{align}
\pi_{l} = -\frac{N_{l}}{\lambda}
\end{align}
</script>


<p>ここで、以下の制約条件に代入すると、</p>

<script type="math/tex; mode=display">
\begin{align}
\sum_{l=1}^{L} \pi_{l} = 1
\end{align}
</script>


<p>$\lambda = -N$となることがわかるので、求めたかったパラメータは以下のようになる</p>

<script type="math/tex; mode=display">
\begin{align}
\pi_{l} = \frac{N_{l}}{N}
\end{align}
</script>


<p>カテゴリの頻度を計算するだけ、カンタン！！</p>

<h2>参考</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/Categorical_distribution">Categorical distribution &ndash; Wikipedia</a></li>
<li><a href="http://en.wikipedia.org/wiki/Multinomial_distribution">Multinomial distribution &ndash; Wikipedia</a></li>
<li><a href="http://d.hatena.ne.jp/nokuno/20111006/1317853653">多項分布の最尤推定 &ndash; nokunoの日記</a></li>
<li><a href="http://d.hatena.ne.jp/sleepy_yoshi/20111107/p1">多項分布の最尤推定とMAP推定 &ndash; 睡眠時間？</a></li>
<li><a href="http://lef-t.blogspot.jp/2013/02/categorical-distribution-wikipedia-free.html">Categorical distribution &ndash; Researcher&rsquo;s Eye</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Naive Bayesの復習（導出編）]]></title>
    <link href="http://r9y9.github.io/blog/2013/07/28/naive-bayes-formulation/"/>
    <updated>2013-07-28T22:24:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/07/28/naive-bayes-formulation</id>
    <content type="html"><![CDATA[<p>すぐ忘れるのでメモ。ナイーブベイズの学習アルゴリズムの導出とか、そもそもナイーブベイズが定番過ぎて意外とやったことなかった気もするので、復習がてらやってみた。</p>

<p>ちょっと修正 2013/07/30</p>

<ul>
<li>ナイーブベイズについて整理</li>
<li>学習アルゴリズムの導出</li>
</ul>


<h2>Naive bayes （ナイーブベイズ）</h2>

<p>スパムフィルタで使われたことで有名な確率モデルで、シンプルだけどそこそこ実用的なのが良い所。Naive bayesという名前は、特徴ベクトル間に条件付き独立性を仮定してることにある（実際は相関あることが多いけど、まぁ簡単のためって感じ）。具体的に例を挙げて言うと、例えば文書分類タスクの場合、各単語は独立に生起するという仮定を置くことに相当する。</p>

<p>まずはモデルを書き下す。入力データを$\mathbf{x}$（D次元）、ラベルを$y$（離散値）とすると、ナイーブベイズでは以下のように同時確率をモデル化する。</p>

<script type="math/tex; mode=display">
\begin{align}
p(\mathbf{x}, y) &= p(y)p(\mathbf{x}|y)\\
&= p(y)p(x_{1}, x_{2}, \dots, x_{D}|y)\\
&= p(y)\prod_{d=1}^{D} p(x_{d}|y)
\end{align}
</script>


<p>カンタン。基本的にdは次元に対するインデックス、nはデータに対するインデックスとして書く。</p>

<p>ポイントは特徴ベクトル間に条件付き独立性の仮定を置いていること（二度目）で、それによってパラメータの数が少なくて済む。</p>

<h2>分類</h2>

<p>一番確率の高いラベルを選べばいい。数式で書くと以下のようになる。</p>

<script type="math/tex; mode=display">
\begin{align}
\hat{y} &= \argmax_{y} [p(y|\mathbf{x})]\\
 &= \argmax_{y} [p(\mathbf{x}, y)]\\
 &= \argmax_{y} \Bigl[ p(y)\prod_{d=1}^{D} p(x_{d}|y)\Bigr]
\end{align}
</script>


<p>argmaxを取る上では、$y$に依存しない項は無視していいので、事後確率の最大化は、同時確率の最大化に等しくなる。</p>

<h2>学習アルゴリズムの導出</h2>

<p>ここからが本番。学習データを$X = {\mathbf{x}_{n}}_{n=1}^{N}$、対応する正解ラベルを<script type="math/tex">Y = {y_n}_{n=1}^{N} </script>として、最尤推定により学習アルゴリズムを導出する。実際はMAP推定をすることが多いけど、今回は省略。拡張は簡単。</p>

<h3>尤度関数</h3>

<p>各サンプルが独立に生起したと仮定すると、尤度関数は以下のように書ける。</p>

<script type="math/tex; mode=display">
\begin{align}
L(X,Y; \mathbf{\theta}) &= \prod_{n=1}^{N}p(y_{n})p(\mathbf{x_{n}}|y_{n})\\
&= \prod_{n=1}^{N} \Bigl[ p(y_{n})\prod_{d=1}^{D}p(x_{nd}|y_{n})\Bigr]
\end{align}
</script>


<p>対数を取って、</p>

<script type="math/tex; mode=display">
\begin{align}
\log L(X,Y; \mathbf{\theta}) =  \sum_{n=1}^{N}\Bigl[\log p(y_{n}) + \sum_{d=1}^{D}\log p(x_{nd}|y_{n})\Bigr]
\end{align}
</script>


<p>学習アルゴリズムは、この関数の最大化として導くことができる。</p>

<h3>ところで</h3>

<p>特徴ベクトルにどのような分布を仮定するかでアルゴリズムが少し変わるので、今回は以下の二つをやってみる。</p>

<ul>
<li>ベルヌーイ分布</li>
<li>正規分布</li>
</ul>


<p>前者は、binary featureを使う場合で、後者は、continuous featureを使う場合を想定してる。画像のピクセル値とか連続値を扱いたい場合は、正規分布が無難。その他、多項分布を使うこともあるけど、ベルヌーイ分布の場合とほとんど一緒なので今回は省略</p>

<p>ラベルに対する事前分布は、ラベルが離散値なので多項分布（間違ってた）categorical distributionとする。日本語でなんて言えばいいのか…<a href="http://en.wikipedia.org/wiki/Categorical_distribution">wikipedia</a> 参考</p>

<h2>Bernoulli naive bayes</h2>

<p>特徴ベクトルにベルヌーイ分布を仮定する場合。0 or 1のbinary featureを使う場合にはこれでおｋ．ベルヌーイ分布は以下</p>

<script type="math/tex; mode=display">
\begin{align}
p(x;q) = q^{x}(1-q)^{1-x}
\end{align}
</script>


<p>特徴ベクトルに対するパラメータは、ラベル数×特徴ベクトルの次元数（L×D）個ある。対数尤度関数（Gとする）は、以下のように書ける。</p>

<script type="math/tex; mode=display">
\begin{align}
G &=  \sum_{n=1}^{N}\Bigl[ \log \pi_{y_{n}} \notag \\
 &+ \sum_{d=1}^{D} \bigl[ x_{nd} \log q_{y_{n}d} + (1-x_{nd}) \log (1-q_{y_{n}d}) \bigr] \Bigr]
\end{align}
</script>


<p>ここで、<script type="math/tex">\pi_{y_{n}}</script> はcategorical distributionのパラメータ。</p>

<h3>微分方程式を解く</h3>

<p>あとは微分してゼロ。ラベルに対するインデックスをl 、学習データ中のラベルlが出現する回数を$N_{l} = \sum_{n=1}^{N} \delta(y_{n}= l)$、さらにその中で<script type="math/tex">x_{nd}=1 </script>となる回数を<script type="math/tex">N_{ld} = \sum_{n=1}^{N} \delta(y_{n}= l) \cdot x_{nd} </script>とすると、</p>

<script type="math/tex; mode=display">
\begin{align}
\frac{\partial G}{\partial q_{ld}} &= \frac{N_{ld}}{q_{ld}} - \frac{N_{l} - N_{ld}}{1-q_{ld}}  = 0
\end{align}
</script>


<p>よって、</p>

<script type="math/tex; mode=display">
\begin{align}
q_{ld} = \frac{N_{ld}}{N_{l}} \label{eq:naive1}
\end{align}
</script>


<p>できました。厳密に数式で書こうとするとめんどくさい。日本語で書くと、</p>

<script type="math/tex; mode=display">
\begin{align}
パラメータ = \frac{特徴ベクトルの出現回数}{ラベルの出現回数}
\end{align}
</script>


<p>って感じでしょうか。</p>

<p>categoricalのパラメータについては、めんどくさくなってきたのでやらないけど、もう直感的に以下。ラグランジュの未定定数法でおｋ</p>

<script type="math/tex; mode=display">
\begin{align}
\pi_{l} = \frac{N_{l}}{N} \label{eq:naive2}
\end{align}
</script>


<p>学習は、式 ($\ref{eq:naive1}$)、($\ref{eq:naive2}$) を計算すればおｋ．やっと終わった。。。長かった。</p>

<h2>Gaussian naive bayes</h2>

<p>次。$x$が連続変数で、その分布に正規分布（Gaussian）を仮定する場合。まず、正規分布は以下のとおり。</p>

<script type="math/tex; mode=display">
\begin{align}
p(x; \mu, \sigma^{2}) = \frac{1}{\sqrt{2\pi\sigma^{2}}}\exp\Bigl\{-\frac{(x-\mu)^{2}}{2\sigma^{2}}\Bigr\}
\end{align}
</script>


<p>正規分布を使う場合、特徴ベクトルに対するパラメータは、ラベル数×特徴ベクトルの次元数×2個ある。×2となっているのは、平均と分散の分。対数尤度関数は、以下のようになる</p>

<script type="math/tex; mode=display">
\begin{align}
G &=  \sum_{n=1}^{N}\Bigl[ \log \pi_{y_{n}} \notag \\
 &+ \sum_{d=1}^{D} \bigl[ -\frac{1}{2}\log 2\pi - \log\sigma_{y_{n}d} -  \frac{(x_{nd}-\mu_{y_{n}d})^2}{2\sigma_{y_{n}d}} \bigr] \Bigr]
\end{align}
</script>


<h3>微分方程式を解く</h3>

<p>計算は省略するけど、偏微分してゼロと置けば、結果は以下のようになる。式が若干煩雑だけど、基本的には正規分布の最尤推定をしてるだけ。</p>

<script type="math/tex; mode=display">
\begin{align}
\mu_{ld} = \frac{1}{N_{l}} \sum_{n=1}^{N} x_{nd} \cdot \delta(y_{n} =l) = \frac{N_{ld}}{N_{l}} \label{eq:naive3}
\end{align}
</script>




<script type="math/tex; mode=display">
\begin{align}
\sigma_{ld} = \frac{1}{N_{l}} \sum_{n=1}^{N} (x_{nd}-\mu_{ld})^{2} \cdot \delta (y_{n}= l) \label{eq:naive4}
\end{align}
</script>


<p>学習では、式 ($\ref{eq:naive2}$)、($\ref{eq:naive3}$)、($\ref{eq:naive4}$)を計算すればおｋ．式 ($\ref{eq:naive3}$)は式 ($\ref{eq:naive1}$)と一緒なんだけど、正規分布の場合はxが連続値なので注意。分散が特徴ベクトルの次元によらず一定とすれば、パラメータの数をぐっと減らすこともできる。</p>

<h2>おわりに</h2>

<p>これで終わり。予想以上に書くのに時間かかった…。今日logistic regressionを見直してて、ふとnaive bayesやったことないなーと思って、まぁ試すだけならscipy使えば一瞬なんだろうけどちょっと導出までやってみようと思った。</p>

<p>実装編→<a href="http://r9y9.github.io/blog/2013/08/06/naive-bayes-mnist/">Naive Bayesの復習（実装編）: MNISTを使って手書き数字認識</a></p>

<h2>参考</h2>

<ul>
<li><a href="http://d.hatena.ne.jp/saket/20130212/1360678478">scikit.learn手法徹底比較！ ナイーブベイズ編Add Star &ndash; Risky Dune</a></li>
<li><a href="http://www.cs.cmu.edu/~epxing/Class/10701-10s/Lecture/lecture5.pdf">Gaussian Naïve Bayes, andLogistic Regression</a></li>
<li><a href="http://aidiary.hatenablog.com/entry/20100613/1276389337">ナイーブベイズを用いたテキスト分類 &ndash; 人工知能に関する断創録</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NMFアルゴリズムの導出（ユークリッド距離版）]]></title>
    <link href="http://r9y9.github.io/blog/2013/07/27/nmf-euclid/"/>
    <updated>2013-07-27T23:30:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/07/27/nmf-euclid</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>シングルトラックにミックスダウンされた音楽から、その構成する要素（例えば、楽器とか）を分離したいと思うことがある。
音源分離と言えば、最近はNon-negative Matrix Factorization (非負値行列因子分解; NMF) が有名。
実装は非常に簡単だけど、実際にやってみるとどの程度の音源分離性能が出るのか気になったので、やってみる。</p>

<p>と思ったけど、まずNMFについて整理してたら長くなったので、実装は今度にして、まずアルゴリズムを導出してみる。</p>

<h2>NMFの問題設定</h2>

<p>NMFとは、与えられた行列を非負という制約の元で因子分解する方法のこと。
音楽の場合、対象はスペクトログラムで、式で書くとわかりやすい。
スペクトログラムを <script type="math/tex"> \mathbf{Y}: [\Omega \times T] </script>
とすると、</p>

<script type="math/tex; mode=display">
\begin{align}
\mathbf{Y} \simeq \mathbf{H} \mathbf{U}
\end{align}
</script>


<p>となる、<script type="math/tex">\mathbf{H}: [\Omega \times K]、\mathbf{U}: [K \times T]</script>を求めるのがNMFの問題。
ここで、Hが基底、Uがアクティビティ行列に相当する。
NMFは、元の行列Yと分解後の行列の距離の最小化問題として定式化できる。</p>

<script type="math/tex; mode=display">
\begin{align}
\mathbf{H}, \mathbf{U} = \mathop{\rm arg~min}\limits_{\mathbf{H}, \mathbf{U}} D (\mathbf{Y}|\mathbf{H}\mathbf{U}), \hspace{3mm} {\rm subect\ to} \hspace{3mm} H_{\omega,k}, U_{k, t} > 0
\end{align}
</script>


<p>すごくシンプル。Dは距離関数で色んなものがある。ユークリッド距離、KLダイバージェンス、板倉斎藤距離、βダイバージェンスとか。</p>

<h2>ユークリッド距離の最小化</h2>

<p>ここではユークリッド距離（Frobeniusノルムともいう）として、二乗誤差最小化問題を解くことにする。
一番簡単なので。最小化すべき目的関数は次のようになる。</p>

<script type="math/tex; mode=display">
\begin{align}
D (\mathbf{Y}|\mathbf{H}\mathbf{U}) =& || \mathbf{Y}-\mathbf{HU}||_{F} \\
=& \sum_{\omega, k}|Y_{\omega,t} - \sum_{k}H_{\omega, k}U_{k, t}|^{2}
\end{align}
</script>


<p>行列同士の二乗誤差の最小化は、要素毎の二乗誤差の和の最小化ということですね。展開すると、次のようになる。</p>

<script type="math/tex; mode=display">
\begin{align}
\sum_{\omega, k}|Y_{\omega,t} - \sum_{k}H_{\omega, k}U_{k, t}|^{2}
= \sum_{\omega, t}(|Y_{\omega, t}|^2 -2Y_{\omega, t} \sum_{k}H_{\omega, k}U_{k, t} + |\sum_{k}H_{\omega, k}U_{k, t}|^2)
\end{align}
</script>


<p>微分してゼロ！としたいところだけど、3つ目の項を見ると、絶対値の中に和が入っているので、そうはいかない。
なので、補助関数法を使う。
基本的なアイデアは、目的関数の直接の最適化が難しい場合には、上界関数を立てることで間接的に最小化するということ。</p>

<p>3項目に対してイェンセンの不等式を適応すると、</p>

<script type="math/tex; mode=display">
\begin{align}
|\sum_{k}H_{\omega,k}U_{k,t}|^{2} \le \sum_{k} \frac{H_{\omega,k}^{2}U_{k, t}^{2}}{\lambda_{k, \omega, t}}
\end{align}
</script>


<p>これで、右辺は <script type="math/tex"> H_{\omega,k}, U_{k, t} </script> について二次関数になったので、微分できてはっぴー。
上の不等式を使えば、実際に最小化する目的関数は、次のようになる。</p>

<script type="math/tex; mode=display">
\begin{align}
G := \sum_{\omega, t}(|Y_{\omega, t}|^2 -2Y_{\omega, t} \sum_{k}H_{\omega, k}U_{k, t} + \sum_{k} \frac{H_{\omega,k}^{2}U_{k, t}^{2}}{\lambda_{k, \omega, t}})
\end{align}
</script>


<p>Gを最小化すれば、間接的に元の目的関数も小さくなる。</p>

<h2>更新式の導出</h2>

<p>あとは更新式を導出するだけ。
まず、目的関数を上から押さえるイメージで、イェンセンの不等式の等号条件から補助変数の更新式を求める。
この場合、kに関して和が1になることに注意して、</p>

<script type="math/tex; mode=display">
\begin{align}
\lambda_{k,\omega,t} = \frac{H_{\omega, k}U_{k, t}}{\sum_{k'}H_{\omega, k'}U_{k', t}}
\end{align}
</script>


<p>次に、目的関数Gを<script type="math/tex">H_{\omega,k}, U_{k,t} </script>で偏微分する。</p>

<script type="math/tex; mode=display">
\begin{align}
\frac{\partial G}{\partial H_{\omega,k}} &= \sum_{t} (-2 Y_{\omega,t}U_{k,t} + 2 \frac{H_{\omega, k}U_{k, t}^2}{\lambda_{k,\omega,t}}) &= 0\\
\frac{\partial G}{\partial U_{k, t}} &= \sum_{\omega} (-2 Y_{\omega,t}H_{\omega,k} + 2 \frac{H_{\omega, k}^2U_{k, t}}{\lambda_{k,\omega,t}}) &= 0
\end{align}
</script>


<p>少し変形すれば、以下の式を得る。</p>

<script type="math/tex; mode=display">
\begin{align}
H_{\omega,k} = \frac{\sum_{t}Y_{\omega,t}U_{k,t}}{\sum_{t}\frac{U_{k, t}^2}{\lambda_{k,\omega,t}}}, \hspace{3mm}
U_{k,t} = \frac{\sum_{\omega}Y_{\omega,t}H_{\omega,k}}{\sum_{\omega}\frac{H_{\omega, k}^2}{\lambda_{k,\omega,t}}}
\end{align}
</script>


<p>補助変数を代入すれば、出来上がり。</p>

<script type="math/tex; mode=display">
\begin{align}
H_{\omega,k} = H_{\omega,k} \frac{\sum_{t}Y_{\omega,t}U_{k,t}}{\sum_{t}U_{k, t}\sum_{k'}H_{\omega, k'}U_{k', t}}, \hspace{3mm}
U_{k,t} = U_{k,t}\frac{\sum_{\omega}Y_{\omega,t}H_{\omega,k}}{\sum_{\omega}H_{\omega, k}\sum_{k'}H_{\omega, k'}U_{k', t}}
\end{align}
</script>


<h2>行列表記で</h2>

<p>これで終わり…ではなく、もう少しスマートに書きたい。
ここで、少し実装を意識して行列表記を使って書きなおす。
行列の積は、AB（A: [m x n] 行列、B: [n x l] 行列）のようにAの列数とBの行数が等しくなることに注意して、
ほんの少し変形すれば最終的には次のように書ける。</p>

<script type="math/tex; mode=display">
\begin{align}
H_{\omega,k} &= H_{\omega,k} \frac{[\mathbf{Y}\mathbf{U}^{\mathrm{T}}]_{\omega,k}}{[\mathbf{H}\mathbf{U}\mathbf{U}^{\mathrm{T}}]_{\omega,k}}, \\
U_{k,t} &= U_{k,t}\frac{[\mathbf{H}^{\mathrm{T}}\mathbf{Y}]_{k, t}}{[\mathbf{H}^{\mathrm{T}}\mathbf{H}\mathbf{U}]_{k,t}}
\end{align}
</script>


<p>乗法更新式というやつですね。
元々の行列の要素が非負なら、掛けても非負のままですよってこと。
NMFのアルゴリズムは、この更新式を目的関数が収束するまで計算するだけ、簡単。Pythonなら数行で書ける。</p>

<h2>メモ</h2>

<p>自分で導出していて思ったことをメモっておこうと思う。</p>

<ul>
<li>更新式は、行列の要素毎に独立して求められるんだなぁということ。

<ul>
<li>まぁ要素毎に偏微分して等式立ててるからそうなんだけど。更新の順番によって、収束する値、速度が変わるといったことはないんだろうか。</li>
</ul>
</li>
<li>行列演算とスカラー演算が同じ式に同時に含まれていることがあるので注意。例えば、最終的な更新式の割り算は、要素毎のスカラー演算で、行列演算ではない。</li>
<li>何かいっぱいシグマがあるけど、めげない。計算ミスしやすい、つらい。</li>
<li>NMFという名前から行列操作を意識してしまうけど、更新式の導出の過程に行列の微分とか出てこない。更新式の導出は、行列の要素個々に対して行うイメージ。</li>
</ul>


<p>NMFなんて簡単、と言われますが（要出典）、実際にやってみると結構めんどくさいなー、と思いました（小並感</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[「日本語入力を支える技術」を読んだ]]></title>
    <link href="http://r9y9.github.io/blog/2013/07/27/nlp-ime-book-read/"/>
    <updated>2013-07-27T00:30:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/07/27/nlp-ime-book-read</id>
    <content type="html"><![CDATA[<div align="center">
<a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774149934/ryry-22/" target="_blank"><img alt="日本語入力を支える技術　～変わり続けるコンピュータと言葉の世界 (WEB+DB PRESS plus)" height="500" src="http://ecx.images-amazon.com/images/I/51DjOK-jLoL.jpg" title="日本語入力を支える技術　～変わり続けるコンピュータと言葉の世界 (WEB+DB PRESS plus)" width="354" /></a></div>


<h2>感想</h2>

<ul>
<li>自然言語処理はあまり詳しくないけど、さっと読んで全然わからんということはなかった</li>
<li>2章まではさくっと読めたけど、3章のトライ、ダブル配列当たりでコケた</li>
<li>簡潔ビット構造はわかりやすい</li>
<li>カッコウ・ハッシュおもしろい</li>
<li>「CRFの更新式はどのような動作をするか」の説明はすごくわかりやすい</li>
<li>付録が付録じゃないくらい力入ってる…ヤバイ…</li>
</ul>


<p>（小並感）</p>

<p>全体的にわかりやすい説明が見て取れるけど、内容が盛りだくさん過ぎる印象。すべてをこの本で理解しようとするのは無理なので、この本を機に、他の本や論文などを読んで理解を深めるといいと思った。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MigMix 1P, Migu 1M, Rictyとか綺麗なフォントをインストールするスクリプト ]]></title>
    <link href="http://r9y9.github.io/blog/2013/07/27/mig-ricty-font-install/"/>
    <updated>2013-07-27T00:11:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/07/27/mig-ricty-font-install</id>
    <content type="html"><![CDATA[<p>家、大学、会社、レンタルサーバ、デスクトップからノートPCや仮想マシンなど、色んな環境があると思う。それぞれで、別個に環境を整えるのってとてもめんどくさい。.zshrc等の設定ファイルは、github置いておいて各環境でpullすればいい。けど、fontはデカイし、Rictyに関してはライセンスの関係もあってフォント自体を配布することは禁止されているので、github等にアップロードしておくのはいい方法ではない。</p>

<p>というわけで、Rictyを含め僕が使ってるフォントをインストールするスクリプトを書いた。</p>

<p>インストールされるのは、以下のフォント</p>

<ul>
<li>MigMix 1P</li>
<li>Migu 1M</li>
<li>Inconsolata</li>
<li>Ricty</li>
<li>Ricty for Powerline</li>
</ul>


<p>基本的にはMigMix 1Pを使っていて、テキストエディタ等で等幅フォントが望ましい場合は、Migu 1M か Ricty にしてる。Ricty for Powerlineは、powerlineで必要なフォントパッチを当てたもので、ターミナルで使ってる。</p>

<p><a href="https://gist.github.com/r9y9/5938857">https://gist.github.com/r9y9/5938857</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Requirement: wget, unzip, git and fontforge</span>
</span><span class='line'><span class="k">function </span>check_requirement<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nv">messages</span><span class="o">=()</span>
</span><span class='line'>    <span class="k">for </span>r in <span class="s2">&quot;wget&quot;</span> <span class="s2">&quot;unzip&quot;</span> <span class="s2">&quot;git&quot;</span> <span class="s2">&quot;fontforge&quot;</span>
</span><span class='line'>    <span class="k">do</span>
</span><span class='line'> <span class="o">[</span> -z <span class="sb">`</span>which <span class="nv">$r</span><span class="sb">`</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> messages+<span class="o">=(</span><span class="nv">$r</span><span class="o">)</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> <span class="k">${#</span><span class="nv">messages</span><span class="p">[@]</span><span class="k">}</span> -gt 0 <span class="o">]</span>
</span><span class='line'>    <span class="k">then</span>
</span><span class='line'><span class="k"> </span><span class="nb">echo</span> <span class="s2">&quot;NOT found: ${messages[@]}. Try again after installing the command(s).&quot;</span>
</span><span class='line'> <span class="nb">exit </span>1;
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Install directory</span>
</span><span class='line'><span class="o">[</span> ! -d ~/.fonts <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir -p ~/.fonts/
</span><span class='line'>
</span><span class='line'><span class="c"># MigMix 1P</span>
</span><span class='line'><span class="k">function </span>install_migumix-1p<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    wget -O migmix.zip <span class="s2">&quot;http://sourceforge.jp/frs/redir.php?m=jaist&amp;f=%2Fmix-mplus-ipa%2F59021%2Fmigmix-1p-20130617.zip&quot;</span>
</span><span class='line'>    unzip -o migmix.zip -d migmix
</span><span class='line'>    find migmix -name <span class="s2">&quot;*.ttf&quot;</span> | xargs -i mv -vf <span class="o">{}</span> ~/.fonts
</span><span class='line'>    rm -rf migmix*
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Migu 1M</span>
</span><span class='line'><span class="k">function </span>install_migu-1m<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    wget -O migu-1m.zip <span class="s2">&quot;http://sourceforge.jp/frs/redir.php?m=jaist&amp;f=%2Fmix-mplus-ipa%2F59022%2Fmigu-1m-20130617.zip&quot;</span>
</span><span class='line'>    unzip -o migu-1m.zip -d migu-1m
</span><span class='line'>    find migu-1m -name <span class="s2">&quot;*.ttf&quot;</span> | xargs -i mv -vf <span class="o">{}</span> ~/.fonts
</span><span class='line'>    rm -rf migu-1m*
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Inconsolata</span>
</span><span class='line'><span class="k">function </span>install_inconsolata<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    wget -O Inconsolata.otf <span class="s2">&quot;http://levien.com/type/myfonts/Inconsolata.otf&quot;</span>
</span><span class='line'>    mv -vf Inconsolata.otf ~/.fonts
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Ricty</span>
</span><span class='line'><span class="c"># Migu-1m and Inconsolata must be installed in advance</span>
</span><span class='line'><span class="k">function </span>install_ricty<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    git clone https://github.com/yascentur/Ricty.git
</span><span class='line'>    sh Ricty/ricty_generator.sh auto
</span><span class='line'>    mv -vf Ricty*.ttf ~/.fonts
</span><span class='line'>    rm -rf Ricty
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Powerline symbols</span>
</span><span class='line'><span class="k">function </span>install_powerline_symbols<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    wget -O PowerlineSymbols.otf <span class="s2">&quot;https://github.com/Lokaltog/powerline/raw/develop/font/PowerlineSymbols.otf&quot;</span>
</span><span class='line'>    mv -vf PowerlineSymbols.otf ~/.fonts/
</span><span class='line'>
</span><span class='line'>    wget -O 10-powerline-symbols.conf <span class="s2">&quot;https://github.com/Lokaltog/powerline/raw/develop/font/10-powerline-symbols.conf&quot;</span>
</span><span class='line'>    <span class="o">[</span> ! -d ~/.config/fontconfig/conf.d/ <span class="o">]</span> <span class="o">&amp;&amp;</span> mkdir -p ~/.config/fontconfig/conf.d/
</span><span class='line'>    mv -vf 10-powerline-symbols.conf ~/.config/fontconfig/conf.d/
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Ricty for powerline</span>
</span><span class='line'><span class="k">function </span>install_ricty_for_powerline<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    wget -O fontpatcher.py <span class="s2">&quot;https://github.com/Lokaltog/powerline/raw/develop/font/fontpatcher.py&quot;</span>
</span><span class='line'>    wget -O fontpatcher-symbols.sfd <span class="s2">&quot;https://github.com/Lokaltog/powerline/raw/develop/font/fontpatcher-symbols.sfd&quot;</span>
</span><span class='line'>    fontforge -script fontpatcher.py ~/.fonts/Ricty-Regular.ttf
</span><span class='line'>    mv -vf Ricty*.ttf ~/.fonts
</span><span class='line'>    rm -f fontpatcher.py
</span><span class='line'>    rm -f fontpatcher-symbols.sfd
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>check_requirement
</span><span class='line'>
</span><span class='line'>install_migumix-1p
</span><span class='line'>install_migu-1m
</span><span class='line'>install_inconsolata
</span><span class='line'>install_ricty
</span><span class='line'>install_powerline_symbols
</span><span class='line'>install_ricty_for_powerline
</span><span class='line'>
</span><span class='line'><span class="nb">fc</span>-cache -fv ~/.fonts
</span></code></pre></td></tr></table></div></figure>


<p>これでフォントインストールはほぼ自動化。ありとあらゆることを自動化したい。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bloggerカスタマイズメモ]]></title>
    <link href="http://r9y9.github.io/blog/2013/07/27/blogger-custom/"/>
    <updated>2013-07-27T00:00:00+09:00</updated>
    <id>http://r9y9.github.io/blog/2013/07/27/blogger-custom</id>
    <content type="html"><![CDATA[<h2>まとめ</h2>

<p>とりあえず、行ったのは以下の通り。変更の度にこの投稿に追加するかも</p>

<ul>
<li><a href="http://r9y9.github.io/blog/2013/08/03/mathjax-blogger/">Mathjaxの導入</a></li>
<li>syntax highlighterの導入</li>
<li>google-code-prettyyの導入</li>
<li>CSSの修正</li>
<li>ソーシャルリンクの追加</li>
</ul>


<h2>Mathjax</h2>

<p>別記事にまとめた→ <a href="http://r9y9.github.io/blog/2013/08/03/mathjax-blogger/">Mathjaxを使ってBloggerで数式を書く</a></p>

<h2>Syntax Highlighter</h2>

<p>結局syntax highlighterを使うことにした（2013/08/03）。
google-code-prettyだとデフォに不満が若干あるし、カスタマイズしててもめんどくさかったので。
デフォで綺麗なのがいい</p>

<h3>導入方法</h3>

<p><a href="http://www.way2blogging.org/widget-generators/syntax-highlighter-scripts-generator">http://www.way2blogging.org/widget-generators/syntax-highlighter-scripts-generator</a></p>

<p>ここでgenerateされたコードを埋め込むだけ。</p>

<h3>使い方</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;pre</span> <span class="na">class=</span><span class="s">&quot;brush: html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   write html code here
</span><span class='line'><span class="nt">&lt;/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>カスタマイズ</h3>

<p><a href="http://8bitsize.blogspot.jp/2012/10/syntax-highlighter-config.html">http://8bitsize.blogspot.jp/2012/10/syntax-highlighter-config.html</a></p>

<p>ここを参考に、toolbarを表示しないようにした。</p>

<p><code>SyntaxHighlighter.defaults['toolbar'] = false;</code></p>

<p>とgenerateされたスクリプトに追加するだけ</p>

<h2>google-code-pretty</h2>

<p>結局syntax highlighterを使うことにした（2013/08/03）。
google-code-prettyだとデフォに不満が若干あるし、カスタマイズしててもめんどくさかったので。</p>

<h3>導入方法</h3>

<p>以下のリンクから、add to bloggerボタンを押すと一瞬で導入できる</p>

<p><a href="http://www.kuribo.info/2008/04/code-prettify.html">http://www.kuribo.info/2008/04/code-prettify.html</a></p>

<h2>CSS</h2>

<p>cssの修正は、とりあえず最低限以下のようにした。
全体のフォントをよさげな奴に指定
タイトルのフォントやらをよさげな奴に指定
headingのフォーマット変更</p>

<p>気に入らないところはその都度調整すると思うので、gistで管理することにする。
<a href="https://gist.github.com/r9y9/6094627">https://gist.github.com/r9y9/6094627</a></p>

<h2>ソーシャルリンク</h2>

<h3>Follow me ボタン</h3>

<p><a href="http://www.go2web20.net/twitterFollowBadge/">http://www.go2web20.net/twitterFollowBadge/</a>
ここで作って、html/javascriptガジェットにコードを貼り付けるだけ。</p>

<h3>いいねボタン</h3>

<p>あとで付けたい</p>

<p>継ぎ足し継ぎ足しカスタマイズしていく</p>
]]></content>
  </entry>
  
</feed>
